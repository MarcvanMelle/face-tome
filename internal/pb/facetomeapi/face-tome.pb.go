// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/face-tome.proto

package facetomeapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AgeGroup int32

const (
	AgeGroup_AGE_UNKNOWN       AgeGroup = 0
	AgeGroup_AGE_INFANT        AgeGroup = 1
	AgeGroup_AGE_TODDLER       AgeGroup = 2
	AgeGroup_AGE_CHILD         AgeGroup = 3
	AgeGroup_AGE_ADOLESCANT    AgeGroup = 4
	AgeGroup_AGE_TEENAGER      AgeGroup = 5
	AgeGroup_AGE_YOUNG_ADULT   AgeGroup = 6
	AgeGroup_AGE_ADULT         AgeGroup = 7
	AgeGroup_AGE_MIDDLE_AGE    AgeGroup = 8
	AgeGroup_AGE_OLD_AGE       AgeGroup = 9
	AgeGroup_AGE_CENTIGENARIAN AgeGroup = 10
	AgeGroup_AGE_ANCIENT       AgeGroup = 11
	AgeGroup_AGE_TIMELESS      AgeGroup = 12
)

var AgeGroup_name = map[int32]string{
	0:  "AGE_UNKNOWN",
	1:  "AGE_INFANT",
	2:  "AGE_TODDLER",
	3:  "AGE_CHILD",
	4:  "AGE_ADOLESCANT",
	5:  "AGE_TEENAGER",
	6:  "AGE_YOUNG_ADULT",
	7:  "AGE_ADULT",
	8:  "AGE_MIDDLE_AGE",
	9:  "AGE_OLD_AGE",
	10: "AGE_CENTIGENARIAN",
	11: "AGE_ANCIENT",
	12: "AGE_TIMELESS",
}
var AgeGroup_value = map[string]int32{
	"AGE_UNKNOWN":       0,
	"AGE_INFANT":        1,
	"AGE_TODDLER":       2,
	"AGE_CHILD":         3,
	"AGE_ADOLESCANT":    4,
	"AGE_TEENAGER":      5,
	"AGE_YOUNG_ADULT":   6,
	"AGE_ADULT":         7,
	"AGE_MIDDLE_AGE":    8,
	"AGE_OLD_AGE":       9,
	"AGE_CENTIGENARIAN": 10,
	"AGE_ANCIENT":       11,
	"AGE_TIMELESS":      12,
}

func (x AgeGroup) String() string {
	return proto.EnumName(AgeGroup_name, int32(x))
}
func (AgeGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{0}
}

type Gender int32

const (
	Gender_GEN_UNKNOWN     Gender = 0
	Gender_GEN_ADNROGYNOUS Gender = 1
	Gender_GEN_FEMALE      Gender = 2
	Gender_GEN_MALE        Gender = 3
	Gender_GEN_TRANSFEMALE Gender = 4
	Gender_GEN_TRANSMALE   Gender = 5
	Gender_GEN_UNGENDERED  Gender = 6
)

var Gender_name = map[int32]string{
	0: "GEN_UNKNOWN",
	1: "GEN_ADNROGYNOUS",
	2: "GEN_FEMALE",
	3: "GEN_MALE",
	4: "GEN_TRANSFEMALE",
	5: "GEN_TRANSMALE",
	6: "GEN_UNGENDERED",
}
var Gender_value = map[string]int32{
	"GEN_UNKNOWN":     0,
	"GEN_ADNROGYNOUS": 1,
	"GEN_FEMALE":      2,
	"GEN_MALE":        3,
	"GEN_TRANSFEMALE": 4,
	"GEN_TRANSMALE":   5,
	"GEN_UNGENDERED":  6,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{1}
}

type RealLanguage int32

const (
	RealLanguage_LANG_UNKNOWN RealLanguage = 0
	RealLanguage_LANG_AF      RealLanguage = 1
	RealLanguage_LANG_AR      RealLanguage = 2
	RealLanguage_LANG_CS      RealLanguage = 3
	RealLanguage_LANG_DE      RealLanguage = 4
	RealLanguage_LANG_EL      RealLanguage = 5
	RealLanguage_LANG_EN      RealLanguage = 6
	RealLanguage_LANG_ES      RealLanguage = 7
	RealLanguage_LANG_FI      RealLanguage = 8
	RealLanguage_LANG_FR      RealLanguage = 9
	RealLanguage_LANG_GA      RealLanguage = 10
	RealLanguage_LANG_HE      RealLanguage = 11
	RealLanguage_LANG_HI      RealLanguage = 12
	RealLanguage_LANG_IT      RealLanguage = 13
	RealLanguage_LANG_JA      RealLanguage = 14
	RealLanguage_LANG_KO      RealLanguage = 15
	RealLanguage_LANG_LA      RealLanguage = 16
	RealLanguage_LANG_PL      RealLanguage = 17
	RealLanguage_LANG_RU      RealLanguage = 18
	RealLanguage_LANG_SA      RealLanguage = 19
	RealLanguage_LANG_SV      RealLanguage = 20
	RealLanguage_LANG_VI      RealLanguage = 21
	RealLanguage_LANG_ZH      RealLanguage = 22
)

var RealLanguage_name = map[int32]string{
	0:  "LANG_UNKNOWN",
	1:  "LANG_AF",
	2:  "LANG_AR",
	3:  "LANG_CS",
	4:  "LANG_DE",
	5:  "LANG_EL",
	6:  "LANG_EN",
	7:  "LANG_ES",
	8:  "LANG_FI",
	9:  "LANG_FR",
	10: "LANG_GA",
	11: "LANG_HE",
	12: "LANG_HI",
	13: "LANG_IT",
	14: "LANG_JA",
	15: "LANG_KO",
	16: "LANG_LA",
	17: "LANG_PL",
	18: "LANG_RU",
	19: "LANG_SA",
	20: "LANG_SV",
	21: "LANG_VI",
	22: "LANG_ZH",
}
var RealLanguage_value = map[string]int32{
	"LANG_UNKNOWN": 0,
	"LANG_AF":      1,
	"LANG_AR":      2,
	"LANG_CS":      3,
	"LANG_DE":      4,
	"LANG_EL":      5,
	"LANG_EN":      6,
	"LANG_ES":      7,
	"LANG_FI":      8,
	"LANG_FR":      9,
	"LANG_GA":      10,
	"LANG_HE":      11,
	"LANG_HI":      12,
	"LANG_IT":      13,
	"LANG_JA":      14,
	"LANG_KO":      15,
	"LANG_LA":      16,
	"LANG_PL":      17,
	"LANG_RU":      18,
	"LANG_SA":      19,
	"LANG_SV":      20,
	"LANG_VI":      21,
	"LANG_ZH":      22,
}

func (x RealLanguage) String() string {
	return proto.EnumName(RealLanguage_name, int32(x))
}
func (RealLanguage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{2}
}

type RaceName int32

const (
	RaceName_RACE_UNKNOWN           RaceName = 0
	RaceName_RACE_DWARF_HILL        RaceName = 1
	RaceName_RACE_DWARF_MOUNTAIN    RaceName = 2
	RaceName_RACE_ELF_HIGH          RaceName = 3
	RaceName_RACE_ELF_WOOD          RaceName = 4
	RaceName_RACE_ELF_DROW          RaceName = 5
	RaceName_RACE_HALFING_LIGHTFOOT RaceName = 6
	RaceName_RACE_HALFLING_STOUT    RaceName = 7
	RaceName_RACE_HUMAN             RaceName = 8
	RaceName_RACE_DRAGONBORN        RaceName = 9
	RaceName_RACE_GNOME_FOREST      RaceName = 10
	RaceName_RACE_GNOME_ROCK        RaceName = 11
	RaceName_RACE_HALF_ELF          RaceName = 12
	RaceName_RACE_HALF_ORC          RaceName = 13
	RaceName_RACE_TIEFLING          RaceName = 14
)

var RaceName_name = map[int32]string{
	0:  "RACE_UNKNOWN",
	1:  "RACE_DWARF_HILL",
	2:  "RACE_DWARF_MOUNTAIN",
	3:  "RACE_ELF_HIGH",
	4:  "RACE_ELF_WOOD",
	5:  "RACE_ELF_DROW",
	6:  "RACE_HALFING_LIGHTFOOT",
	7:  "RACE_HALFLING_STOUT",
	8:  "RACE_HUMAN",
	9:  "RACE_DRAGONBORN",
	10: "RACE_GNOME_FOREST",
	11: "RACE_GNOME_ROCK",
	12: "RACE_HALF_ELF",
	13: "RACE_HALF_ORC",
	14: "RACE_TIEFLING",
}
var RaceName_value = map[string]int32{
	"RACE_UNKNOWN":           0,
	"RACE_DWARF_HILL":        1,
	"RACE_DWARF_MOUNTAIN":    2,
	"RACE_ELF_HIGH":          3,
	"RACE_ELF_WOOD":          4,
	"RACE_ELF_DROW":          5,
	"RACE_HALFING_LIGHTFOOT": 6,
	"RACE_HALFLING_STOUT":    7,
	"RACE_HUMAN":             8,
	"RACE_DRAGONBORN":        9,
	"RACE_GNOME_FOREST":      10,
	"RACE_GNOME_ROCK":        11,
	"RACE_HALF_ELF":          12,
	"RACE_HALF_ORC":          13,
	"RACE_TIEFLING":          14,
}

func (x RaceName) String() string {
	return proto.EnumName(RaceName_name, int32(x))
}
func (RaceName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{3}
}

type Alignment int32

const (
	Alignment_ALIGN_UNKNOWN Alignment = 0
	Alignment_ALIGN_LG      Alignment = 1
	Alignment_ALIGN_LN      Alignment = 2
	Alignment_ALIGN_LE      Alignment = 3
	Alignment_ALIGN_NG      Alignment = 4
	Alignment_ALIGN_NN      Alignment = 5
	Alignment_ALIGN_NE      Alignment = 6
	Alignment_ALIGN_CG      Alignment = 7
	Alignment_ALIGN_CN      Alignment = 8
	Alignment_ALIGN_CE      Alignment = 9
)

var Alignment_name = map[int32]string{
	0: "ALIGN_UNKNOWN",
	1: "ALIGN_LG",
	2: "ALIGN_LN",
	3: "ALIGN_LE",
	4: "ALIGN_NG",
	5: "ALIGN_NN",
	6: "ALIGN_NE",
	7: "ALIGN_CG",
	8: "ALIGN_CN",
	9: "ALIGN_CE",
}
var Alignment_value = map[string]int32{
	"ALIGN_UNKNOWN": 0,
	"ALIGN_LG":      1,
	"ALIGN_LN":      2,
	"ALIGN_LE":      3,
	"ALIGN_NG":      4,
	"ALIGN_NN":      5,
	"ALIGN_NE":      6,
	"ALIGN_CG":      7,
	"ALIGN_CN":      8,
	"ALIGN_CE":      9,
}

func (x Alignment) String() string {
	return proto.EnumName(Alignment_name, int32(x))
}
func (Alignment) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{4}
}

type Language int32

const (
	Language_LANG_CHOOSE_AGAIN Language = 0
	Language_LANG_COMMON       Language = 1
	Language_LANG_DWARVISH     Language = 2
	Language_LANG_ELVISH       Language = 3
	Language_LANG_GIANT        Language = 4
	Language_LANG_GNOMISH      Language = 5
	Language_LANG_GOBLIN       Language = 6
	Language_LANG_HALFLING     Language = 7
	Language_LANG_ORCISH       Language = 8
	Language_LANG_ABYSSAL      Language = 9
	Language_LANG_CELESTIAL    Language = 10
	Language_LANG_DRACONIC     Language = 11
	Language_LANG_DEEP         Language = 12
	Language_LANG_INFERNAL     Language = 13
	Language_LANG_PRIMORDIAL   Language = 14
	Language_LANG_SYLVAN       Language = 15
	Language_LANG_UNDERCOMMON  Language = 16
)

var Language_name = map[int32]string{
	0:  "LANG_CHOOSE_AGAIN",
	1:  "LANG_COMMON",
	2:  "LANG_DWARVISH",
	3:  "LANG_ELVISH",
	4:  "LANG_GIANT",
	5:  "LANG_GNOMISH",
	6:  "LANG_GOBLIN",
	7:  "LANG_HALFLING",
	8:  "LANG_ORCISH",
	9:  "LANG_ABYSSAL",
	10: "LANG_CELESTIAL",
	11: "LANG_DRACONIC",
	12: "LANG_DEEP",
	13: "LANG_INFERNAL",
	14: "LANG_PRIMORDIAL",
	15: "LANG_SYLVAN",
	16: "LANG_UNDERCOMMON",
}
var Language_value = map[string]int32{
	"LANG_CHOOSE_AGAIN": 0,
	"LANG_COMMON":       1,
	"LANG_DWARVISH":     2,
	"LANG_ELVISH":       3,
	"LANG_GIANT":        4,
	"LANG_GNOMISH":      5,
	"LANG_GOBLIN":       6,
	"LANG_HALFLING":     7,
	"LANG_ORCISH":       8,
	"LANG_ABYSSAL":      9,
	"LANG_CELESTIAL":    10,
	"LANG_DRACONIC":     11,
	"LANG_DEEP":         12,
	"LANG_INFERNAL":     13,
	"LANG_PRIMORDIAL":   14,
	"LANG_SYLVAN":       15,
	"LANG_UNDERCOMMON":  16,
}

func (x Language) String() string {
	return proto.EnumName(Language_name, int32(x))
}
func (Language) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{5}
}

type ClassName int32

const (
	ClassName_CLASSNAME_UNKNOWN   ClassName = 0
	ClassName_CLASSNAME_COMMONER  ClassName = 1
	ClassName_CLASSNAME_BARBARIAN ClassName = 2
	ClassName_CLASSNAME_BARD      ClassName = 3
	ClassName_CLASSNAME_CLERIC    ClassName = 4
	ClassName_CLASSNAME_DRUID     ClassName = 5
	ClassName_CLASSNAME_FIGHTER   ClassName = 6
	ClassName_CLASSNAME_MONK      ClassName = 7
	ClassName_CLASSNAME_PALADIN   ClassName = 8
	ClassName_CLASSNAME_RANGER    ClassName = 9
	ClassName_CLASSNAME_SORCEROR  ClassName = 10
	ClassName_CLASSNAME_WARLOCK   ClassName = 11
	ClassName_CLASSNAME_WARRIOR   ClassName = 12
	ClassName_CLASSNAME_WIZARD    ClassName = 13
)

var ClassName_name = map[int32]string{
	0:  "CLASSNAME_UNKNOWN",
	1:  "CLASSNAME_COMMONER",
	2:  "CLASSNAME_BARBARIAN",
	3:  "CLASSNAME_BARD",
	4:  "CLASSNAME_CLERIC",
	5:  "CLASSNAME_DRUID",
	6:  "CLASSNAME_FIGHTER",
	7:  "CLASSNAME_MONK",
	8:  "CLASSNAME_PALADIN",
	9:  "CLASSNAME_RANGER",
	10: "CLASSNAME_SORCEROR",
	11: "CLASSNAME_WARLOCK",
	12: "CLASSNAME_WARRIOR",
	13: "CLASSNAME_WIZARD",
}
var ClassName_value = map[string]int32{
	"CLASSNAME_UNKNOWN":   0,
	"CLASSNAME_COMMONER":  1,
	"CLASSNAME_BARBARIAN": 2,
	"CLASSNAME_BARD":      3,
	"CLASSNAME_CLERIC":    4,
	"CLASSNAME_DRUID":     5,
	"CLASSNAME_FIGHTER":   6,
	"CLASSNAME_MONK":      7,
	"CLASSNAME_PALADIN":   8,
	"CLASSNAME_RANGER":    9,
	"CLASSNAME_SORCEROR":  10,
	"CLASSNAME_WARLOCK":   11,
	"CLASSNAME_WARRIOR":   12,
	"CLASSNAME_WIZARD":    13,
}

func (x ClassName) String() string {
	return proto.EnumName(ClassName_name, int32(x))
}
func (ClassName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{6}
}

type Level int32

const (
	Level_LEVEL_UNKNOWN   Level = 0
	Level_LEVEL_ONE       Level = 1
	Level_LEVEL_TWO       Level = 2
	Level_LEVEL_THREE     Level = 3
	Level_LEVEL_FOUR      Level = 4
	Level_LEVEL_FIVE      Level = 5
	Level_LEVEL_SIX       Level = 6
	Level_LEVEL_SEVEN     Level = 7
	Level_LEVEL_EIGHT     Level = 8
	Level_LEVEL_NINE      Level = 9
	Level_LEVEL_TEN       Level = 10
	Level_LEVEL_ELEVEN    Level = 11
	Level_LEVEL_TWELVE    Level = 12
	Level_LEVEL_THIRTEEN  Level = 13
	Level_LEVEL_FOURTEEN  Level = 14
	Level_LEVEL_FIFTEEN   Level = 15
	Level_LEVEL_SIXTEEN   Level = 16
	Level_LEVEL_SEVENTEEN Level = 17
	Level_LEVEL_EIGHTEEN  Level = 18
	Level_LEVEL_NINETEEN  Level = 19
	Level_LEVEL_TWENTY    Level = 20
)

var Level_name = map[int32]string{
	0:  "LEVEL_UNKNOWN",
	1:  "LEVEL_ONE",
	2:  "LEVEL_TWO",
	3:  "LEVEL_THREE",
	4:  "LEVEL_FOUR",
	5:  "LEVEL_FIVE",
	6:  "LEVEL_SIX",
	7:  "LEVEL_SEVEN",
	8:  "LEVEL_EIGHT",
	9:  "LEVEL_NINE",
	10: "LEVEL_TEN",
	11: "LEVEL_ELEVEN",
	12: "LEVEL_TWELVE",
	13: "LEVEL_THIRTEEN",
	14: "LEVEL_FOURTEEN",
	15: "LEVEL_FIFTEEN",
	16: "LEVEL_SIXTEEN",
	17: "LEVEL_SEVENTEEN",
	18: "LEVEL_EIGHTEEN",
	19: "LEVEL_NINETEEN",
	20: "LEVEL_TWENTY",
}
var Level_value = map[string]int32{
	"LEVEL_UNKNOWN":   0,
	"LEVEL_ONE":       1,
	"LEVEL_TWO":       2,
	"LEVEL_THREE":     3,
	"LEVEL_FOUR":      4,
	"LEVEL_FIVE":      5,
	"LEVEL_SIX":       6,
	"LEVEL_SEVEN":     7,
	"LEVEL_EIGHT":     8,
	"LEVEL_NINE":      9,
	"LEVEL_TEN":       10,
	"LEVEL_ELEVEN":    11,
	"LEVEL_TWELVE":    12,
	"LEVEL_THIRTEEN":  13,
	"LEVEL_FOURTEEN":  14,
	"LEVEL_FIFTEEN":   15,
	"LEVEL_SIXTEEN":   16,
	"LEVEL_SEVENTEEN": 17,
	"LEVEL_EIGHTEEN":  18,
	"LEVEL_NINETEEN":  19,
	"LEVEL_TWENTY":    20,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}
func (Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{7}
}

type Skill_SkillName int32

const (
	Skill_SKILL_ATHLETICS       Skill_SkillName = 0
	Skill_SKILL_ACROBATICS      Skill_SkillName = 1
	Skill_SKILL_SLEIGHT         Skill_SkillName = 2
	Skill_SKILL_STEALTH         Skill_SkillName = 3
	Skill_SKILL_ARCANA          Skill_SkillName = 4
	Skill_SKILL_HISTORY         Skill_SkillName = 5
	Skill_SKILL_INVESTIGATION   Skill_SkillName = 6
	Skill_SKILL_NATURE          Skill_SkillName = 7
	Skill_SKILL_RELIGION        Skill_SkillName = 8
	Skill_SKILL_ANIMAL_HANDLING Skill_SkillName = 9
	Skill_SKILL_INSIGHT         Skill_SkillName = 10
	Skill_SKILL_MEDICINE        Skill_SkillName = 11
	Skill_SKILL_PERCEPTION      Skill_SkillName = 12
	Skill_SKILL_SURVIVAL        Skill_SkillName = 13
	Skill_SKILL_DECEPTION       Skill_SkillName = 14
	Skill_SKILL_INTIMIDATION    Skill_SkillName = 15
	Skill_SKILL_PERFORMANCE     Skill_SkillName = 16
	Skill_SKILL_PERSUASION      Skill_SkillName = 17
)

var Skill_SkillName_name = map[int32]string{
	0:  "SKILL_ATHLETICS",
	1:  "SKILL_ACROBATICS",
	2:  "SKILL_SLEIGHT",
	3:  "SKILL_STEALTH",
	4:  "SKILL_ARCANA",
	5:  "SKILL_HISTORY",
	6:  "SKILL_INVESTIGATION",
	7:  "SKILL_NATURE",
	8:  "SKILL_RELIGION",
	9:  "SKILL_ANIMAL_HANDLING",
	10: "SKILL_INSIGHT",
	11: "SKILL_MEDICINE",
	12: "SKILL_PERCEPTION",
	13: "SKILL_SURVIVAL",
	14: "SKILL_DECEPTION",
	15: "SKILL_INTIMIDATION",
	16: "SKILL_PERFORMANCE",
	17: "SKILL_PERSUASION",
}
var Skill_SkillName_value = map[string]int32{
	"SKILL_ATHLETICS":       0,
	"SKILL_ACROBATICS":      1,
	"SKILL_SLEIGHT":         2,
	"SKILL_STEALTH":         3,
	"SKILL_ARCANA":          4,
	"SKILL_HISTORY":         5,
	"SKILL_INVESTIGATION":   6,
	"SKILL_NATURE":          7,
	"SKILL_RELIGION":        8,
	"SKILL_ANIMAL_HANDLING": 9,
	"SKILL_INSIGHT":         10,
	"SKILL_MEDICINE":        11,
	"SKILL_PERCEPTION":      12,
	"SKILL_SURVIVAL":        13,
	"SKILL_DECEPTION":       14,
	"SKILL_INTIMIDATION":    15,
	"SKILL_PERFORMANCE":     16,
	"SKILL_PERSUASION":      17,
}

func (x Skill_SkillName) String() string {
	return proto.EnumName(Skill_SkillName_name, int32(x))
}
func (Skill_SkillName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{4, 0}
}

type DragonbornTraits_DraconicAncestry int32

const (
	DragonbornTraits_DRAC_ANCS_BLACK  DragonbornTraits_DraconicAncestry = 0
	DragonbornTraits_DRAC_ANCS_BLUE   DragonbornTraits_DraconicAncestry = 1
	DragonbornTraits_DRAC_ANCS_BRASS  DragonbornTraits_DraconicAncestry = 2
	DragonbornTraits_DRAC_ANCS_BRONZE DragonbornTraits_DraconicAncestry = 3
	DragonbornTraits_DRAC_ANCS_COPPER DragonbornTraits_DraconicAncestry = 4
	DragonbornTraits_DRAC_ANCS_GOLD   DragonbornTraits_DraconicAncestry = 5
	DragonbornTraits_DRAC_ANCS_GREEN  DragonbornTraits_DraconicAncestry = 6
	DragonbornTraits_DRAC_ANCS_RED    DragonbornTraits_DraconicAncestry = 7
	DragonbornTraits_DRAC_ANCS_SILVER DragonbornTraits_DraconicAncestry = 8
	DragonbornTraits_DRAC_ANCS_WHITE  DragonbornTraits_DraconicAncestry = 9
)

var DragonbornTraits_DraconicAncestry_name = map[int32]string{
	0: "DRAC_ANCS_BLACK",
	1: "DRAC_ANCS_BLUE",
	2: "DRAC_ANCS_BRASS",
	3: "DRAC_ANCS_BRONZE",
	4: "DRAC_ANCS_COPPER",
	5: "DRAC_ANCS_GOLD",
	6: "DRAC_ANCS_GREEN",
	7: "DRAC_ANCS_RED",
	8: "DRAC_ANCS_SILVER",
	9: "DRAC_ANCS_WHITE",
}
var DragonbornTraits_DraconicAncestry_value = map[string]int32{
	"DRAC_ANCS_BLACK":  0,
	"DRAC_ANCS_BLUE":   1,
	"DRAC_ANCS_BRASS":  2,
	"DRAC_ANCS_BRONZE": 3,
	"DRAC_ANCS_COPPER": 4,
	"DRAC_ANCS_GOLD":   5,
	"DRAC_ANCS_GREEN":  6,
	"DRAC_ANCS_RED":    7,
	"DRAC_ANCS_SILVER": 8,
	"DRAC_ANCS_WHITE":  9,
}

func (x DragonbornTraits_DraconicAncestry) String() string {
	return proto.EnumName(DragonbornTraits_DraconicAncestry_name, int32(x))
}
func (DragonbornTraits_DraconicAncestry) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{15, 0}
}

type PhysicalTraits_SkinTone int32

const (
	PhysicalTraits_SKIN_PALE         PhysicalTraits_SkinTone = 0
	PhysicalTraits_SKIN_OLIVE        PhysicalTraits_SkinTone = 1
	PhysicalTraits_SKIN_TAN          PhysicalTraits_SkinTone = 2
	PhysicalTraits_SKIN_DUSKY        PhysicalTraits_SkinTone = 3
	PhysicalTraits_SKIN_DARK         PhysicalTraits_SkinTone = 4
	PhysicalTraits_SKIN_UMBER        PhysicalTraits_SkinTone = 5
	PhysicalTraits_SKIN_GREEN        PhysicalTraits_SkinTone = 6
	PhysicalTraits_SKIN_GREY         PhysicalTraits_SkinTone = 7
	PhysicalTraits_SKIN_BLACK_SCALE  PhysicalTraits_SkinTone = 8
	PhysicalTraits_SKIN_BLUE_SCALE   PhysicalTraits_SkinTone = 9
	PhysicalTraits_SKIN_BRASS_SCALE  PhysicalTraits_SkinTone = 10
	PhysicalTraits_SKIN_BRONZE_SCALE PhysicalTraits_SkinTone = 11
	PhysicalTraits_SKIN_COPPER_SCALE PhysicalTraits_SkinTone = 12
	PhysicalTraits_SKIN_GOLD_SCALE   PhysicalTraits_SkinTone = 13
	PhysicalTraits_SKIN_GREEN_SCALE  PhysicalTraits_SkinTone = 14
	PhysicalTraits_SKIN_RED_SCALE    PhysicalTraits_SkinTone = 15
	PhysicalTraits_SKIN_SILVER_SCALE PhysicalTraits_SkinTone = 16
	PhysicalTraits_SKIN_WHITE_SCALE  PhysicalTraits_SkinTone = 17
)

var PhysicalTraits_SkinTone_name = map[int32]string{
	0:  "SKIN_PALE",
	1:  "SKIN_OLIVE",
	2:  "SKIN_TAN",
	3:  "SKIN_DUSKY",
	4:  "SKIN_DARK",
	5:  "SKIN_UMBER",
	6:  "SKIN_GREEN",
	7:  "SKIN_GREY",
	8:  "SKIN_BLACK_SCALE",
	9:  "SKIN_BLUE_SCALE",
	10: "SKIN_BRASS_SCALE",
	11: "SKIN_BRONZE_SCALE",
	12: "SKIN_COPPER_SCALE",
	13: "SKIN_GOLD_SCALE",
	14: "SKIN_GREEN_SCALE",
	15: "SKIN_RED_SCALE",
	16: "SKIN_SILVER_SCALE",
	17: "SKIN_WHITE_SCALE",
}
var PhysicalTraits_SkinTone_value = map[string]int32{
	"SKIN_PALE":         0,
	"SKIN_OLIVE":        1,
	"SKIN_TAN":          2,
	"SKIN_DUSKY":        3,
	"SKIN_DARK":         4,
	"SKIN_UMBER":        5,
	"SKIN_GREEN":        6,
	"SKIN_GREY":         7,
	"SKIN_BLACK_SCALE":  8,
	"SKIN_BLUE_SCALE":   9,
	"SKIN_BRASS_SCALE":  10,
	"SKIN_BRONZE_SCALE": 11,
	"SKIN_COPPER_SCALE": 12,
	"SKIN_GOLD_SCALE":   13,
	"SKIN_GREEN_SCALE":  14,
	"SKIN_RED_SCALE":    15,
	"SKIN_SILVER_SCALE": 16,
	"SKIN_WHITE_SCALE":  17,
}

func (x PhysicalTraits_SkinTone) String() string {
	return proto.EnumName(PhysicalTraits_SkinTone_name, int32(x))
}
func (PhysicalTraits_SkinTone) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{21, 0}
}

type GetNPCRequest struct {
	Gender               Gender       `protobuf:"varint,1,opt,name=gender,enum=facetome.Gender" json:"gender,omitempty"`
	Language             RealLanguage `protobuf:"varint,2,opt,name=language,enum=facetome.RealLanguage" json:"language,omitempty"`
	RelativeAge          AgeGroup     `protobuf:"varint,3,opt,name=relative_age,json=relativeAge,enum=facetome.AgeGroup" json:"relative_age,omitempty"`
	Race                 RaceName     `protobuf:"varint,4,opt,name=race,enum=facetome.RaceName" json:"race,omitempty"`
	Alignment            Alignment    `protobuf:"varint,5,opt,name=alignment,enum=facetome.Alignment" json:"alignment,omitempty"`
	Class                ClassName    `protobuf:"varint,6,opt,name=class,enum=facetome.ClassName" json:"class,omitempty"`
	Level                Level        `protobuf:"varint,7,opt,name=level,enum=facetome.Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetNPCRequest) Reset()         { *m = GetNPCRequest{} }
func (m *GetNPCRequest) String() string { return proto.CompactTextString(m) }
func (*GetNPCRequest) ProtoMessage()    {}
func (*GetNPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{0}
}
func (m *GetNPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNPCRequest.Unmarshal(m, b)
}
func (m *GetNPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNPCRequest.Marshal(b, m, deterministic)
}
func (dst *GetNPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNPCRequest.Merge(dst, src)
}
func (m *GetNPCRequest) XXX_Size() int {
	return xxx_messageInfo_GetNPCRequest.Size(m)
}
func (m *GetNPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNPCRequest proto.InternalMessageInfo

func (m *GetNPCRequest) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_GEN_UNKNOWN
}

func (m *GetNPCRequest) GetLanguage() RealLanguage {
	if m != nil {
		return m.Language
	}
	return RealLanguage_LANG_UNKNOWN
}

func (m *GetNPCRequest) GetRelativeAge() AgeGroup {
	if m != nil {
		return m.RelativeAge
	}
	return AgeGroup_AGE_UNKNOWN
}

func (m *GetNPCRequest) GetRace() RaceName {
	if m != nil {
		return m.Race
	}
	return RaceName_RACE_UNKNOWN
}

func (m *GetNPCRequest) GetAlignment() Alignment {
	if m != nil {
		return m.Alignment
	}
	return Alignment_ALIGN_UNKNOWN
}

func (m *GetNPCRequest) GetClass() ClassName {
	if m != nil {
		return m.Class
	}
	return ClassName_CLASSNAME_UNKNOWN
}

func (m *GetNPCRequest) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_LEVEL_UNKNOWN
}

type GetNPCResponse struct {
	NpcData              *NPC     `protobuf:"bytes,1,opt,name=npc_data,json=npcData" json:"npc_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNPCResponse) Reset()         { *m = GetNPCResponse{} }
func (m *GetNPCResponse) String() string { return proto.CompactTextString(m) }
func (*GetNPCResponse) ProtoMessage()    {}
func (*GetNPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{1}
}
func (m *GetNPCResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNPCResponse.Unmarshal(m, b)
}
func (m *GetNPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNPCResponse.Marshal(b, m, deterministic)
}
func (dst *GetNPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNPCResponse.Merge(dst, src)
}
func (m *GetNPCResponse) XXX_Size() int {
	return xxx_messageInfo_GetNPCResponse.Size(m)
}
func (m *GetNPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNPCResponse proto.InternalMessageInfo

func (m *GetNPCResponse) GetNpcData() *NPC {
	if m != nil {
		return m.NpcData
	}
	return nil
}

type NPC struct {
	FirstName            string               `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName             string               `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Age                  int32                `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Alignment            Alignment            `protobuf:"varint,4,opt,name=alignment,enum=facetome.Alignment" json:"alignment,omitempty"`
	Speed                int32                `protobuf:"varint,5,opt,name=speed" json:"speed,omitempty"`
	Language             []Language           `protobuf:"varint,6,rep,packed,name=language,enum=facetome.Language" json:"language,omitempty"`
	Class                []*Class             `protobuf:"bytes,7,rep,name=class" json:"class,omitempty"`
	Race                 *Race                `protobuf:"bytes,8,opt,name=race" json:"race,omitempty"`
	Stats                *Stats               `protobuf:"bytes,9,opt,name=stats" json:"stats,omitempty"`
	Skill                []*Skill             `protobuf:"bytes,10,rep,name=skill" json:"skill,omitempty"`
	PhysicalTraits       *PhysicalTraits      `protobuf:"bytes,11,opt,name=physical_traits,json=physicalTraits" json:"physical_traits,omitempty"`
	PsychologicalTraits  *PsychologicalTraits `protobuf:"bytes,12,opt,name=psychological_traits,json=psychologicalTraits" json:"psychological_traits,omitempty"`
	Gender               Gender               `protobuf:"varint,13,opt,name=gender,enum=facetome.Gender" json:"gender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NPC) Reset()         { *m = NPC{} }
func (m *NPC) String() string { return proto.CompactTextString(m) }
func (*NPC) ProtoMessage()    {}
func (*NPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{2}
}
func (m *NPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NPC.Unmarshal(m, b)
}
func (m *NPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NPC.Marshal(b, m, deterministic)
}
func (dst *NPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NPC.Merge(dst, src)
}
func (m *NPC) XXX_Size() int {
	return xxx_messageInfo_NPC.Size(m)
}
func (m *NPC) XXX_DiscardUnknown() {
	xxx_messageInfo_NPC.DiscardUnknown(m)
}

var xxx_messageInfo_NPC proto.InternalMessageInfo

func (m *NPC) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *NPC) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *NPC) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *NPC) GetAlignment() Alignment {
	if m != nil {
		return m.Alignment
	}
	return Alignment_ALIGN_UNKNOWN
}

func (m *NPC) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *NPC) GetLanguage() []Language {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *NPC) GetClass() []*Class {
	if m != nil {
		return m.Class
	}
	return nil
}

func (m *NPC) GetRace() *Race {
	if m != nil {
		return m.Race
	}
	return nil
}

func (m *NPC) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *NPC) GetSkill() []*Skill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *NPC) GetPhysicalTraits() *PhysicalTraits {
	if m != nil {
		return m.PhysicalTraits
	}
	return nil
}

func (m *NPC) GetPsychologicalTraits() *PsychologicalTraits {
	if m != nil {
		return m.PsychologicalTraits
	}
	return nil
}

func (m *NPC) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_GEN_UNKNOWN
}

type Stats struct {
	Str                  int32    `protobuf:"varint,1,opt,name=str" json:"str,omitempty"`
	Con                  int32    `protobuf:"varint,2,opt,name=con" json:"con,omitempty"`
	Dex                  int32    `protobuf:"varint,3,opt,name=dex" json:"dex,omitempty"`
	Int                  int32    `protobuf:"varint,4,opt,name=int" json:"int,omitempty"`
	Wis                  int32    `protobuf:"varint,5,opt,name=wis" json:"wis,omitempty"`
	Cha                  int32    `protobuf:"varint,6,opt,name=cha" json:"cha,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{3}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stats.Unmarshal(m, b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
}
func (dst *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(dst, src)
}
func (m *Stats) XXX_Size() int {
	return xxx_messageInfo_Stats.Size(m)
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetStr() int32 {
	if m != nil {
		return m.Str
	}
	return 0
}

func (m *Stats) GetCon() int32 {
	if m != nil {
		return m.Con
	}
	return 0
}

func (m *Stats) GetDex() int32 {
	if m != nil {
		return m.Dex
	}
	return 0
}

func (m *Stats) GetInt() int32 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *Stats) GetWis() int32 {
	if m != nil {
		return m.Wis
	}
	return 0
}

func (m *Stats) GetCha() int32 {
	if m != nil {
		return m.Cha
	}
	return 0
}

type Skill struct {
	SkillName            Skill_SkillName `protobuf:"varint,1,opt,name=skill_name,json=skillName,enum=facetome.Skill_SkillName" json:"skill_name,omitempty"`
	Proficiency          bool            `protobuf:"varint,2,opt,name=proficiency" json:"proficiency,omitempty"`
	StatMod              string          `protobuf:"bytes,3,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Skill) Reset()         { *m = Skill{} }
func (m *Skill) String() string { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()    {}
func (*Skill) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{4}
}
func (m *Skill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Skill.Unmarshal(m, b)
}
func (m *Skill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Skill.Marshal(b, m, deterministic)
}
func (dst *Skill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Skill.Merge(dst, src)
}
func (m *Skill) XXX_Size() int {
	return xxx_messageInfo_Skill.Size(m)
}
func (m *Skill) XXX_DiscardUnknown() {
	xxx_messageInfo_Skill.DiscardUnknown(m)
}

var xxx_messageInfo_Skill proto.InternalMessageInfo

func (m *Skill) GetSkillName() Skill_SkillName {
	if m != nil {
		return m.SkillName
	}
	return Skill_SKILL_ATHLETICS
}

func (m *Skill) GetProficiency() bool {
	if m != nil {
		return m.Proficiency
	}
	return false
}

func (m *Skill) GetStatMod() string {
	if m != nil {
		return m.StatMod
	}
	return ""
}

type Class struct {
	Name                 ClassName `protobuf:"varint,1,opt,name=name,enum=facetome.ClassName" json:"name,omitempty"`
	Level                Level     `protobuf:"varint,2,opt,name=level,enum=facetome.Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Class) Reset()         { *m = Class{} }
func (m *Class) String() string { return proto.CompactTextString(m) }
func (*Class) ProtoMessage()    {}
func (*Class) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{5}
}
func (m *Class) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Class.Unmarshal(m, b)
}
func (m *Class) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Class.Marshal(b, m, deterministic)
}
func (dst *Class) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Class.Merge(dst, src)
}
func (m *Class) XXX_Size() int {
	return xxx_messageInfo_Class.Size(m)
}
func (m *Class) XXX_DiscardUnknown() {
	xxx_messageInfo_Class.DiscardUnknown(m)
}

var xxx_messageInfo_Class proto.InternalMessageInfo

func (m *Class) GetName() ClassName {
	if m != nil {
		return m.Name
	}
	return ClassName_CLASSNAME_UNKNOWN
}

func (m *Class) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_LEVEL_UNKNOWN
}

type Race struct {
	Race RaceName `protobuf:"varint,1,opt,name=race,enum=facetome.RaceName" json:"race,omitempty"`
	// Types that are valid to be assigned to RacialTraits:
	//	*Race_HillDwarfTraits
	//	*Race_MountainDwarfTraits
	//	*Race_HighElfTraits
	//	*Race_WoodElfTraits
	//	*Race_DrowElfTraits
	//	*Race_LightFootHalflingTraits
	//	*Race_StoutHalflingTraits
	//	*Race_HumanTraits
	//	*Race_DragonbornTraits
	//	*Race_ForestGnomeTraits
	//	*Race_RockGnomeTraits
	//	*Race_HalfElfTraits
	//	*Race_HalfOrcTraits
	//	*Race_TieflingTraits
	RacialTraits         isRace_RacialTraits `protobuf_oneof:"racial_traits"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Race) Reset()         { *m = Race{} }
func (m *Race) String() string { return proto.CompactTextString(m) }
func (*Race) ProtoMessage()    {}
func (*Race) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{6}
}
func (m *Race) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Race.Unmarshal(m, b)
}
func (m *Race) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Race.Marshal(b, m, deterministic)
}
func (dst *Race) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Race.Merge(dst, src)
}
func (m *Race) XXX_Size() int {
	return xxx_messageInfo_Race.Size(m)
}
func (m *Race) XXX_DiscardUnknown() {
	xxx_messageInfo_Race.DiscardUnknown(m)
}

var xxx_messageInfo_Race proto.InternalMessageInfo

type isRace_RacialTraits interface {
	isRace_RacialTraits()
}

type Race_HillDwarfTraits struct {
	HillDwarfTraits *HillDwarfTraits `protobuf:"bytes,2,opt,name=hill_dwarf_traits,json=hillDwarfTraits,oneof"`
}
type Race_MountainDwarfTraits struct {
	MountainDwarfTraits *MountainDwarfTraits `protobuf:"bytes,3,opt,name=mountain_dwarf_traits,json=mountainDwarfTraits,oneof"`
}
type Race_HighElfTraits struct {
	HighElfTraits *HighElfTraits `protobuf:"bytes,4,opt,name=high_elf_traits,json=highElfTraits,oneof"`
}
type Race_WoodElfTraits struct {
	WoodElfTraits *WoodElfTraits `protobuf:"bytes,5,opt,name=wood_elf_traits,json=woodElfTraits,oneof"`
}
type Race_DrowElfTraits struct {
	DrowElfTraits *DrowElfTraits `protobuf:"bytes,6,opt,name=drow_elf_traits,json=drowElfTraits,oneof"`
}
type Race_LightFootHalflingTraits struct {
	LightFootHalflingTraits *LightFootHalflingTraits `protobuf:"bytes,7,opt,name=light_foot_halfling_traits,json=lightFootHalflingTraits,oneof"`
}
type Race_StoutHalflingTraits struct {
	StoutHalflingTraits *StoutHalflingTraits `protobuf:"bytes,8,opt,name=stout_halfling_traits,json=stoutHalflingTraits,oneof"`
}
type Race_HumanTraits struct {
	HumanTraits *HumanTraits `protobuf:"bytes,9,opt,name=human_traits,json=humanTraits,oneof"`
}
type Race_DragonbornTraits struct {
	DragonbornTraits *DragonbornTraits `protobuf:"bytes,10,opt,name=dragonborn_traits,json=dragonbornTraits,oneof"`
}
type Race_ForestGnomeTraits struct {
	ForestGnomeTraits *ForestGnomeTraits `protobuf:"bytes,11,opt,name=forest_gnome_traits,json=forestGnomeTraits,oneof"`
}
type Race_RockGnomeTraits struct {
	RockGnomeTraits *RockGnomeTraits `protobuf:"bytes,12,opt,name=rock_gnome_traits,json=rockGnomeTraits,oneof"`
}
type Race_HalfElfTraits struct {
	HalfElfTraits *HalfElfTraits `protobuf:"bytes,13,opt,name=half_elf_traits,json=halfElfTraits,oneof"`
}
type Race_HalfOrcTraits struct {
	HalfOrcTraits *HalfOrcTraits `protobuf:"bytes,14,opt,name=half_orc_traits,json=halfOrcTraits,oneof"`
}
type Race_TieflingTraits struct {
	TieflingTraits *TieflingTraits `protobuf:"bytes,15,opt,name=tiefling_traits,json=tieflingTraits,oneof"`
}

func (*Race_HillDwarfTraits) isRace_RacialTraits()         {}
func (*Race_MountainDwarfTraits) isRace_RacialTraits()     {}
func (*Race_HighElfTraits) isRace_RacialTraits()           {}
func (*Race_WoodElfTraits) isRace_RacialTraits()           {}
func (*Race_DrowElfTraits) isRace_RacialTraits()           {}
func (*Race_LightFootHalflingTraits) isRace_RacialTraits() {}
func (*Race_StoutHalflingTraits) isRace_RacialTraits()     {}
func (*Race_HumanTraits) isRace_RacialTraits()             {}
func (*Race_DragonbornTraits) isRace_RacialTraits()        {}
func (*Race_ForestGnomeTraits) isRace_RacialTraits()       {}
func (*Race_RockGnomeTraits) isRace_RacialTraits()         {}
func (*Race_HalfElfTraits) isRace_RacialTraits()           {}
func (*Race_HalfOrcTraits) isRace_RacialTraits()           {}
func (*Race_TieflingTraits) isRace_RacialTraits()          {}

func (m *Race) GetRacialTraits() isRace_RacialTraits {
	if m != nil {
		return m.RacialTraits
	}
	return nil
}

func (m *Race) GetRace() RaceName {
	if m != nil {
		return m.Race
	}
	return RaceName_RACE_UNKNOWN
}

func (m *Race) GetHillDwarfTraits() *HillDwarfTraits {
	if x, ok := m.GetRacialTraits().(*Race_HillDwarfTraits); ok {
		return x.HillDwarfTraits
	}
	return nil
}

func (m *Race) GetMountainDwarfTraits() *MountainDwarfTraits {
	if x, ok := m.GetRacialTraits().(*Race_MountainDwarfTraits); ok {
		return x.MountainDwarfTraits
	}
	return nil
}

func (m *Race) GetHighElfTraits() *HighElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_HighElfTraits); ok {
		return x.HighElfTraits
	}
	return nil
}

func (m *Race) GetWoodElfTraits() *WoodElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_WoodElfTraits); ok {
		return x.WoodElfTraits
	}
	return nil
}

func (m *Race) GetDrowElfTraits() *DrowElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_DrowElfTraits); ok {
		return x.DrowElfTraits
	}
	return nil
}

func (m *Race) GetLightFootHalflingTraits() *LightFootHalflingTraits {
	if x, ok := m.GetRacialTraits().(*Race_LightFootHalflingTraits); ok {
		return x.LightFootHalflingTraits
	}
	return nil
}

func (m *Race) GetStoutHalflingTraits() *StoutHalflingTraits {
	if x, ok := m.GetRacialTraits().(*Race_StoutHalflingTraits); ok {
		return x.StoutHalflingTraits
	}
	return nil
}

func (m *Race) GetHumanTraits() *HumanTraits {
	if x, ok := m.GetRacialTraits().(*Race_HumanTraits); ok {
		return x.HumanTraits
	}
	return nil
}

func (m *Race) GetDragonbornTraits() *DragonbornTraits {
	if x, ok := m.GetRacialTraits().(*Race_DragonbornTraits); ok {
		return x.DragonbornTraits
	}
	return nil
}

func (m *Race) GetForestGnomeTraits() *ForestGnomeTraits {
	if x, ok := m.GetRacialTraits().(*Race_ForestGnomeTraits); ok {
		return x.ForestGnomeTraits
	}
	return nil
}

func (m *Race) GetRockGnomeTraits() *RockGnomeTraits {
	if x, ok := m.GetRacialTraits().(*Race_RockGnomeTraits); ok {
		return x.RockGnomeTraits
	}
	return nil
}

func (m *Race) GetHalfElfTraits() *HalfElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_HalfElfTraits); ok {
		return x.HalfElfTraits
	}
	return nil
}

func (m *Race) GetHalfOrcTraits() *HalfOrcTraits {
	if x, ok := m.GetRacialTraits().(*Race_HalfOrcTraits); ok {
		return x.HalfOrcTraits
	}
	return nil
}

func (m *Race) GetTieflingTraits() *TieflingTraits {
	if x, ok := m.GetRacialTraits().(*Race_TieflingTraits); ok {
		return x.TieflingTraits
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Race) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Race_OneofMarshaler, _Race_OneofUnmarshaler, _Race_OneofSizer, []interface{}{
		(*Race_HillDwarfTraits)(nil),
		(*Race_MountainDwarfTraits)(nil),
		(*Race_HighElfTraits)(nil),
		(*Race_WoodElfTraits)(nil),
		(*Race_DrowElfTraits)(nil),
		(*Race_LightFootHalflingTraits)(nil),
		(*Race_StoutHalflingTraits)(nil),
		(*Race_HumanTraits)(nil),
		(*Race_DragonbornTraits)(nil),
		(*Race_ForestGnomeTraits)(nil),
		(*Race_RockGnomeTraits)(nil),
		(*Race_HalfElfTraits)(nil),
		(*Race_HalfOrcTraits)(nil),
		(*Race_TieflingTraits)(nil),
	}
}

func _Race_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Race)
	// racial_traits
	switch x := m.RacialTraits.(type) {
	case *Race_HillDwarfTraits:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HillDwarfTraits); err != nil {
			return err
		}
	case *Race_MountainDwarfTraits:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MountainDwarfTraits); err != nil {
			return err
		}
	case *Race_HighElfTraits:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HighElfTraits); err != nil {
			return err
		}
	case *Race_WoodElfTraits:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WoodElfTraits); err != nil {
			return err
		}
	case *Race_DrowElfTraits:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrowElfTraits); err != nil {
			return err
		}
	case *Race_LightFootHalflingTraits:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LightFootHalflingTraits); err != nil {
			return err
		}
	case *Race_StoutHalflingTraits:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StoutHalflingTraits); err != nil {
			return err
		}
	case *Race_HumanTraits:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanTraits); err != nil {
			return err
		}
	case *Race_DragonbornTraits:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DragonbornTraits); err != nil {
			return err
		}
	case *Race_ForestGnomeTraits:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForestGnomeTraits); err != nil {
			return err
		}
	case *Race_RockGnomeTraits:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RockGnomeTraits); err != nil {
			return err
		}
	case *Race_HalfElfTraits:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HalfElfTraits); err != nil {
			return err
		}
	case *Race_HalfOrcTraits:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HalfOrcTraits); err != nil {
			return err
		}
	case *Race_TieflingTraits:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TieflingTraits); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Race.RacialTraits has unexpected type %T", x)
	}
	return nil
}

func _Race_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Race)
	switch tag {
	case 2: // racial_traits.hill_dwarf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HillDwarfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HillDwarfTraits{msg}
		return true, err
	case 3: // racial_traits.mountain_dwarf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MountainDwarfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_MountainDwarfTraits{msg}
		return true, err
	case 4: // racial_traits.high_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HighElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HighElfTraits{msg}
		return true, err
	case 5: // racial_traits.wood_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WoodElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_WoodElfTraits{msg}
		return true, err
	case 6: // racial_traits.drow_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DrowElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_DrowElfTraits{msg}
		return true, err
	case 7: // racial_traits.light_foot_halfling_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LightFootHalflingTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_LightFootHalflingTraits{msg}
		return true, err
	case 8: // racial_traits.stout_halfling_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StoutHalflingTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_StoutHalflingTraits{msg}
		return true, err
	case 9: // racial_traits.human_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HumanTraits{msg}
		return true, err
	case 10: // racial_traits.dragonborn_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DragonbornTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_DragonbornTraits{msg}
		return true, err
	case 11: // racial_traits.forest_gnome_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForestGnomeTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_ForestGnomeTraits{msg}
		return true, err
	case 12: // racial_traits.rock_gnome_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RockGnomeTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_RockGnomeTraits{msg}
		return true, err
	case 13: // racial_traits.half_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HalfElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HalfElfTraits{msg}
		return true, err
	case 14: // racial_traits.half_orc_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HalfOrcTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HalfOrcTraits{msg}
		return true, err
	case 15: // racial_traits.tiefling_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TieflingTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_TieflingTraits{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Race_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Race)
	// racial_traits
	switch x := m.RacialTraits.(type) {
	case *Race_HillDwarfTraits:
		s := proto.Size(x.HillDwarfTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_MountainDwarfTraits:
		s := proto.Size(x.MountainDwarfTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HighElfTraits:
		s := proto.Size(x.HighElfTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_WoodElfTraits:
		s := proto.Size(x.WoodElfTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_DrowElfTraits:
		s := proto.Size(x.DrowElfTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_LightFootHalflingTraits:
		s := proto.Size(x.LightFootHalflingTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_StoutHalflingTraits:
		s := proto.Size(x.StoutHalflingTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HumanTraits:
		s := proto.Size(x.HumanTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_DragonbornTraits:
		s := proto.Size(x.DragonbornTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_ForestGnomeTraits:
		s := proto.Size(x.ForestGnomeTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_RockGnomeTraits:
		s := proto.Size(x.RockGnomeTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HalfElfTraits:
		s := proto.Size(x.HalfElfTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HalfOrcTraits:
		s := proto.Size(x.HalfOrcTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_TieflingTraits:
		s := proto.Size(x.TieflingTraits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HillDwarfTraits struct {
	StatMod                *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision             bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	DwarvenResilience      bool     `protobuf:"varint,3,opt,name=dwarven_resilience,json=dwarvenResilience" json:"dwarven_resilience,omitempty"`
	DwarvenCombatTraining  bool     `protobuf:"varint,4,opt,name=dwarven_combat_training,json=dwarvenCombatTraining" json:"dwarven_combat_training,omitempty"`
	DwarvenToolProficiency bool     `protobuf:"varint,5,opt,name=dwarven_tool_proficiency,json=dwarvenToolProficiency" json:"dwarven_tool_proficiency,omitempty"`
	StoneCunning           bool     `protobuf:"varint,6,opt,name=stone_cunning,json=stoneCunning" json:"stone_cunning,omitempty"`
	DwarvenToughness       bool     `protobuf:"varint,7,opt,name=dwarven_toughness,json=dwarvenToughness" json:"dwarven_toughness,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *HillDwarfTraits) Reset()         { *m = HillDwarfTraits{} }
func (m *HillDwarfTraits) String() string { return proto.CompactTextString(m) }
func (*HillDwarfTraits) ProtoMessage()    {}
func (*HillDwarfTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{7}
}
func (m *HillDwarfTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HillDwarfTraits.Unmarshal(m, b)
}
func (m *HillDwarfTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HillDwarfTraits.Marshal(b, m, deterministic)
}
func (dst *HillDwarfTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HillDwarfTraits.Merge(dst, src)
}
func (m *HillDwarfTraits) XXX_Size() int {
	return xxx_messageInfo_HillDwarfTraits.Size(m)
}
func (m *HillDwarfTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_HillDwarfTraits.DiscardUnknown(m)
}

var xxx_messageInfo_HillDwarfTraits proto.InternalMessageInfo

func (m *HillDwarfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HillDwarfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenResilience() bool {
	if m != nil {
		return m.DwarvenResilience
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenCombatTraining() bool {
	if m != nil {
		return m.DwarvenCombatTraining
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenToolProficiency() bool {
	if m != nil {
		return m.DwarvenToolProficiency
	}
	return false
}

func (m *HillDwarfTraits) GetStoneCunning() bool {
	if m != nil {
		return m.StoneCunning
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenToughness() bool {
	if m != nil {
		return m.DwarvenToughness
	}
	return false
}

type MountainDwarfTraits struct {
	StatMod                *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision             bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	DwarvenResilience      bool     `protobuf:"varint,3,opt,name=dwarven_resilience,json=dwarvenResilience" json:"dwarven_resilience,omitempty"`
	DwarvenCombatTraining  bool     `protobuf:"varint,4,opt,name=dwarven_combat_training,json=dwarvenCombatTraining" json:"dwarven_combat_training,omitempty"`
	DwarvenToolProficiency bool     `protobuf:"varint,5,opt,name=dwarven_tool_proficiency,json=dwarvenToolProficiency" json:"dwarven_tool_proficiency,omitempty"`
	StoneCunning           bool     `protobuf:"varint,6,opt,name=stone_cunning,json=stoneCunning" json:"stone_cunning,omitempty"`
	DwarvenArmorTraining   bool     `protobuf:"varint,7,opt,name=dwarven_armor_training,json=dwarvenArmorTraining" json:"dwarven_armor_training,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MountainDwarfTraits) Reset()         { *m = MountainDwarfTraits{} }
func (m *MountainDwarfTraits) String() string { return proto.CompactTextString(m) }
func (*MountainDwarfTraits) ProtoMessage()    {}
func (*MountainDwarfTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{8}
}
func (m *MountainDwarfTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MountainDwarfTraits.Unmarshal(m, b)
}
func (m *MountainDwarfTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MountainDwarfTraits.Marshal(b, m, deterministic)
}
func (dst *MountainDwarfTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MountainDwarfTraits.Merge(dst, src)
}
func (m *MountainDwarfTraits) XXX_Size() int {
	return xxx_messageInfo_MountainDwarfTraits.Size(m)
}
func (m *MountainDwarfTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_MountainDwarfTraits.DiscardUnknown(m)
}

var xxx_messageInfo_MountainDwarfTraits proto.InternalMessageInfo

func (m *MountainDwarfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *MountainDwarfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenResilience() bool {
	if m != nil {
		return m.DwarvenResilience
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenCombatTraining() bool {
	if m != nil {
		return m.DwarvenCombatTraining
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenToolProficiency() bool {
	if m != nil {
		return m.DwarvenToolProficiency
	}
	return false
}

func (m *MountainDwarfTraits) GetStoneCunning() bool {
	if m != nil {
		return m.StoneCunning
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenArmorTraining() bool {
	if m != nil {
		return m.DwarvenArmorTraining
	}
	return false
}

type HighElfTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	KeenSenses           bool     `protobuf:"varint,3,opt,name=keen_senses,json=keenSenses" json:"keen_senses,omitempty"`
	FeyAncestry          bool     `protobuf:"varint,4,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	Trance               bool     `protobuf:"varint,5,opt,name=trance" json:"trance,omitempty"`
	ElfWeaponTraining    bool     `protobuf:"varint,6,opt,name=elf_weapon_training,json=elfWeaponTraining" json:"elf_weapon_training,omitempty"`
	Cantrip              bool     `protobuf:"varint,7,opt,name=cantrip" json:"cantrip,omitempty"`
	ExtraLanguage        bool     `protobuf:"varint,8,opt,name=extra_language,json=extraLanguage" json:"extra_language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HighElfTraits) Reset()         { *m = HighElfTraits{} }
func (m *HighElfTraits) String() string { return proto.CompactTextString(m) }
func (*HighElfTraits) ProtoMessage()    {}
func (*HighElfTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{9}
}
func (m *HighElfTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HighElfTraits.Unmarshal(m, b)
}
func (m *HighElfTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HighElfTraits.Marshal(b, m, deterministic)
}
func (dst *HighElfTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighElfTraits.Merge(dst, src)
}
func (m *HighElfTraits) XXX_Size() int {
	return xxx_messageInfo_HighElfTraits.Size(m)
}
func (m *HighElfTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_HighElfTraits.DiscardUnknown(m)
}

var xxx_messageInfo_HighElfTraits proto.InternalMessageInfo

func (m *HighElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HighElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HighElfTraits) GetKeenSenses() bool {
	if m != nil {
		return m.KeenSenses
	}
	return false
}

func (m *HighElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *HighElfTraits) GetTrance() bool {
	if m != nil {
		return m.Trance
	}
	return false
}

func (m *HighElfTraits) GetElfWeaponTraining() bool {
	if m != nil {
		return m.ElfWeaponTraining
	}
	return false
}

func (m *HighElfTraits) GetCantrip() bool {
	if m != nil {
		return m.Cantrip
	}
	return false
}

func (m *HighElfTraits) GetExtraLanguage() bool {
	if m != nil {
		return m.ExtraLanguage
	}
	return false
}

type WoodElfTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	KeenSenses           bool     `protobuf:"varint,3,opt,name=keen_senses,json=keenSenses" json:"keen_senses,omitempty"`
	FeyAncestry          bool     `protobuf:"varint,4,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	Trance               bool     `protobuf:"varint,5,opt,name=trance" json:"trance,omitempty"`
	ElfWeaponTraining    bool     `protobuf:"varint,6,opt,name=elf_weapon_training,json=elfWeaponTraining" json:"elf_weapon_training,omitempty"`
	FleetOfFoot          bool     `protobuf:"varint,7,opt,name=fleet_of_foot,json=fleetOfFoot" json:"fleet_of_foot,omitempty"`
	MaskOfTheWild        bool     `protobuf:"varint,8,opt,name=mask_of_the_wild,json=maskOfTheWild" json:"mask_of_the_wild,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WoodElfTraits) Reset()         { *m = WoodElfTraits{} }
func (m *WoodElfTraits) String() string { return proto.CompactTextString(m) }
func (*WoodElfTraits) ProtoMessage()    {}
func (*WoodElfTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{10}
}
func (m *WoodElfTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WoodElfTraits.Unmarshal(m, b)
}
func (m *WoodElfTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WoodElfTraits.Marshal(b, m, deterministic)
}
func (dst *WoodElfTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WoodElfTraits.Merge(dst, src)
}
func (m *WoodElfTraits) XXX_Size() int {
	return xxx_messageInfo_WoodElfTraits.Size(m)
}
func (m *WoodElfTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_WoodElfTraits.DiscardUnknown(m)
}

var xxx_messageInfo_WoodElfTraits proto.InternalMessageInfo

func (m *WoodElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *WoodElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *WoodElfTraits) GetKeenSenses() bool {
	if m != nil {
		return m.KeenSenses
	}
	return false
}

func (m *WoodElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *WoodElfTraits) GetTrance() bool {
	if m != nil {
		return m.Trance
	}
	return false
}

func (m *WoodElfTraits) GetElfWeaponTraining() bool {
	if m != nil {
		return m.ElfWeaponTraining
	}
	return false
}

func (m *WoodElfTraits) GetFleetOfFoot() bool {
	if m != nil {
		return m.FleetOfFoot
	}
	return false
}

func (m *WoodElfTraits) GetMaskOfTheWild() bool {
	if m != nil {
		return m.MaskOfTheWild
	}
	return false
}

type DrowElfTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	SuperiorDarkvision   bool     `protobuf:"varint,3,opt,name=superior_darkvision,json=superiorDarkvision" json:"superior_darkvision,omitempty"`
	KeenSenses           bool     `protobuf:"varint,4,opt,name=keen_senses,json=keenSenses" json:"keen_senses,omitempty"`
	FeyAncestry          bool     `protobuf:"varint,5,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	Trance               bool     `protobuf:"varint,6,opt,name=trance" json:"trance,omitempty"`
	SunlightSensitive    bool     `protobuf:"varint,7,opt,name=sunlight_sensitive,json=sunlightSensitive" json:"sunlight_sensitive,omitempty"`
	DrowMagic            bool     `protobuf:"varint,8,opt,name=drow_magic,json=drowMagic" json:"drow_magic,omitempty"`
	DrowWeaponTraining   bool     `protobuf:"varint,9,opt,name=drow_weapon_training,json=drowWeaponTraining" json:"drow_weapon_training,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrowElfTraits) Reset()         { *m = DrowElfTraits{} }
func (m *DrowElfTraits) String() string { return proto.CompactTextString(m) }
func (*DrowElfTraits) ProtoMessage()    {}
func (*DrowElfTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{11}
}
func (m *DrowElfTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrowElfTraits.Unmarshal(m, b)
}
func (m *DrowElfTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrowElfTraits.Marshal(b, m, deterministic)
}
func (dst *DrowElfTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrowElfTraits.Merge(dst, src)
}
func (m *DrowElfTraits) XXX_Size() int {
	return xxx_messageInfo_DrowElfTraits.Size(m)
}
func (m *DrowElfTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_DrowElfTraits.DiscardUnknown(m)
}

var xxx_messageInfo_DrowElfTraits proto.InternalMessageInfo

func (m *DrowElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *DrowElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *DrowElfTraits) GetSuperiorDarkvision() bool {
	if m != nil {
		return m.SuperiorDarkvision
	}
	return false
}

func (m *DrowElfTraits) GetKeenSenses() bool {
	if m != nil {
		return m.KeenSenses
	}
	return false
}

func (m *DrowElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *DrowElfTraits) GetTrance() bool {
	if m != nil {
		return m.Trance
	}
	return false
}

func (m *DrowElfTraits) GetSunlightSensitive() bool {
	if m != nil {
		return m.SunlightSensitive
	}
	return false
}

func (m *DrowElfTraits) GetDrowMagic() bool {
	if m != nil {
		return m.DrowMagic
	}
	return false
}

func (m *DrowElfTraits) GetDrowWeaponTraining() bool {
	if m != nil {
		return m.DrowWeaponTraining
	}
	return false
}

type LightFootHalflingTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Lucky                bool     `protobuf:"varint,2,opt,name=lucky" json:"lucky,omitempty"`
	Brave                bool     `protobuf:"varint,3,opt,name=brave" json:"brave,omitempty"`
	HalflingNimble       bool     `protobuf:"varint,4,opt,name=halfling_nimble,json=halflingNimble" json:"halfling_nimble,omitempty"`
	NaturalStealth       bool     `protobuf:"varint,5,opt,name=natural_stealth,json=naturalStealth" json:"natural_stealth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LightFootHalflingTraits) Reset()         { *m = LightFootHalflingTraits{} }
func (m *LightFootHalflingTraits) String() string { return proto.CompactTextString(m) }
func (*LightFootHalflingTraits) ProtoMessage()    {}
func (*LightFootHalflingTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{12}
}
func (m *LightFootHalflingTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightFootHalflingTraits.Unmarshal(m, b)
}
func (m *LightFootHalflingTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightFootHalflingTraits.Marshal(b, m, deterministic)
}
func (dst *LightFootHalflingTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightFootHalflingTraits.Merge(dst, src)
}
func (m *LightFootHalflingTraits) XXX_Size() int {
	return xxx_messageInfo_LightFootHalflingTraits.Size(m)
}
func (m *LightFootHalflingTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_LightFootHalflingTraits.DiscardUnknown(m)
}

var xxx_messageInfo_LightFootHalflingTraits proto.InternalMessageInfo

func (m *LightFootHalflingTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *LightFootHalflingTraits) GetLucky() bool {
	if m != nil {
		return m.Lucky
	}
	return false
}

func (m *LightFootHalflingTraits) GetBrave() bool {
	if m != nil {
		return m.Brave
	}
	return false
}

func (m *LightFootHalflingTraits) GetHalflingNimble() bool {
	if m != nil {
		return m.HalflingNimble
	}
	return false
}

func (m *LightFootHalflingTraits) GetNaturalStealth() bool {
	if m != nil {
		return m.NaturalStealth
	}
	return false
}

type StoutHalflingTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Lucky                bool     `protobuf:"varint,2,opt,name=lucky" json:"lucky,omitempty"`
	Brave                bool     `protobuf:"varint,3,opt,name=brave" json:"brave,omitempty"`
	HalflingNimble       bool     `protobuf:"varint,4,opt,name=halfling_nimble,json=halflingNimble" json:"halfling_nimble,omitempty"`
	StoutResilience      bool     `protobuf:"varint,5,opt,name=stout_resilience,json=stoutResilience" json:"stout_resilience,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoutHalflingTraits) Reset()         { *m = StoutHalflingTraits{} }
func (m *StoutHalflingTraits) String() string { return proto.CompactTextString(m) }
func (*StoutHalflingTraits) ProtoMessage()    {}
func (*StoutHalflingTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{13}
}
func (m *StoutHalflingTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoutHalflingTraits.Unmarshal(m, b)
}
func (m *StoutHalflingTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoutHalflingTraits.Marshal(b, m, deterministic)
}
func (dst *StoutHalflingTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoutHalflingTraits.Merge(dst, src)
}
func (m *StoutHalflingTraits) XXX_Size() int {
	return xxx_messageInfo_StoutHalflingTraits.Size(m)
}
func (m *StoutHalflingTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_StoutHalflingTraits.DiscardUnknown(m)
}

var xxx_messageInfo_StoutHalflingTraits proto.InternalMessageInfo

func (m *StoutHalflingTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *StoutHalflingTraits) GetLucky() bool {
	if m != nil {
		return m.Lucky
	}
	return false
}

func (m *StoutHalflingTraits) GetBrave() bool {
	if m != nil {
		return m.Brave
	}
	return false
}

func (m *StoutHalflingTraits) GetHalflingNimble() bool {
	if m != nil {
		return m.HalflingNimble
	}
	return false
}

func (m *StoutHalflingTraits) GetStoutResilience() bool {
	if m != nil {
		return m.StoutResilience
	}
	return false
}

type HumanTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HumanTraits) Reset()         { *m = HumanTraits{} }
func (m *HumanTraits) String() string { return proto.CompactTextString(m) }
func (*HumanTraits) ProtoMessage()    {}
func (*HumanTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{14}
}
func (m *HumanTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HumanTraits.Unmarshal(m, b)
}
func (m *HumanTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HumanTraits.Marshal(b, m, deterministic)
}
func (dst *HumanTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HumanTraits.Merge(dst, src)
}
func (m *HumanTraits) XXX_Size() int {
	return xxx_messageInfo_HumanTraits.Size(m)
}
func (m *HumanTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_HumanTraits.DiscardUnknown(m)
}

var xxx_messageInfo_HumanTraits proto.InternalMessageInfo

func (m *HumanTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

type DragonbornTraits struct {
	StatMod              *Stats                            `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	DraconicAncestry     DragonbornTraits_DraconicAncestry `protobuf:"varint,2,opt,name=draconic_ancestry,json=draconicAncestry,enum=facetome.DragonbornTraits_DraconicAncestry" json:"draconic_ancestry,omitempty"`
	BreathWeapon         bool                              `protobuf:"varint,3,opt,name=breath_weapon,json=breathWeapon" json:"breath_weapon,omitempty"`
	DamageResistance     bool                              `protobuf:"varint,4,opt,name=damage_resistance,json=damageResistance" json:"damage_resistance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DragonbornTraits) Reset()         { *m = DragonbornTraits{} }
func (m *DragonbornTraits) String() string { return proto.CompactTextString(m) }
func (*DragonbornTraits) ProtoMessage()    {}
func (*DragonbornTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{15}
}
func (m *DragonbornTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DragonbornTraits.Unmarshal(m, b)
}
func (m *DragonbornTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DragonbornTraits.Marshal(b, m, deterministic)
}
func (dst *DragonbornTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DragonbornTraits.Merge(dst, src)
}
func (m *DragonbornTraits) XXX_Size() int {
	return xxx_messageInfo_DragonbornTraits.Size(m)
}
func (m *DragonbornTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_DragonbornTraits.DiscardUnknown(m)
}

var xxx_messageInfo_DragonbornTraits proto.InternalMessageInfo

func (m *DragonbornTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *DragonbornTraits) GetDraconicAncestry() DragonbornTraits_DraconicAncestry {
	if m != nil {
		return m.DraconicAncestry
	}
	return DragonbornTraits_DRAC_ANCS_BLACK
}

func (m *DragonbornTraits) GetBreathWeapon() bool {
	if m != nil {
		return m.BreathWeapon
	}
	return false
}

func (m *DragonbornTraits) GetDamageResistance() bool {
	if m != nil {
		return m.DamageResistance
	}
	return false
}

type ForestGnomeTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	GnomeCunning         bool     `protobuf:"varint,3,opt,name=gnome_cunning,json=gnomeCunning" json:"gnome_cunning,omitempty"`
	NaturalIllusion      bool     `protobuf:"varint,4,opt,name=natural_illusion,json=naturalIllusion" json:"natural_illusion,omitempty"`
	SpeakWithBeasts      bool     `protobuf:"varint,5,opt,name=speak_with_beasts,json=speakWithBeasts" json:"speak_with_beasts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForestGnomeTraits) Reset()         { *m = ForestGnomeTraits{} }
func (m *ForestGnomeTraits) String() string { return proto.CompactTextString(m) }
func (*ForestGnomeTraits) ProtoMessage()    {}
func (*ForestGnomeTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{16}
}
func (m *ForestGnomeTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForestGnomeTraits.Unmarshal(m, b)
}
func (m *ForestGnomeTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForestGnomeTraits.Marshal(b, m, deterministic)
}
func (dst *ForestGnomeTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForestGnomeTraits.Merge(dst, src)
}
func (m *ForestGnomeTraits) XXX_Size() int {
	return xxx_messageInfo_ForestGnomeTraits.Size(m)
}
func (m *ForestGnomeTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_ForestGnomeTraits.DiscardUnknown(m)
}

var xxx_messageInfo_ForestGnomeTraits proto.InternalMessageInfo

func (m *ForestGnomeTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *ForestGnomeTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *ForestGnomeTraits) GetGnomeCunning() bool {
	if m != nil {
		return m.GnomeCunning
	}
	return false
}

func (m *ForestGnomeTraits) GetNaturalIllusion() bool {
	if m != nil {
		return m.NaturalIllusion
	}
	return false
}

func (m *ForestGnomeTraits) GetSpeakWithBeasts() bool {
	if m != nil {
		return m.SpeakWithBeasts
	}
	return false
}

type RockGnomeTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	GnomeCunning         bool     `protobuf:"varint,3,opt,name=gnome_cunning,json=gnomeCunning" json:"gnome_cunning,omitempty"`
	ArtificeLore         bool     `protobuf:"varint,4,opt,name=artifice_lore,json=artificeLore" json:"artifice_lore,omitempty"`
	Tinker               bool     `protobuf:"varint,5,opt,name=tinker" json:"tinker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RockGnomeTraits) Reset()         { *m = RockGnomeTraits{} }
func (m *RockGnomeTraits) String() string { return proto.CompactTextString(m) }
func (*RockGnomeTraits) ProtoMessage()    {}
func (*RockGnomeTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{17}
}
func (m *RockGnomeTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RockGnomeTraits.Unmarshal(m, b)
}
func (m *RockGnomeTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RockGnomeTraits.Marshal(b, m, deterministic)
}
func (dst *RockGnomeTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RockGnomeTraits.Merge(dst, src)
}
func (m *RockGnomeTraits) XXX_Size() int {
	return xxx_messageInfo_RockGnomeTraits.Size(m)
}
func (m *RockGnomeTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_RockGnomeTraits.DiscardUnknown(m)
}

var xxx_messageInfo_RockGnomeTraits proto.InternalMessageInfo

func (m *RockGnomeTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *RockGnomeTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *RockGnomeTraits) GetGnomeCunning() bool {
	if m != nil {
		return m.GnomeCunning
	}
	return false
}

func (m *RockGnomeTraits) GetArtificeLore() bool {
	if m != nil {
		return m.ArtificeLore
	}
	return false
}

func (m *RockGnomeTraits) GetTinker() bool {
	if m != nil {
		return m.Tinker
	}
	return false
}

type HalfElfTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	FeyAncestry          bool     `protobuf:"varint,3,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	SkillVesatility      bool     `protobuf:"varint,4,opt,name=skill_vesatility,json=skillVesatility" json:"skill_vesatility,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HalfElfTraits) Reset()         { *m = HalfElfTraits{} }
func (m *HalfElfTraits) String() string { return proto.CompactTextString(m) }
func (*HalfElfTraits) ProtoMessage()    {}
func (*HalfElfTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{18}
}
func (m *HalfElfTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HalfElfTraits.Unmarshal(m, b)
}
func (m *HalfElfTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HalfElfTraits.Marshal(b, m, deterministic)
}
func (dst *HalfElfTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HalfElfTraits.Merge(dst, src)
}
func (m *HalfElfTraits) XXX_Size() int {
	return xxx_messageInfo_HalfElfTraits.Size(m)
}
func (m *HalfElfTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_HalfElfTraits.DiscardUnknown(m)
}

var xxx_messageInfo_HalfElfTraits proto.InternalMessageInfo

func (m *HalfElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HalfElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HalfElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *HalfElfTraits) GetSkillVesatility() bool {
	if m != nil {
		return m.SkillVesatility
	}
	return false
}

type HalfOrcTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	Menacing             bool     `protobuf:"varint,3,opt,name=menacing" json:"menacing,omitempty"`
	RelentlessEndure     bool     `protobuf:"varint,4,opt,name=relentless_endure,json=relentlessEndure" json:"relentless_endure,omitempty"`
	SavageAttacks        bool     `protobuf:"varint,5,opt,name=savage_attacks,json=savageAttacks" json:"savage_attacks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HalfOrcTraits) Reset()         { *m = HalfOrcTraits{} }
func (m *HalfOrcTraits) String() string { return proto.CompactTextString(m) }
func (*HalfOrcTraits) ProtoMessage()    {}
func (*HalfOrcTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{19}
}
func (m *HalfOrcTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HalfOrcTraits.Unmarshal(m, b)
}
func (m *HalfOrcTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HalfOrcTraits.Marshal(b, m, deterministic)
}
func (dst *HalfOrcTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HalfOrcTraits.Merge(dst, src)
}
func (m *HalfOrcTraits) XXX_Size() int {
	return xxx_messageInfo_HalfOrcTraits.Size(m)
}
func (m *HalfOrcTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_HalfOrcTraits.DiscardUnknown(m)
}

var xxx_messageInfo_HalfOrcTraits proto.InternalMessageInfo

func (m *HalfOrcTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HalfOrcTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HalfOrcTraits) GetMenacing() bool {
	if m != nil {
		return m.Menacing
	}
	return false
}

func (m *HalfOrcTraits) GetRelentlessEndure() bool {
	if m != nil {
		return m.RelentlessEndure
	}
	return false
}

func (m *HalfOrcTraits) GetSavageAttacks() bool {
	if m != nil {
		return m.SavageAttacks
	}
	return false
}

type TieflingTraits struct {
	StatMod              *Stats   `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision           bool     `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	HellishResistance    bool     `protobuf:"varint,3,opt,name=hellish_resistance,json=hellishResistance" json:"hellish_resistance,omitempty"`
	InfernalLegacy       bool     `protobuf:"varint,4,opt,name=infernal_legacy,json=infernalLegacy" json:"infernal_legacy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TieflingTraits) Reset()         { *m = TieflingTraits{} }
func (m *TieflingTraits) String() string { return proto.CompactTextString(m) }
func (*TieflingTraits) ProtoMessage()    {}
func (*TieflingTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{20}
}
func (m *TieflingTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TieflingTraits.Unmarshal(m, b)
}
func (m *TieflingTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TieflingTraits.Marshal(b, m, deterministic)
}
func (dst *TieflingTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TieflingTraits.Merge(dst, src)
}
func (m *TieflingTraits) XXX_Size() int {
	return xxx_messageInfo_TieflingTraits.Size(m)
}
func (m *TieflingTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_TieflingTraits.DiscardUnknown(m)
}

var xxx_messageInfo_TieflingTraits proto.InternalMessageInfo

func (m *TieflingTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *TieflingTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *TieflingTraits) GetHellishResistance() bool {
	if m != nil {
		return m.HellishResistance
	}
	return false
}

func (m *TieflingTraits) GetInfernalLegacy() bool {
	if m != nil {
		return m.InfernalLegacy
	}
	return false
}

type PhysicalTraits struct {
	HeightFeet           int32                   `protobuf:"varint,1,opt,name=height_feet,json=heightFeet" json:"height_feet,omitempty"`
	HeightInch           int32                   `protobuf:"varint,2,opt,name=height_inch,json=heightInch" json:"height_inch,omitempty"`
	Weight               int32                   `protobuf:"varint,3,opt,name=weight" json:"weight,omitempty"`
	SkinTone             PhysicalTraits_SkinTone `protobuf:"varint,4,opt,name=skin_tone,json=skinTone,enum=facetome.PhysicalTraits_SkinTone" json:"skin_tone,omitempty"`
	Traits               []string                `protobuf:"bytes,5,rep,name=traits" json:"traits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PhysicalTraits) Reset()         { *m = PhysicalTraits{} }
func (m *PhysicalTraits) String() string { return proto.CompactTextString(m) }
func (*PhysicalTraits) ProtoMessage()    {}
func (*PhysicalTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{21}
}
func (m *PhysicalTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalTraits.Unmarshal(m, b)
}
func (m *PhysicalTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalTraits.Marshal(b, m, deterministic)
}
func (dst *PhysicalTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalTraits.Merge(dst, src)
}
func (m *PhysicalTraits) XXX_Size() int {
	return xxx_messageInfo_PhysicalTraits.Size(m)
}
func (m *PhysicalTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalTraits.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalTraits proto.InternalMessageInfo

func (m *PhysicalTraits) GetHeightFeet() int32 {
	if m != nil {
		return m.HeightFeet
	}
	return 0
}

func (m *PhysicalTraits) GetHeightInch() int32 {
	if m != nil {
		return m.HeightInch
	}
	return 0
}

func (m *PhysicalTraits) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PhysicalTraits) GetSkinTone() PhysicalTraits_SkinTone {
	if m != nil {
		return m.SkinTone
	}
	return PhysicalTraits_SKIN_PALE
}

func (m *PhysicalTraits) GetTraits() []string {
	if m != nil {
		return m.Traits
	}
	return nil
}

type PsychologicalTraits struct {
	Traits               []string `protobuf:"bytes,1,rep,name=traits" json:"traits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PsychologicalTraits) Reset()         { *m = PsychologicalTraits{} }
func (m *PsychologicalTraits) String() string { return proto.CompactTextString(m) }
func (*PsychologicalTraits) ProtoMessage()    {}
func (*PsychologicalTraits) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_tome_8508b3da131e0d0c, []int{22}
}
func (m *PsychologicalTraits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PsychologicalTraits.Unmarshal(m, b)
}
func (m *PsychologicalTraits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PsychologicalTraits.Marshal(b, m, deterministic)
}
func (dst *PsychologicalTraits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PsychologicalTraits.Merge(dst, src)
}
func (m *PsychologicalTraits) XXX_Size() int {
	return xxx_messageInfo_PsychologicalTraits.Size(m)
}
func (m *PsychologicalTraits) XXX_DiscardUnknown() {
	xxx_messageInfo_PsychologicalTraits.DiscardUnknown(m)
}

var xxx_messageInfo_PsychologicalTraits proto.InternalMessageInfo

func (m *PsychologicalTraits) GetTraits() []string {
	if m != nil {
		return m.Traits
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNPCRequest)(nil), "facetome.GetNPCRequest")
	proto.RegisterType((*GetNPCResponse)(nil), "facetome.GetNPCResponse")
	proto.RegisterType((*NPC)(nil), "facetome.NPC")
	proto.RegisterType((*Stats)(nil), "facetome.Stats")
	proto.RegisterType((*Skill)(nil), "facetome.Skill")
	proto.RegisterType((*Class)(nil), "facetome.Class")
	proto.RegisterType((*Race)(nil), "facetome.Race")
	proto.RegisterType((*HillDwarfTraits)(nil), "facetome.HillDwarfTraits")
	proto.RegisterType((*MountainDwarfTraits)(nil), "facetome.MountainDwarfTraits")
	proto.RegisterType((*HighElfTraits)(nil), "facetome.HighElfTraits")
	proto.RegisterType((*WoodElfTraits)(nil), "facetome.WoodElfTraits")
	proto.RegisterType((*DrowElfTraits)(nil), "facetome.DrowElfTraits")
	proto.RegisterType((*LightFootHalflingTraits)(nil), "facetome.LightFootHalflingTraits")
	proto.RegisterType((*StoutHalflingTraits)(nil), "facetome.StoutHalflingTraits")
	proto.RegisterType((*HumanTraits)(nil), "facetome.HumanTraits")
	proto.RegisterType((*DragonbornTraits)(nil), "facetome.DragonbornTraits")
	proto.RegisterType((*ForestGnomeTraits)(nil), "facetome.ForestGnomeTraits")
	proto.RegisterType((*RockGnomeTraits)(nil), "facetome.RockGnomeTraits")
	proto.RegisterType((*HalfElfTraits)(nil), "facetome.HalfElfTraits")
	proto.RegisterType((*HalfOrcTraits)(nil), "facetome.HalfOrcTraits")
	proto.RegisterType((*TieflingTraits)(nil), "facetome.TieflingTraits")
	proto.RegisterType((*PhysicalTraits)(nil), "facetome.PhysicalTraits")
	proto.RegisterType((*PsychologicalTraits)(nil), "facetome.PsychologicalTraits")
	proto.RegisterEnum("facetome.AgeGroup", AgeGroup_name, AgeGroup_value)
	proto.RegisterEnum("facetome.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("facetome.RealLanguage", RealLanguage_name, RealLanguage_value)
	proto.RegisterEnum("facetome.RaceName", RaceName_name, RaceName_value)
	proto.RegisterEnum("facetome.Alignment", Alignment_name, Alignment_value)
	proto.RegisterEnum("facetome.Language", Language_name, Language_value)
	proto.RegisterEnum("facetome.ClassName", ClassName_name, ClassName_value)
	proto.RegisterEnum("facetome.Level", Level_name, Level_value)
	proto.RegisterEnum("facetome.Skill_SkillName", Skill_SkillName_name, Skill_SkillName_value)
	proto.RegisterEnum("facetome.DragonbornTraits_DraconicAncestry", DragonbornTraits_DraconicAncestry_name, DragonbornTraits_DraconicAncestry_value)
	proto.RegisterEnum("facetome.PhysicalTraits_SkinTone", PhysicalTraits_SkinTone_name, PhysicalTraits_SkinTone_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceTomeClient is the client API for FaceTome service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceTomeClient interface {
	GetNPC(ctx context.Context, in *GetNPCRequest, opts ...grpc.CallOption) (*GetNPCResponse, error)
}

type faceTomeClient struct {
	cc *grpc.ClientConn
}

func NewFaceTomeClient(cc *grpc.ClientConn) FaceTomeClient {
	return &faceTomeClient{cc}
}

func (c *faceTomeClient) GetNPC(ctx context.Context, in *GetNPCRequest, opts ...grpc.CallOption) (*GetNPCResponse, error) {
	out := new(GetNPCResponse)
	err := c.cc.Invoke(ctx, "/facetome.FaceTome/GetNPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceTomeServer is the server API for FaceTome service.
type FaceTomeServer interface {
	GetNPC(context.Context, *GetNPCRequest) (*GetNPCResponse, error)
}

func RegisterFaceTomeServer(s *grpc.Server, srv FaceTomeServer) {
	s.RegisterService(&_FaceTome_serviceDesc, srv)
}

func _FaceTome_GetNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceTomeServer).GetNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/facetome.FaceTome/GetNPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceTomeServer).GetNPC(ctx, req.(*GetNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceTome_serviceDesc = grpc.ServiceDesc{
	ServiceName: "facetome.FaceTome",
	HandlerType: (*FaceTomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNPC",
			Handler:    _FaceTome_GetNPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/face-tome.proto",
}

func init() { proto.RegisterFile("api/face-tome.proto", fileDescriptor_face_tome_8508b3da131e0d0c) }

var fileDescriptor_face_tome_8508b3da131e0d0c = []byte{
	// 3387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x5b, 0x8f, 0xe3, 0xd8,
	0x56, 0xee, 0xdc, 0xaa, 0x92, 0x9d, 0xdb, 0xce, 0x4e, 0x5f, 0x6a, 0xfa, 0xe8, 0xc0, 0x4c, 0x46,
	0xc3, 0xf4, 0xd4, 0xd1, 0xf4, 0x40, 0x73, 0xd1, 0xe1, 0x48, 0x20, 0xb9, 0x12, 0x27, 0x31, 0xe5,
	0xd8, 0xa5, 0x6d, 0x57, 0xd5, 0xf4, 0xbc, 0x18, 0x77, 0xb2, 0x93, 0x58, 0xe5, 0xd8, 0xc1, 0x76,
	0x75, 0x4d, 0xff, 0x01, 0xe0, 0x47, 0xf0, 0x08, 0x12, 0xbc, 0x9f, 0x67, 0x10, 0x17, 0xc1, 0x03,
	0x2f, 0x87, 0x67, 0x84, 0x84, 0xc4, 0x0b, 0x3f, 0x80, 0x27, 0x9e, 0xd0, 0xda, 0x7b, 0xfb, 0x96,
	0xaa, 0x9e, 0x61, 0xa4, 0x16, 0x48, 0x88, 0x97, 0x52, 0xd6, 0xb7, 0xd6, 0xfe, 0xbc, 0xbc, 0xf6,
	0xba, 0x6c, 0xdb, 0x85, 0x86, 0xee, 0xde, 0xfb, 0x6a, 0xed, 0x2e, 0xd9, 0x97, 0x49, 0xb8, 0x63,
	0x2f, 0xf7, 0x51, 0x98, 0x84, 0xa4, 0x09, 0x00, 0xc8, 0xa3, 0x7f, 0xaa, 0xa2, 0xee, 0x8c, 0x25,
	0xc6, 0xc5, 0x98, 0xb2, 0x3f, 0xb8, 0x65, 0x71, 0x42, 0x5e, 0xa0, 0xa3, 0x0d, 0x0b, 0x56, 0x2c,
	0x3a, 0xa9, 0x7c, 0x5c, 0x79, 0xd1, 0x7b, 0x85, 0x5f, 0xa6, 0xc6, 0x2f, 0x67, 0x1c, 0xa7, 0x52,
	0x4f, 0x5e, 0xa1, 0xa6, 0xef, 0x06, 0x9b, 0x5b, 0x77, 0xc3, 0x4e, 0xaa, 0xdc, 0xf6, 0x69, 0x6e,
	0x4b, 0x99, 0xeb, 0xeb, 0x52, 0x4b, 0x33, 0x3b, 0xf2, 0x9b, 0xa8, 0x13, 0x31, 0xdf, 0x4d, 0xbc,
	0xb7, 0xcc, 0x81, 0x75, 0x35, 0xbe, 0x8e, 0xe4, 0xeb, 0x94, 0x0d, 0x9b, 0x45, 0xe1, 0xed, 0x9e,
	0xb6, 0x53, 0x3b, 0x65, 0xc3, 0xc8, 0xaf, 0xa0, 0x7a, 0xe4, 0x2e, 0xd9, 0x49, 0xfd, 0xd0, 0x9c,
	0xba, 0x4b, 0x66, 0xb8, 0x3b, 0x46, 0xb9, 0x9e, 0xfc, 0x1a, 0x6a, 0xb9, 0xbe, 0xb7, 0x09, 0x76,
	0x2c, 0x48, 0x4e, 0x1a, 0xdc, 0x78, 0x58, 0xe0, 0x4e, 0x55, 0x34, 0xb7, 0x22, 0x5f, 0xa0, 0xc6,
	0xd2, 0x77, 0xe3, 0xf8, 0xe4, 0xe8, 0xd0, 0x7c, 0x0c, 0x30, 0x27, 0x17, 0x16, 0xe4, 0x33, 0xd4,
	0xf0, 0xd9, 0x5b, 0xe6, 0x9f, 0x1c, 0x73, 0xd3, 0x7e, 0x6e, 0xaa, 0x03, 0x4c, 0x85, 0x76, 0xf4,
	0x33, 0xd4, 0x4b, 0x43, 0x1a, 0xef, 0xc3, 0x20, 0x66, 0xe4, 0x05, 0x6a, 0x06, 0xfb, 0xa5, 0xb3,
	0x72, 0x13, 0x97, 0x47, 0xb5, 0xfd, 0xaa, 0x9b, 0xaf, 0x05, 0xc3, 0xe3, 0x60, 0xbf, 0x9c, 0xb8,
	0x89, 0x3b, 0xfa, 0xd3, 0x3a, 0xaa, 0x19, 0x17, 0x63, 0xf2, 0x63, 0x84, 0xd6, 0x5e, 0x14, 0x27,
	0x4e, 0xe0, 0xee, 0x18, 0x5f, 0xd3, 0xa2, 0x2d, 0x8e, 0x80, 0x43, 0xe4, 0x47, 0xa8, 0xe5, 0xbb,
	0xa9, 0xb6, 0xca, 0xb5, 0x4d, 0x00, 0xb8, 0x12, 0xa3, 0x5a, 0x1a, 0xda, 0x06, 0x85, 0x9f, 0xe5,
	0xb0, 0xd4, 0xff, 0x5b, 0x61, 0x79, 0x8c, 0x1a, 0xf1, 0x9e, 0xb1, 0x15, 0x8f, 0x62, 0x83, 0x0a,
	0x81, 0xbc, 0x2c, 0x6c, 0xf9, 0xd1, 0xc7, 0xb5, 0xf2, 0x5e, 0x3c, 0xb0, 0xdd, 0x9f, 0xa5, 0xc1,
	0x3d, 0xfe, 0xb8, 0xf6, 0xa2, 0x5d, 0x8c, 0x18, 0x0f, 0x6e, 0x1a, 0xd8, 0x91, 0xdc, 0xde, 0x26,
	0x8f, 0x4d, 0xaf, 0xbc, 0xbd, 0x72, 0x6b, 0x3f, 0x43, 0x8d, 0x38, 0x71, 0x93, 0xf8, 0xa4, 0xc5,
	0x8d, 0x0a, 0x54, 0x16, 0xc0, 0x54, 0x68, 0xb9, 0xd9, 0x8d, 0xe7, 0xfb, 0x27, 0xe8, 0xf0, 0x8a,
	0x16, 0xc0, 0x54, 0x68, 0x89, 0x82, 0xfa, 0xfb, 0xed, 0xbb, 0xd8, 0x5b, 0xba, 0xbe, 0x93, 0x44,
	0xae, 0x97, 0xc4, 0x27, 0x6d, 0xce, 0x7b, 0x92, 0x2f, 0xb8, 0x90, 0x06, 0x36, 0xd7, 0xd3, 0xde,
	0xbe, 0x24, 0x93, 0x0b, 0xf4, 0x78, 0x1f, 0xbf, 0x5b, 0x6e, 0x43, 0x3f, 0xdc, 0x14, 0x79, 0x3a,
	0x9c, 0xe7, 0xc7, 0x05, 0x9e, 0xa2, 0x95, 0x24, 0x1b, 0xee, 0xef, 0x83, 0x85, 0xd2, 0xeb, 0x7e,
	0x77, 0xe9, 0x8d, 0x62, 0xd4, 0xe0, 0x77, 0x0d, 0x7b, 0x1d, 0x27, 0xa2, 0x54, 0x1b, 0x14, 0x7e,
	0x02, 0xb2, 0x0c, 0x03, 0x9e, 0x14, 0x0d, 0x0a, 0x3f, 0x01, 0x59, 0xb1, 0x6f, 0xd3, 0x7c, 0x58,
	0xb1, 0x6f, 0x01, 0xf1, 0x64, 0x26, 0x34, 0x28, 0xfc, 0x04, 0xe4, 0xce, 0x8b, 0xe5, 0x66, 0xc3,
	0x4f, 0xce, 0xb3, 0x75, 0x79, 0x55, 0x00, 0xcf, 0xd6, 0x1d, 0xfd, 0x51, 0x1d, 0x35, 0x78, 0x10,
	0xc9, 0x4f, 0x11, 0xe2, 0x61, 0xcc, 0xb3, 0xb3, 0xf7, 0xea, 0xa3, 0x83, 0x48, 0x8b, 0xbf, 0xbc,
	0x7c, 0x5a, 0x71, 0xfa, 0x93, 0x7c, 0x8c, 0xda, 0xfb, 0x28, 0x5c, 0x7b, 0x4b, 0x8f, 0x05, 0xcb,
	0x77, 0xdc, 0xcb, 0x26, 0x2d, 0x42, 0xe4, 0x23, 0xd4, 0x84, 0x9d, 0x74, 0x76, 0xe1, 0x8a, 0xbb,
	0xdc, 0xa2, 0xc7, 0x20, 0x2f, 0xc2, 0xd5, 0xe8, 0x0f, 0x6b, 0xa8, 0x95, 0xb1, 0x92, 0x21, 0xea,
	0x5b, 0xe7, 0x9a, 0xae, 0x3b, 0x8a, 0x3d, 0xd7, 0x55, 0x5b, 0x1b, 0x5b, 0xf8, 0x11, 0x79, 0x8c,
	0xb0, 0x04, 0xc7, 0xd4, 0x3c, 0x53, 0x38, 0x5a, 0x21, 0x03, 0xd4, 0x15, 0xa8, 0xa5, 0xab, 0xda,
	0x6c, 0x6e, 0xe3, 0x6a, 0x01, 0xb2, 0x55, 0x45, 0xb7, 0xe7, 0xb8, 0x46, 0x30, 0xea, 0xc8, 0xb5,
	0x74, 0xac, 0x18, 0x0a, 0xae, 0xe7, 0x46, 0x73, 0xcd, 0xb2, 0x4d, 0xfa, 0x1a, 0x37, 0xc8, 0x33,
	0x34, 0x14, 0x90, 0x66, 0x5c, 0xa9, 0x96, 0xad, 0xcd, 0x14, 0x5b, 0x33, 0x0d, 0x7c, 0x94, 0xaf,
	0x36, 0x14, 0xfb, 0x92, 0xaa, 0xf8, 0x98, 0x10, 0xd4, 0x13, 0x08, 0x55, 0x75, 0x6d, 0x06, 0x56,
	0x4d, 0xf2, 0x11, 0x7a, 0x22, 0xaf, 0x61, 0x68, 0x0b, 0x45, 0x77, 0xe6, 0x8a, 0x31, 0xd1, 0x35,
	0x63, 0x86, 0x5b, 0xf9, 0xc5, 0x34, 0xc3, 0xe2, 0x4e, 0xa2, 0x9c, 0x61, 0xa1, 0x4e, 0xb4, 0xb1,
	0x66, 0xa8, 0xb8, 0x9d, 0xdf, 0xe1, 0x85, 0x4a, 0xc7, 0xea, 0x05, 0xbf, 0x7a, 0x27, 0xb7, 0xb4,
	0x2e, 0xe9, 0x95, 0x76, 0xa5, 0xe8, 0xb8, 0x9b, 0x07, 0x68, 0xa2, 0xa6, 0x86, 0x3d, 0xf2, 0x14,
	0x91, 0xf4, 0x2a, 0xb6, 0xb6, 0xd0, 0x26, 0xc2, 0xfd, 0x3e, 0x79, 0x82, 0x06, 0x19, 0xed, 0xd4,
	0xa4, 0x0b, 0xc5, 0x18, 0xab, 0x18, 0x97, 0xae, 0x66, 0x5d, 0x2a, 0x16, 0x18, 0x0f, 0x46, 0xd7,
	0xa8, 0xc1, 0xeb, 0x97, 0x7c, 0x8e, 0xea, 0x85, 0x14, 0x78, 0xb0, 0x77, 0x72, 0x83, 0xbc, 0x75,
	0x56, 0xbf, 0xb3, 0x75, 0xfe, 0x43, 0x13, 0xd5, 0xa1, 0xe6, 0xb3, 0x86, 0x5f, 0xf9, 0x9e, 0x86,
	0x3f, 0x43, 0x83, 0x2d, 0x24, 0xe2, 0xea, 0xce, 0x8d, 0xd6, 0x69, 0x05, 0x56, 0x79, 0x05, 0x16,
	0x12, 0x72, 0xee, 0xf9, 0xfe, 0x04, 0x2c, 0x44, 0xa1, 0xcd, 0x1f, 0xd1, 0xfe, 0xb6, 0x0c, 0x11,
	0x0b, 0x3d, 0xd9, 0x85, 0xb7, 0x41, 0xe2, 0x7a, 0x41, 0x99, 0xac, 0x76, 0x58, 0xce, 0x0b, 0x69,
	0x56, 0x26, 0x1c, 0xee, 0xee, 0xc3, 0xd0, 0x65, 0xb6, 0xde, 0x66, 0xeb, 0x30, 0x3f, 0xa3, 0xab,
	0x73, 0xba, 0x67, 0x45, 0xdf, 0x36, 0x5b, 0xd5, 0xcf, 0x89, 0xba, 0xdb, 0x22, 0x00, 0x14, 0x77,
	0x61, 0xb8, 0x2a, 0x52, 0x34, 0x0e, 0x29, 0xae, 0xc3, 0x70, 0x55, 0xa2, 0xb8, 0x2b, 0x02, 0x40,
	0xb1, 0x8a, 0xc2, 0xbb, 0x22, 0xc5, 0xd1, 0x21, 0xc5, 0x24, 0x0a, 0xef, 0x4a, 0x14, 0xab, 0x22,
	0x40, 0x7e, 0x1f, 0x3d, 0xf7, 0xbd, 0xcd, 0x36, 0x71, 0xd6, 0x61, 0x98, 0x38, 0x5b, 0xd7, 0x5f,
	0xfb, 0x5e, 0xb0, 0x49, 0xd9, 0x8e, 0x39, 0xdb, 0x27, 0x85, 0x3d, 0x05, 0xdb, 0x69, 0x18, 0x26,
	0x73, 0x69, 0x99, 0xf1, 0x3e, 0xf3, 0x1f, 0x56, 0x41, 0xfc, 0xe3, 0x24, 0xbc, 0xbd, 0x4f, 0xde,
	0x3c, 0x8c, 0xbf, 0x05, 0x66, 0xf7, 0x88, 0x87, 0xf1, 0x7d, 0x98, 0xfc, 0x0c, 0x75, 0xb6, 0xb7,
	0x3b, 0x37, 0x48, 0xb9, 0xc4, 0xe8, 0x78, 0x52, 0x08, 0x3e, 0x68, 0x33, 0x8e, 0xf6, 0x36, 0x17,
	0x89, 0x86, 0x06, 0xab, 0xc8, 0xdd, 0x84, 0xc1, 0x9b, 0x30, 0xca, 0x08, 0x10, 0x27, 0x78, 0x5e,
	0x8c, 0x5b, 0x6a, 0x92, 0xb1, 0xe0, 0xd5, 0x01, 0x46, 0x16, 0x68, 0xb8, 0x0e, 0x23, 0x16, 0x27,
	0xce, 0x26, 0x08, 0x77, 0xac, 0x3c, 0x70, 0x7e, 0x94, 0x93, 0x4d, 0xb9, 0xd1, 0x0c, 0x6c, 0x32,
	0xb6, 0xc1, 0xfa, 0x10, 0x84, 0x9c, 0x8f, 0xc2, 0xe5, 0x4d, 0x99, 0xac, 0x73, 0x98, 0xf3, 0x34,
	0x5c, 0xde, 0x94, 0xa9, 0xfa, 0x51, 0x19, 0xe2, 0xe9, 0xe9, 0xfa, 0xeb, 0x62, 0x62, 0x74, 0xef,
	0xa5, 0xa7, 0xeb, 0xaf, 0xcb, 0xe9, 0x59, 0x04, 0x32, 0x8a, 0x30, 0x5a, 0xa6, 0x14, 0xbd, 0x87,
	0x28, 0xcc, 0x68, 0x59, 0xa6, 0xc8, 0x00, 0x32, 0x46, 0xfd, 0xc4, 0x63, 0xa5, 0x3d, 0xef, 0x1f,
	0x8e, 0x62, 0x5b, 0x1a, 0x64, 0x1c, 0xbd, 0xa4, 0x84, 0x9c, 0xf5, 0x51, 0x37, 0x72, 0x97, 0x5e,
	0x36, 0x85, 0x47, 0xbf, 0xa8, 0xa2, 0xfe, 0x41, 0xd9, 0x93, 0xd3, 0xc2, 0x68, 0xa9, 0x3c, 0x7c,
	0x8a, 0x48, 0x67, 0x0d, 0xf9, 0x25, 0x84, 0x56, 0x6e, 0x74, 0xf3, 0xd6, 0x8b, 0x3d, 0x39, 0x4d,
	0x9b, 0xb4, 0x80, 0x90, 0x2f, 0x11, 0x81, 0x36, 0xf1, 0x96, 0x05, 0x4e, 0xc4, 0x62, 0xcf, 0x87,
	0xe1, 0x25, 0xce, 0x5c, 0x4d, 0x3a, 0x90, 0x1a, 0x9a, 0x29, 0xc8, 0x6f, 0xa1, 0x67, 0xa9, 0xf9,
	0x32, 0xdc, 0xbd, 0x71, 0x13, 0xee, 0x67, 0xe0, 0x05, 0x1b, 0xde, 0x11, 0x9a, 0xf4, 0x89, 0x54,
	0x8f, 0xb9, 0xd6, 0x96, 0x4a, 0xf2, 0x53, 0x74, 0x92, 0xae, 0x4b, 0xc2, 0xd0, 0x77, 0x8a, 0xc3,
	0xb3, 0xc1, 0x17, 0x3e, 0x95, 0x7a, 0x3b, 0x0c, 0xfd, 0x8b, 0xc2, 0x1c, 0xfd, 0x14, 0x75, 0xe3,
	0x24, 0x0c, 0x98, 0xb3, 0xbc, 0x0d, 0xf8, 0x75, 0x8e, 0xb8, 0x79, 0x87, 0x83, 0x63, 0x81, 0x91,
	0x9f, 0xa0, 0x41, 0x4e, 0x7f, 0xbb, 0xd9, 0x06, 0x2c, 0x16, 0xe5, 0xdc, 0xa4, 0x38, 0xe3, 0x95,
	0xf8, 0xe8, 0x5f, 0xaa, 0x68, 0xf8, 0x40, 0xf3, 0xfb, 0xff, 0xb0, 0xde, 0x0b, 0xeb, 0x6f, 0xa0,
	0x74, 0xb9, 0xe3, 0x46, 0xbb, 0x30, 0xca, 0xbd, 0x12, 0xb1, 0x7d, 0x2c, 0xb5, 0x0a, 0x28, 0x53,
	0xa7, 0x46, 0x7f, 0x5e, 0x45, 0xdd, 0xd2, 0x34, 0xf8, 0xa0, 0x91, 0xfd, 0x65, 0xd4, 0xbe, 0x61,
	0x2c, 0x70, 0x62, 0x16, 0xc4, 0x2c, 0x96, 0x21, 0x45, 0x00, 0x59, 0x1c, 0x21, 0x9f, 0xa0, 0xce,
	0x9a, 0xbd, 0x73, 0xdc, 0x60, 0xc9, 0xe2, 0x24, 0x7a, 0x27, 0x03, 0xd8, 0x5e, 0xb3, 0x77, 0x8a,
	0x84, 0xc8, 0x53, 0x74, 0x94, 0x44, 0x60, 0x20, 0x83, 0x24, 0x25, 0xf2, 0x12, 0x0d, 0xa1, 0x87,
	0xdc, 0x31, 0x77, 0x1f, 0x06, 0xf9, 0xcd, 0x8a, 0xd0, 0x0c, 0x98, 0xbf, 0xbe, 0xe6, 0x9a, 0x2c,
	0xfc, 0x27, 0xe8, 0x78, 0xe9, 0x06, 0x49, 0xe4, 0xed, 0x65, 0x40, 0x52, 0x91, 0x7c, 0x86, 0x7a,
	0xec, 0xdb, 0x24, 0x72, 0x9d, 0xec, 0x31, 0xa3, 0xc9, 0x0d, 0xba, 0x1c, 0x4d, 0x9f, 0x30, 0x46,
	0x3f, 0xaf, 0xa2, 0x6e, 0x69, 0xea, 0xfd, 0x9f, 0x0d, 0xd5, 0x08, 0x75, 0xd7, 0x3e, 0x63, 0x89,
	0x13, 0xae, 0xf9, 0xf0, 0x95, 0x01, 0x6b, 0x73, 0xd0, 0x5c, 0xc3, 0x24, 0x25, 0x9f, 0x23, 0xbc,
	0x73, 0xe3, 0x1b, 0x30, 0x49, 0xb6, 0xcc, 0xb9, 0xf3, 0xfc, 0x55, 0x1a, 0x36, 0xc0, 0xcd, 0xb5,
	0xbd, 0x65, 0xd7, 0x9e, 0xbf, 0x1a, 0xfd, 0x7b, 0x15, 0x75, 0x4b, 0x93, 0xfe, 0x83, 0x86, 0xed,
	0x2b, 0x34, 0x8c, 0x6f, 0xf7, 0x2c, 0xf2, 0xc2, 0xc8, 0x29, 0x18, 0x8a, 0xf0, 0x91, 0x54, 0x35,
	0x79, 0x6f, 0x9c, 0xeb, 0xdf, 0x1b, 0xe7, 0xc6, 0x77, 0xc5, 0xf9, 0xa8, 0x14, 0xe7, 0x2f, 0x11,
	0x89, 0x6f, 0x03, 0x71, 0x68, 0x01, 0x7e, 0x2f, 0xf1, 0xde, 0x32, 0x19, 0xbc, 0x41, 0xaa, 0xb1,
	0x52, 0x05, 0x3c, 0x6f, 0xf3, 0x33, 0xd2, 0xce, 0xdd, 0x78, 0x4b, 0x19, 0xbc, 0x16, 0x20, 0x0b,
	0x00, 0xc8, 0xaf, 0xa2, 0xc7, 0x5c, 0x7d, 0xb8, 0x6d, 0x2d, 0x71, 0x6f, 0xa0, 0x2b, 0xef, 0xdb,
	0xe8, 0x6f, 0x2b, 0xe8, 0xd9, 0x7b, 0x8e, 0x41, 0x3f, 0x28, 0xe8, 0x8f, 0x51, 0xc3, 0xbf, 0x5d,
	0xde, 0xa4, 0x8f, 0x4a, 0x42, 0x00, 0xf4, 0x4d, 0xe4, 0xbe, 0x4d, 0x3b, 0xa3, 0x10, 0xc8, 0xe7,
	0x62, 0x18, 0xf3, 0x49, 0x1a, 0x78, 0xbb, 0x37, 0x3e, 0x93, 0x31, 0xed, 0xa5, 0xb0, 0xc1, 0x51,
	0x30, 0x0c, 0xdc, 0xe4, 0x36, 0x72, 0x7d, 0x27, 0x4e, 0x98, 0xeb, 0x27, 0x5b, 0x19, 0xda, 0x9e,
	0x84, 0x2d, 0x81, 0x8e, 0xfe, 0xba, 0x82, 0x86, 0x0f, 0x9c, 0xb7, 0xfe, 0xf7, 0xef, 0xe0, 0x0b,
	0x84, 0xc5, 0x71, 0xb1, 0x30, 0x25, 0xc4, 0x2d, 0xf4, 0x39, 0x9e, 0xcf, 0x88, 0xd1, 0x6f, 0xa3,
	0x76, 0xe1, 0x98, 0xf7, 0x43, 0x5c, 0x1f, 0xfd, 0xa2, 0x86, 0xf0, 0xe1, 0x09, 0xef, 0x07, 0xdd,
	0xfb, 0xd7, 0xfc, 0x10, 0xb9, 0x0c, 0x03, 0x6f, 0x99, 0x67, 0xb1, 0x78, 0x04, 0xfa, 0xc9, 0xfb,
	0x0f, 0x91, 0x00, 0xf0, 0x35, 0x69, 0x96, 0xf3, 0x33, 0x65, 0x09, 0x81, 0x39, 0xf4, 0x26, 0x62,
	0x6e, 0xb2, 0x95, 0x39, 0x29, 0xe3, 0xd8, 0x11, 0xa0, 0x48, 0x46, 0x3e, 0xde, 0xdd, 0x9d, 0xbb,
	0x61, 0x3c, 0x4c, 0x71, 0xc2, 0xeb, 0xa4, 0x2e, 0xc7, 0x3b, 0x57, 0xd0, 0x0c, 0x1f, 0xfd, 0x5b,
	0x85, 0xdf, 0x6c, 0xf9, 0x32, 0x43, 0xd4, 0x9f, 0x50, 0x65, 0xec, 0x28, 0xc6, 0xd8, 0x72, 0xce,
	0x74, 0x65, 0x7c, 0x8e, 0x1f, 0xc1, 0xc3, 0x66, 0x11, 0xbc, 0x54, 0x71, 0xe5, 0xc0, 0x90, 0x2a,
	0x96, 0x85, 0xab, 0xf0, 0xf4, 0x58, 0x04, 0x4d, 0xe3, 0x1b, 0x15, 0xd7, 0xca, 0xe8, 0xd8, 0xbc,
	0xb8, 0x50, 0x29, 0xae, 0x97, 0x49, 0x67, 0xa6, 0x3e, 0xc1, 0x8d, 0x32, 0xe9, 0x8c, 0xaa, 0x2a,
	0x3c, 0x68, 0x0f, 0x50, 0x37, 0x07, 0xa9, 0x3a, 0xc1, 0xc7, 0x65, 0x46, 0x4b, 0xd3, 0xaf, 0x54,
	0x8a, 0x9b, 0xe5, 0xd5, 0xd7, 0x73, 0xcd, 0x56, 0x71, 0x6b, 0xf4, 0xcf, 0x15, 0x34, 0xb8, 0x77,
	0xce, 0xfe, 0xa0, 0x6d, 0xf0, 0x53, 0xd4, 0x15, 0x27, 0xf3, 0xf4, 0x84, 0x20, 0x77, 0x86, 0x83,
	0xe9, 0x09, 0xe1, 0x0b, 0x84, 0xd3, 0x0a, 0xf4, 0x7c, 0xff, 0x96, 0x53, 0x89, 0x8d, 0x49, 0x2b,
	0x53, 0x93, 0x30, 0x39, 0x45, 0x83, 0x78, 0xcf, 0xdc, 0x1b, 0xe7, 0xce, 0x4b, 0xb6, 0xce, 0x1b,
	0xe6, 0xc6, 0xf2, 0x19, 0x10, 0x72, 0x1d, 0x14, 0xd7, 0x5e, 0xb2, 0x3d, 0xe3, 0xf0, 0xe8, 0xaf,
	0x2a, 0xa8, 0x7f, 0x70, 0xf0, 0xff, 0x9f, 0xbf, 0xb7, 0x4f, 0x51, 0xd7, 0x8d, 0x12, 0x6f, 0xed,
	0x2d, 0x99, 0xe3, 0x87, 0x51, 0x9a, 0x71, 0x9d, 0x14, 0xd4, 0xc3, 0x88, 0xf1, 0xbe, 0xed, 0x05,
	0x37, 0x2c, 0xca, 0xe6, 0x23, 0x97, 0x46, 0x7f, 0x51, 0x41, 0xdd, 0xd2, 0x33, 0xc7, 0x07, 0xf5,
	0xff, 0x70, 0xa0, 0xd4, 0xee, 0x0f, 0x14, 0xe8, 0x2c, 0xfc, 0xdd, 0xd6, 0x5b, 0x16, 0xbb, 0x89,
	0xe7, 0x7b, 0x49, 0x3a, 0xdf, 0xfb, 0x1c, 0xbf, 0xca, 0xe0, 0xd1, 0x3f, 0x4a, 0x5f, 0xf3, 0x67,
	0x99, 0x0f, 0xe9, 0xeb, 0x73, 0xd4, 0xdc, 0xb1, 0xc0, 0x5d, 0xe6, 0x61, 0xce, 0x64, 0x28, 0xec,
	0x88, 0xf9, 0x2c, 0x48, 0x7c, 0x16, 0xc7, 0x0e, 0x0b, 0x56, 0xb7, 0x59, 0x98, 0x71, 0xae, 0x50,
	0x39, 0x0e, 0x67, 0xaa, 0xd8, 0x7d, 0x0b, 0x5d, 0xc0, 0x4d, 0x12, 0x77, 0x79, 0x93, 0x66, 0x4f,
	0x57, 0xa0, 0x8a, 0x00, 0x47, 0x3f, 0xaf, 0xa0, 0x5e, 0xf9, 0x39, 0xeb, 0x43, 0x9f, 0xec, 0xb7,
	0xcc, 0xf7, 0xbd, 0x78, 0x5b, 0x6c, 0x46, 0xf2, 0x64, 0x2f, 0x35, 0x79, 0x37, 0x82, 0x49, 0xe0,
	0x05, 0x6b, 0x16, 0x05, 0xae, 0xef, 0xf8, 0x6c, 0xe3, 0x2e, 0xd3, 0x5d, 0xe8, 0xa5, 0xb0, 0xce,
	0xd1, 0xd1, 0x9f, 0xd5, 0x51, 0xaf, 0xfc, 0xa6, 0x16, 0xce, 0x15, 0x5b, 0x26, 0x5e, 0x57, 0x30,
	0x96, 0xc8, 0x97, 0xa3, 0x48, 0x40, 0x53, 0xc6, 0x92, 0x82, 0x81, 0x17, 0x2c, 0xb7, 0xf2, 0x5d,
	0xa9, 0x34, 0xd0, 0x82, 0xe5, 0x16, 0xb2, 0xf3, 0x8e, 0x4b, 0xf2, 0xad, 0xa9, 0x94, 0xc8, 0xef,
	0xa2, 0x56, 0x7c, 0xe3, 0xc1, 0x43, 0x43, 0x90, 0x7e, 0x8c, 0xf8, 0xe4, 0x7d, 0x2f, 0x8c, 0x5f,
	0x5a, 0x37, 0x5e, 0x60, 0x87, 0x01, 0xa3, 0xcd, 0x58, 0xfe, 0x92, 0xa7, 0x15, 0xf1, 0x12, 0xa7,
	0xf6, 0xa2, 0x45, 0xa5, 0x34, 0xfa, 0xd7, 0x2a, 0x6a, 0xa6, 0xe6, 0xa4, 0x8b, 0x5a, 0xd6, 0xb9,
	0x66, 0x38, 0x17, 0x8a, 0xae, 0xe2, 0x47, 0xa4, 0x87, 0x10, 0x17, 0x4d, 0x5d, 0xbb, 0x82, 0x4e,
	0xdb, 0x41, 0x4d, 0x2e, 0xdb, 0x8a, 0x81, 0xab, 0x99, 0x76, 0x72, 0x69, 0x9d, 0xbf, 0xc6, 0xb5,
	0x6c, 0xf1, 0x44, 0xa1, 0xe7, 0xb8, 0x9e, 0xa9, 0x2f, 0x17, 0x67, 0x2a, 0xc5, 0x8d, 0x4c, 0x4e,
	0x9b, 0x69, 0x6a, 0x3e, 0xa3, 0xea, 0x6b, 0xd1, 0x48, 0xb9, 0xc8, 0x3b, 0xbd, 0x63, 0x8d, 0xc1,
	0x83, 0xa6, 0x7c, 0x91, 0x68, 0xf0, 0x56, 0x2f, 0xc1, 0x56, 0x6e, 0x0a, 0xbd, 0x5e, 0xa2, 0x48,
	0xbe, 0x46, 0x34, 0x64, 0xb3, 0x97, 0x70, 0x3b, 0x83, 0x45, 0xb7, 0x97, 0x70, 0x27, 0x23, 0x86,
	0x76, 0x2f, 0xc1, 0x6e, 0x46, 0xcc, 0x5d, 0x94, 0x68, 0x4f, 0xbe, 0xe0, 0x34, 0xa0, 0xe1, 0x4b,
	0xac, 0x9f, 0xb1, 0x8a, 0x8e, 0x2f, 0x61, 0x9c, 0x11, 0xf0, 0x96, 0x2f, 0xd1, 0xc1, 0xe8, 0x4b,
	0x34, 0x7c, 0xe0, 0x45, 0x7c, 0x61, 0x47, 0x2a, 0xc5, 0x1d, 0x39, 0xfd, 0x8f, 0x0a, 0x6a, 0xa6,
	0xdf, 0xa2, 0x48, 0x1f, 0xb5, 0x95, 0x99, 0xea, 0x5c, 0x1a, 0xe7, 0x86, 0x79, 0x6d, 0x88, 0x3d,
	0x01, 0x40, 0x33, 0xa6, 0x8a, 0x61, 0xe3, 0x4a, 0x6a, 0x60, 0x9b, 0x93, 0x89, 0xae, 0x52, 0x5c,
	0x85, 0xb8, 0x02, 0x30, 0x9e, 0x6b, 0xfa, 0x04, 0xd7, 0xc0, 0x7b, 0x10, 0x95, 0x89, 0xa9, 0xab,
	0xd6, 0x18, 0xd6, 0xd4, 0x09, 0x46, 0x1d, 0xbe, 0x46, 0x55, 0x0d, 0x65, 0xc6, 0x37, 0x67, 0x88,
	0xfa, 0x80, 0xbc, 0x36, 0x2f, 0x8d, 0x99, 0xa3, 0x4c, 0x2e, 0x75, 0x5b, 0xec, 0x90, 0x58, 0x0a,
	0xe2, 0x71, 0xca, 0xb4, 0xd0, 0xe0, 0x4a, 0x8e, 0x32, 0x83, 0xfd, 0x91, 0x57, 0x87, 0x20, 0x02,
	0xd0, 0x82, 0xc0, 0xf0, 0xab, 0xab, 0x86, 0xad, 0xcd, 0x54, 0x43, 0xa1, 0x9a, 0x62, 0x60, 0x94,
	0xda, 0x29, 0xc6, 0x58, 0x53, 0x0d, 0x1b, 0xb7, 0x33, 0x17, 0xb4, 0x85, 0xaa, 0xab, 0x96, 0x85,
	0x3b, 0xa7, 0x7f, 0x5c, 0x41, 0x47, 0xe2, 0x5b, 0x03, 0x58, 0xcf, 0x54, 0xa3, 0x70, 0xd3, 0x43,
	0xd4, 0x07, 0x40, 0x99, 0x18, 0xd4, 0x9c, 0xbd, 0x36, 0xcc, 0x4b, 0x0b, 0x57, 0x20, 0x12, 0x00,
	0x4e, 0xd5, 0x05, 0x84, 0xb9, 0x0a, 0xd9, 0x09, 0x32, 0x97, 0x6a, 0xe9, 0x12, 0x9b, 0x2a, 0x86,
	0x25, 0x4d, 0xf8, 0x5b, 0xf5, 0x0c, 0xe4, 0x50, 0x03, 0xee, 0x4a, 0x5c, 0x6b, 0xa6, 0x1a, 0x13,
	0x15, 0x86, 0xfa, 0xd1, 0xe9, 0x5f, 0x56, 0x51, 0xa7, 0xf8, 0x15, 0x11, 0xbc, 0xd5, 0x15, 0x63,
	0x56, 0xf0, 0xa8, 0x8d, 0x8e, 0x39, 0xa2, 0x4c, 0x71, 0x25, 0x17, 0x20, 0xfe, 0xa9, 0x30, 0xb6,
	0x70, 0x2d, 0x13, 0x26, 0x70, 0xf5, 0x54, 0x50, 0x75, 0xdc, 0xc8, 0x05, 0xa8, 0x85, 0x4c, 0xb0,
	0xf0, 0x71, 0x26, 0x4c, 0x35, 0xdc, 0xcc, 0x05, 0x8a, 0x5b, 0x99, 0x30, 0x53, 0x30, 0xca, 0x84,
	0x39, 0x64, 0x79, 0x26, 0x68, 0xb8, 0x93, 0x09, 0x9a, 0x8d, 0xbb, 0x99, 0xf0, 0x7b, 0x0a, 0xee,
	0x65, 0xc2, 0xb9, 0x89, 0xfb, 0x99, 0xa0, 0x2b, 0x18, 0x67, 0xc2, 0x85, 0x8e, 0x07, 0x99, 0x40,
	0x2f, 0x31, 0xc9, 0x04, 0x4b, 0xc1, 0xc3, 0x5c, 0xb8, 0xc2, 0x8f, 0x33, 0xe1, 0x4a, 0xc3, 0x4f,
	0x32, 0xe1, 0x9b, 0x39, 0x7e, 0x7a, 0xfa, 0x37, 0x55, 0xd4, 0x4c, 0x5f, 0x97, 0x43, 0xf0, 0xa8,
	0x32, 0x56, 0xcb, 0xdb, 0xc9, 0x91, 0xc9, 0xb5, 0x42, 0xa7, 0xce, 0x5c, 0xd3, 0x75, 0x5c, 0x21,
	0xcf, 0xd0, 0xb0, 0x00, 0x2e, 0xcc, 0x4b, 0xc3, 0x56, 0x34, 0x43, 0x7c, 0x2f, 0xe1, 0x0a, 0x55,
	0x07, 0xdb, 0xd9, 0x1c, 0xd7, 0x4a, 0xd0, 0xb5, 0x69, 0x4e, 0xc4, 0xd6, 0x66, 0xd0, 0x84, 0x9a,
	0xd7, 0xb8, 0x41, 0x9e, 0xa3, 0xa7, 0x1c, 0x9a, 0x2b, 0xfa, 0x54, 0x83, 0x1b, 0xd5, 0x66, 0x73,
	0x7b, 0x6a, 0x9a, 0x90, 0xdb, 0xe9, 0xd5, 0x40, 0xa7, 0x83, 0xd2, 0xb2, 0xcd, 0x4b, 0xc8, 0xf2,
	0x1e, 0x42, 0x42, 0x71, 0xb9, 0x50, 0x0c, 0xd1, 0x81, 0x84, 0x5b, 0x54, 0x99, 0x99, 0xc6, 0x99,
	0x49, 0x0d, 0x91, 0xe5, 0x1c, 0x9c, 0x19, 0xe6, 0x42, 0x75, 0xa6, 0x26, 0x55, 0x2d, 0x1b, 0xa3,
	0xcc, 0x56, 0xc0, 0xd4, 0x1c, 0x9f, 0xe3, 0x76, 0xe6, 0x18, 0x5c, 0x09, 0xbc, 0xc3, 0x9d, 0x32,
	0x64, 0xd2, 0x31, 0xee, 0x66, 0x90, 0xad, 0xa9, 0xdc, 0x1f, 0xdc, 0x3b, 0xfd, 0x93, 0x0a, 0x6a,
	0x65, 0x1f, 0x48, 0xc1, 0x40, 0xd1, 0xb5, 0x59, 0xb1, 0x2a, 0x3a, 0xa8, 0x29, 0x20, 0x7d, 0x26,
	0x9a, 0xb3, 0x94, 0x0c, 0x51, 0x0c, 0x52, 0x82, 0x62, 0xc8, 0x24, 0x63, 0x86, 0xeb, 0x05, 0xc9,
	0xc0, 0x8d, 0x82, 0xa4, 0xe2, 0xa3, 0x5c, 0x1a, 0xcf, 0xf0, 0x71, 0x41, 0x82, 0x50, 0xe4, 0x92,
	0x8a, 0x5b, 0xa7, 0x7f, 0x57, 0x45, 0xcd, 0xac, 0x40, 0x9e, 0xa0, 0x81, 0x48, 0xfa, 0xb9, 0x69,
	0x5a, 0xd0, 0x1c, 0x60, 0xeb, 0x1e, 0x41, 0x21, 0x0b, 0xd8, 0x5c, 0x2c, 0x4c, 0x43, 0x7c, 0x0e,
	0x13, 0xf5, 0x70, 0xad, 0xd0, 0x2b, 0xcd, 0x9a, 0xe3, 0x6a, 0x66, 0xa3, 0xea, 0x1c, 0xa8, 0xc1,
	0x0e, 0x88, 0x2c, 0xd7, 0xb2, 0x6e, 0x25, 0x64, 0xc3, 0x5c, 0x80, 0x45, 0x23, 0x5b, 0x32, 0x33,
	0xcf, 0x74, 0x4d, 0x1e, 0xcc, 0x45, 0xfa, 0xcb, 0xdd, 0xc4, 0xc7, 0x99, 0x8d, 0x49, 0xc7, 0xb0,
	0xa8, 0x99, 0xd1, 0x28, 0x67, 0xaf, 0x2d, 0x4b, 0xd1, 0x71, 0x0b, 0x4a, 0x5f, 0x78, 0x07, 0x2d,
	0xc8, 0xd6, 0x14, 0x1d, 0xa3, 0xdc, 0x41, 0xaa, 0x8c, 0x4d, 0x43, 0x1b, 0xe3, 0x36, 0xb4, 0x41,
	0x59, 0xc3, 0xea, 0x85, 0xd8, 0x3c, 0x51, 0x5d, 0xc6, 0x54, 0xa5, 0x46, 0xfa, 0xb9, 0x4b, 0x14,
	0x0f, 0xd5, 0x16, 0x26, 0x9d, 0x00, 0x53, 0x2f, 0x73, 0xc0, 0x7a, 0xad, 0x5f, 0x29, 0x06, 0xee,
	0xc3, 0x70, 0x90, 0x4d, 0x64, 0xa2, 0x52, 0x19, 0x11, 0x7c, 0xfa, 0xf7, 0x55, 0xd4, 0xca, 0x3e,
	0x59, 0x41, 0x1c, 0xc7, 0xba, 0x62, 0x59, 0x86, 0xb2, 0x28, 0x16, 0xcc, 0x53, 0x44, 0x72, 0x58,
	0x2c, 0x55, 0xa9, 0xa8, 0x99, 0x1c, 0x3f, 0x53, 0xe8, 0x99, 0xe8, 0xb7, 0x55, 0xb8, 0xb5, 0x92,
	0x62, 0x22, 0x1e, 0x7e, 0x0a, 0x24, 0xba, 0x4a, 0xb5, 0x31, 0xae, 0x83, 0xef, 0x39, 0x3a, 0xa1,
	0x97, 0x1a, 0x3c, 0xfd, 0x94, 0xdc, 0x98, 0x42, 0xd9, 0xa8, 0x14, 0x1f, 0x95, 0x59, 0x17, 0xa6,
	0x71, 0x8e, 0x8f, 0xcb, 0xa6, 0x17, 0x8a, 0xae, 0x4c, 0x34, 0xc8, 0x95, 0xd2, 0xc5, 0xa8, 0x62,
	0xc0, 0x98, 0x69, 0x95, 0xef, 0xc3, 0x32, 0xe9, 0x58, 0xa5, 0x26, 0x15, 0xb3, 0x3b, 0xc7, 0xaf,
	0x15, 0xaa, 0x8b, 0xd2, 0x39, 0x84, 0xa9, 0x66, 0x52, 0xdc, 0x29, 0x73, 0x5f, 0x6b, 0xdf, 0xc0,
	0xed, 0x75, 0x4f, 0xff, 0xb3, 0x8a, 0x1a, 0xfc, 0x8b, 0x1e, 0xdf, 0x21, 0xf5, 0x4a, 0xd5, 0x0b,
	0x01, 0x84, 0x3d, 0xe4, 0x90, 0x69, 0xc0, 0x41, 0x26, 0x13, 0xed, 0x6b, 0x53, 0xa6, 0xa0, 0x10,
	0xe7, 0x54, 0x55, 0x65, 0x0a, 0x72, 0x60, 0x6a, 0x5e, 0x52, 0x71, 0x96, 0x91, 0x32, 0x1c, 0x84,
	0x1a, 0xf9, 0x7a, 0x4b, 0xfb, 0x1a, 0x1f, 0xe5, 0xeb, 0x2d, 0xf5, 0x4a, 0x35, 0x64, 0xf2, 0x71,
	0x40, 0x7c, 0xf3, 0x6d, 0xe6, 0x04, 0x86, 0x66, 0xc0, 0x98, 0xcc, 0x1d, 0x50, 0x61, 0x3c, 0x42,
	0x6e, 0x0a, 0x7b, 0x9d, 0x33, 0xb4, 0x73, 0xc4, 0xbe, 0x56, 0xf5, 0x2b, 0x55, 0x7c, 0x67, 0x4d,
	0x9d, 0xd4, 0x28, 0x8c, 0x6e, 0xdc, 0xcd, 0x31, 0xf0, 0x93, 0x63, 0xbd, 0xfc, 0xee, 0xa7, 0xda,
	0x94, 0x43, 0xfd, 0x1c, 0xb2, 0xb4, 0xaf, 0x39, 0x84, 0x79, 0xca, 0xe6, 0x2e, 0x73, 0x70, 0x90,
	0xd3, 0x71, 0xb7, 0x01, 0x23, 0x39, 0x06, 0x9e, 0x73, 0x6c, 0x58, 0x72, 0xce, 0xb0, 0x5f, 0xe3,
	0xc7, 0xaf, 0x34, 0xd4, 0x9c, 0xba, 0x4b, 0x66, 0x87, 0x3b, 0x46, 0x7e, 0x07, 0xe6, 0x78, 0x62,
	0x5c, 0x8c, 0xc9, 0xb3, 0xe2, 0x7f, 0x11, 0x14, 0xfe, 0xd3, 0xe7, 0xf9, 0xc9, 0x7d, 0x85, 0xf8,
	0x7f, 0x95, 0xd1, 0xa3, 0xb3, 0x8f, 0xbe, 0x79, 0xe6, 0x05, 0x09, 0x3f, 0x67, 0x7f, 0xb5, 0x7f,
	0xf3, 0x55, 0x6a, 0xe8, 0xee, 0xbd, 0x37, 0x47, 0xfc, 0x7f, 0x88, 0x7e, 0xfd, 0xbf, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xf6, 0xb9, 0x34, 0xde, 0x5a, 0x24, 0x00, 0x00,
}
