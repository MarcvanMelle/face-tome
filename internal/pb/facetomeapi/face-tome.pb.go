// Code generated by protoc-gen-go. DO NOT EDIT.
// source: face-tome.proto

/*
Package facetomeapi is a generated protocol buffer package.

It is generated from these files:
	face-tome.proto

It has these top-level messages:
	GetNPCRequest
	GetNPCResponse
	NPC
	Stats
	Skill
	Class
	Race
	HillDwarfTraits
	MountainDwarfTraits
	HighElfTraits
	WoodElfTraits
	DrowElfTraits
	LightFootHalflingTraits
	StoutHalflingTraits
	HumanTraits
	DragonbornTraits
	ForestGnomeTraits
	RockGnomeTraits
	HalfElfTraits
	HalfOrcTraits
	TieflingTraits
	PhysicalTraits
	PsychologicalTraits
*/
package facetomeapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NPC_Alignment int32

const (
	NPC_ALIGN_LG NPC_Alignment = 0
	NPC_ALIGN_LN NPC_Alignment = 1
	NPC_ALIGN_LE NPC_Alignment = 2
	NPC_ALIGN_NG NPC_Alignment = 3
	NPC_ALIGN_NN NPC_Alignment = 4
	NPC_ALIGN_NE NPC_Alignment = 5
	NPC_ALIGN_CG NPC_Alignment = 6
	NPC_ALIGN_CN NPC_Alignment = 7
	NPC_ALIGN_CE NPC_Alignment = 8
)

var NPC_Alignment_name = map[int32]string{
	0: "ALIGN_LG",
	1: "ALIGN_LN",
	2: "ALIGN_LE",
	3: "ALIGN_NG",
	4: "ALIGN_NN",
	5: "ALIGN_NE",
	6: "ALIGN_CG",
	7: "ALIGN_CN",
	8: "ALIGN_CE",
}
var NPC_Alignment_value = map[string]int32{
	"ALIGN_LG": 0,
	"ALIGN_LN": 1,
	"ALIGN_LE": 2,
	"ALIGN_NG": 3,
	"ALIGN_NN": 4,
	"ALIGN_NE": 5,
	"ALIGN_CG": 6,
	"ALIGN_CN": 7,
	"ALIGN_CE": 8,
}

func (x NPC_Alignment) String() string {
	return proto.EnumName(NPC_Alignment_name, int32(x))
}
func (NPC_Alignment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type NPC_Language int32

const (
	NPC_LANG_COMMON      NPC_Language = 0
	NPC_LANG_DWARVISH    NPC_Language = 1
	NPC_LANG_ELVISH      NPC_Language = 2
	NPC_LANG_GIANT       NPC_Language = 3
	NPC_LANG_GNOMISH     NPC_Language = 4
	NPC_LANG_GOBLIN      NPC_Language = 5
	NPC_LANG_HALFLING    NPC_Language = 6
	NPC_LANG_ORCISH      NPC_Language = 7
	NPC_LANG_ABYSSAL     NPC_Language = 8
	NPC_LANG_CELESTIAL   NPC_Language = 9
	NPC_LANG_DRACONIC    NPC_Language = 10
	NPC_LANG_DEEP        NPC_Language = 11
	NPC_LANG_INFERNAL    NPC_Language = 12
	NPC_LANG_PRIMORDIAL  NPC_Language = 13
	NPC_LANG_SYLVAN      NPC_Language = 14
	NPC_LANG_UNDERCOMMON NPC_Language = 15
)

var NPC_Language_name = map[int32]string{
	0:  "LANG_COMMON",
	1:  "LANG_DWARVISH",
	2:  "LANG_ELVISH",
	3:  "LANG_GIANT",
	4:  "LANG_GNOMISH",
	5:  "LANG_GOBLIN",
	6:  "LANG_HALFLING",
	7:  "LANG_ORCISH",
	8:  "LANG_ABYSSAL",
	9:  "LANG_CELESTIAL",
	10: "LANG_DRACONIC",
	11: "LANG_DEEP",
	12: "LANG_INFERNAL",
	13: "LANG_PRIMORDIAL",
	14: "LANG_SYLVAN",
	15: "LANG_UNDERCOMMON",
}
var NPC_Language_value = map[string]int32{
	"LANG_COMMON":      0,
	"LANG_DWARVISH":    1,
	"LANG_ELVISH":      2,
	"LANG_GIANT":       3,
	"LANG_GNOMISH":     4,
	"LANG_GOBLIN":      5,
	"LANG_HALFLING":    6,
	"LANG_ORCISH":      7,
	"LANG_ABYSSAL":     8,
	"LANG_CELESTIAL":   9,
	"LANG_DRACONIC":    10,
	"LANG_DEEP":        11,
	"LANG_INFERNAL":    12,
	"LANG_PRIMORDIAL":  13,
	"LANG_SYLVAN":      14,
	"LANG_UNDERCOMMON": 15,
}

func (x NPC_Language) String() string {
	return proto.EnumName(NPC_Language_name, int32(x))
}
func (NPC_Language) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type NPC_Gender int32

const (
	NPC_GEN_UNKNOWN     NPC_Gender = 0
	NPC_GEN_ADNROGYNOUS NPC_Gender = 1
	NPC_GEN_FEMALE      NPC_Gender = 2
	NPC_GEN_MALE        NPC_Gender = 3
	NPC_GEN_TRANSFEMALE NPC_Gender = 4
	NPC_GEN_TRANSMALE   NPC_Gender = 5
	NPC_GEN_UNGENDERED  NPC_Gender = 6
)

var NPC_Gender_name = map[int32]string{
	0: "GEN_UNKNOWN",
	1: "GEN_ADNROGYNOUS",
	2: "GEN_FEMALE",
	3: "GEN_MALE",
	4: "GEN_TRANSFEMALE",
	5: "GEN_TRANSMALE",
	6: "GEN_UNGENDERED",
}
var NPC_Gender_value = map[string]int32{
	"GEN_UNKNOWN":     0,
	"GEN_ADNROGYNOUS": 1,
	"GEN_FEMALE":      2,
	"GEN_MALE":        3,
	"GEN_TRANSFEMALE": 4,
	"GEN_TRANSMALE":   5,
	"GEN_UNGENDERED":  6,
}

func (x NPC_Gender) String() string {
	return proto.EnumName(NPC_Gender_name, int32(x))
}
func (NPC_Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 2} }

type Skill_SkillName int32

const (
	Skill_SKILL_ATHLETICS       Skill_SkillName = 0
	Skill_SKILL_ACROBATICS      Skill_SkillName = 1
	Skill_SKILL_SLEIGHT         Skill_SkillName = 2
	Skill_SKILL_STEALTH         Skill_SkillName = 3
	Skill_SKILL_ARCANA          Skill_SkillName = 4
	Skill_SKILL_HISTORY         Skill_SkillName = 5
	Skill_SKILL_INVESTIGATION   Skill_SkillName = 6
	Skill_SKILL_NATURE          Skill_SkillName = 7
	Skill_SKILL_RELIGION        Skill_SkillName = 8
	Skill_SKILL_ANIMAL_HANDLING Skill_SkillName = 9
	Skill_SKILL_INSIGHT         Skill_SkillName = 10
	Skill_SKILL_MEDICINE        Skill_SkillName = 11
	Skill_SKILL_PERCEPTION      Skill_SkillName = 12
	Skill_SKILL_SURVIVAL        Skill_SkillName = 13
	Skill_SKILL_DECEPTION       Skill_SkillName = 14
	Skill_SKILL_INTIMIDATION    Skill_SkillName = 15
	Skill_SKILL_PERFORMANCE     Skill_SkillName = 16
	Skill_SKILL_PERSUASION      Skill_SkillName = 17
)

var Skill_SkillName_name = map[int32]string{
	0:  "SKILL_ATHLETICS",
	1:  "SKILL_ACROBATICS",
	2:  "SKILL_SLEIGHT",
	3:  "SKILL_STEALTH",
	4:  "SKILL_ARCANA",
	5:  "SKILL_HISTORY",
	6:  "SKILL_INVESTIGATION",
	7:  "SKILL_NATURE",
	8:  "SKILL_RELIGION",
	9:  "SKILL_ANIMAL_HANDLING",
	10: "SKILL_INSIGHT",
	11: "SKILL_MEDICINE",
	12: "SKILL_PERCEPTION",
	13: "SKILL_SURVIVAL",
	14: "SKILL_DECEPTION",
	15: "SKILL_INTIMIDATION",
	16: "SKILL_PERFORMANCE",
	17: "SKILL_PERSUASION",
}
var Skill_SkillName_value = map[string]int32{
	"SKILL_ATHLETICS":       0,
	"SKILL_ACROBATICS":      1,
	"SKILL_SLEIGHT":         2,
	"SKILL_STEALTH":         3,
	"SKILL_ARCANA":          4,
	"SKILL_HISTORY":         5,
	"SKILL_INVESTIGATION":   6,
	"SKILL_NATURE":          7,
	"SKILL_RELIGION":        8,
	"SKILL_ANIMAL_HANDLING": 9,
	"SKILL_INSIGHT":         10,
	"SKILL_MEDICINE":        11,
	"SKILL_PERCEPTION":      12,
	"SKILL_SURVIVAL":        13,
	"SKILL_DECEPTION":       14,
	"SKILL_INTIMIDATION":    15,
	"SKILL_PERFORMANCE":     16,
	"SKILL_PERSUASION":      17,
}

func (x Skill_SkillName) String() string {
	return proto.EnumName(Skill_SkillName_name, int32(x))
}
func (Skill_SkillName) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Class_ClassName int32

const (
	Class_CLASSNAME_BARBARIAN Class_ClassName = 0
	Class_CLASSNAME_BARD      Class_ClassName = 1
	Class_CLASSNAME_CLERIC    Class_ClassName = 2
	Class_CLASSNAME_DRUID     Class_ClassName = 3
	Class_CLASSNAME_MONK      Class_ClassName = 4
	Class_CLASSNAME_PALADIN   Class_ClassName = 5
	Class_CLASSNAME_RANGER    Class_ClassName = 6
	Class_CLASSNAME_SORCEROR  Class_ClassName = 7
	Class_CLASSNAME_WARLOCK   Class_ClassName = 8
	Class_CLASSNAME_WARRIOR   Class_ClassName = 9
	Class_CLASSNAME_WIZARD    Class_ClassName = 10
)

var Class_ClassName_name = map[int32]string{
	0:  "CLASSNAME_BARBARIAN",
	1:  "CLASSNAME_BARD",
	2:  "CLASSNAME_CLERIC",
	3:  "CLASSNAME_DRUID",
	4:  "CLASSNAME_MONK",
	5:  "CLASSNAME_PALADIN",
	6:  "CLASSNAME_RANGER",
	7:  "CLASSNAME_SORCEROR",
	8:  "CLASSNAME_WARLOCK",
	9:  "CLASSNAME_WARRIOR",
	10: "CLASSNAME_WIZARD",
}
var Class_ClassName_value = map[string]int32{
	"CLASSNAME_BARBARIAN": 0,
	"CLASSNAME_BARD":      1,
	"CLASSNAME_CLERIC":    2,
	"CLASSNAME_DRUID":     3,
	"CLASSNAME_MONK":      4,
	"CLASSNAME_PALADIN":   5,
	"CLASSNAME_RANGER":    6,
	"CLASSNAME_SORCEROR":  7,
	"CLASSNAME_WARLOCK":   8,
	"CLASSNAME_WARRIOR":   9,
	"CLASSNAME_WIZARD":    10,
}

func (x Class_ClassName) String() string {
	return proto.EnumName(Class_ClassName_name, int32(x))
}
func (Class_ClassName) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type Class_Level int32

const (
	Class_LEVEL_ONE       Class_Level = 0
	Class_LEVEL_TWO       Class_Level = 1
	Class_LEVEL_THREE     Class_Level = 2
	Class_LEVEL_FOUR      Class_Level = 3
	Class_LEVEL_FIVE      Class_Level = 4
	Class_LEVEL_SIX       Class_Level = 5
	Class_LEVEL_SEVEN     Class_Level = 6
	Class_LEVEL_EIGHT     Class_Level = 7
	Class_LEVEL_NINE      Class_Level = 8
	Class_LEVEL_TEN       Class_Level = 9
	Class_LEVEL_ELEVEN    Class_Level = 10
	Class_LEVEL_TWELVE    Class_Level = 11
	Class_LEVEL_THIRTEEN  Class_Level = 12
	Class_LEVEL_FOURTEEN  Class_Level = 13
	Class_LEVEL_FIFTEEN   Class_Level = 14
	Class_LEVEL_SIXTEEN   Class_Level = 15
	Class_LEVEL_SEVENTEEN Class_Level = 16
	Class_LEVEL_EIGHTEEN  Class_Level = 17
	Class_LEVEL_NINETEEN  Class_Level = 18
	Class_LEVEL_TWENTY    Class_Level = 19
)

var Class_Level_name = map[int32]string{
	0:  "LEVEL_ONE",
	1:  "LEVEL_TWO",
	2:  "LEVEL_THREE",
	3:  "LEVEL_FOUR",
	4:  "LEVEL_FIVE",
	5:  "LEVEL_SIX",
	6:  "LEVEL_SEVEN",
	7:  "LEVEL_EIGHT",
	8:  "LEVEL_NINE",
	9:  "LEVEL_TEN",
	10: "LEVEL_ELEVEN",
	11: "LEVEL_TWELVE",
	12: "LEVEL_THIRTEEN",
	13: "LEVEL_FOURTEEN",
	14: "LEVEL_FIFTEEN",
	15: "LEVEL_SIXTEEN",
	16: "LEVEL_SEVENTEEN",
	17: "LEVEL_EIGHTEEN",
	18: "LEVEL_NINETEEN",
	19: "LEVEL_TWENTY",
}
var Class_Level_value = map[string]int32{
	"LEVEL_ONE":       0,
	"LEVEL_TWO":       1,
	"LEVEL_THREE":     2,
	"LEVEL_FOUR":      3,
	"LEVEL_FIVE":      4,
	"LEVEL_SIX":       5,
	"LEVEL_SEVEN":     6,
	"LEVEL_EIGHT":     7,
	"LEVEL_NINE":      8,
	"LEVEL_TEN":       9,
	"LEVEL_ELEVEN":    10,
	"LEVEL_TWELVE":    11,
	"LEVEL_THIRTEEN":  12,
	"LEVEL_FOURTEEN":  13,
	"LEVEL_FIFTEEN":   14,
	"LEVEL_SIXTEEN":   15,
	"LEVEL_SEVENTEEN": 16,
	"LEVEL_EIGHTEEN":  17,
	"LEVEL_NINETEEN":  18,
	"LEVEL_TWENTY":    19,
}

func (x Class_Level) String() string {
	return proto.EnumName(Class_Level_name, int32(x))
}
func (Class_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 1} }

type Race_RaceName int32

const (
	Race_RACE_DWARF_HILL        Race_RaceName = 0
	Race_RACE_DWARF_MOUNTAIN    Race_RaceName = 1
	Race_RACE_ELF_HIGH          Race_RaceName = 2
	Race_RACE_ELF_WOOD          Race_RaceName = 3
	Race_RACE_ELF_DROW          Race_RaceName = 4
	Race_RACE_HALFING_LIGHTFOOT Race_RaceName = 5
	Race_RACE_HALFLING_STOUT    Race_RaceName = 6
	Race_RACE_HUMAN             Race_RaceName = 7
	Race_RACE_DRAGONBORN        Race_RaceName = 8
	Race_RACE_GNOME_FOREST      Race_RaceName = 9
	Race_RACE_GNOME_ROCK        Race_RaceName = 10
	Race_RACE_HALF_ELF          Race_RaceName = 11
	Race_RACE_HALF_ORC          Race_RaceName = 12
	Race_RACE_TIEFLING          Race_RaceName = 13
)

var Race_RaceName_name = map[int32]string{
	0:  "RACE_DWARF_HILL",
	1:  "RACE_DWARF_MOUNTAIN",
	2:  "RACE_ELF_HIGH",
	3:  "RACE_ELF_WOOD",
	4:  "RACE_ELF_DROW",
	5:  "RACE_HALFING_LIGHTFOOT",
	6:  "RACE_HALFLING_STOUT",
	7:  "RACE_HUMAN",
	8:  "RACE_DRAGONBORN",
	9:  "RACE_GNOME_FOREST",
	10: "RACE_GNOME_ROCK",
	11: "RACE_HALF_ELF",
	12: "RACE_HALF_ORC",
	13: "RACE_TIEFLING",
}
var Race_RaceName_value = map[string]int32{
	"RACE_DWARF_HILL":        0,
	"RACE_DWARF_MOUNTAIN":    1,
	"RACE_ELF_HIGH":          2,
	"RACE_ELF_WOOD":          3,
	"RACE_ELF_DROW":          4,
	"RACE_HALFING_LIGHTFOOT": 5,
	"RACE_HALFLING_STOUT":    6,
	"RACE_HUMAN":             7,
	"RACE_DRAGONBORN":        8,
	"RACE_GNOME_FOREST":      9,
	"RACE_GNOME_ROCK":        10,
	"RACE_HALF_ELF":          11,
	"RACE_HALF_ORC":          12,
	"RACE_TIEFLING":          13,
}

func (x Race_RaceName) String() string {
	return proto.EnumName(Race_RaceName_name, int32(x))
}
func (Race_RaceName) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type DragonbornTraits_DraconicAncestry int32

const (
	DragonbornTraits_DRAC_ANCS_BLACK  DragonbornTraits_DraconicAncestry = 0
	DragonbornTraits_DRAC_ANCS_BLUE   DragonbornTraits_DraconicAncestry = 1
	DragonbornTraits_DRAC_ANCS_BRASS  DragonbornTraits_DraconicAncestry = 2
	DragonbornTraits_DRAC_ANCS_BRONZE DragonbornTraits_DraconicAncestry = 3
	DragonbornTraits_DRAC_ANCS_COPPER DragonbornTraits_DraconicAncestry = 4
	DragonbornTraits_DRAC_ANCS_GOLD   DragonbornTraits_DraconicAncestry = 5
	DragonbornTraits_DRAC_ANCS_GREEN  DragonbornTraits_DraconicAncestry = 6
	DragonbornTraits_DRAC_ANCS_RED    DragonbornTraits_DraconicAncestry = 7
	DragonbornTraits_DRAC_ANCS_SILVER DragonbornTraits_DraconicAncestry = 8
	DragonbornTraits_DRAC_ANCS_WHITE  DragonbornTraits_DraconicAncestry = 9
)

var DragonbornTraits_DraconicAncestry_name = map[int32]string{
	0: "DRAC_ANCS_BLACK",
	1: "DRAC_ANCS_BLUE",
	2: "DRAC_ANCS_BRASS",
	3: "DRAC_ANCS_BRONZE",
	4: "DRAC_ANCS_COPPER",
	5: "DRAC_ANCS_GOLD",
	6: "DRAC_ANCS_GREEN",
	7: "DRAC_ANCS_RED",
	8: "DRAC_ANCS_SILVER",
	9: "DRAC_ANCS_WHITE",
}
var DragonbornTraits_DraconicAncestry_value = map[string]int32{
	"DRAC_ANCS_BLACK":  0,
	"DRAC_ANCS_BLUE":   1,
	"DRAC_ANCS_BRASS":  2,
	"DRAC_ANCS_BRONZE": 3,
	"DRAC_ANCS_COPPER": 4,
	"DRAC_ANCS_GOLD":   5,
	"DRAC_ANCS_GREEN":  6,
	"DRAC_ANCS_RED":    7,
	"DRAC_ANCS_SILVER": 8,
	"DRAC_ANCS_WHITE":  9,
}

func (x DragonbornTraits_DraconicAncestry) String() string {
	return proto.EnumName(DragonbornTraits_DraconicAncestry_name, int32(x))
}
func (DragonbornTraits_DraconicAncestry) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

type PhysicalTraits_SkinTone int32

const (
	PhysicalTraits_SKIN_PALE         PhysicalTraits_SkinTone = 0
	PhysicalTraits_SKIN_OLIVE        PhysicalTraits_SkinTone = 1
	PhysicalTraits_SKIN_TAN          PhysicalTraits_SkinTone = 2
	PhysicalTraits_SKIN_DUSKY        PhysicalTraits_SkinTone = 3
	PhysicalTraits_SKIN_DARK         PhysicalTraits_SkinTone = 4
	PhysicalTraits_SKIN_UMBER        PhysicalTraits_SkinTone = 5
	PhysicalTraits_SKIN_GREEN        PhysicalTraits_SkinTone = 6
	PhysicalTraits_SKIN_GREY         PhysicalTraits_SkinTone = 7
	PhysicalTraits_SKIN_BLACK_SCALE  PhysicalTraits_SkinTone = 8
	PhysicalTraits_SKIN_BLUE_SCALE   PhysicalTraits_SkinTone = 9
	PhysicalTraits_SKIN_BRASS_SCALE  PhysicalTraits_SkinTone = 10
	PhysicalTraits_SKIN_BRONZE_SCALE PhysicalTraits_SkinTone = 11
	PhysicalTraits_SKIN_COPPER_SCALE PhysicalTraits_SkinTone = 12
	PhysicalTraits_SKIN_GOLD_SCALE   PhysicalTraits_SkinTone = 13
	PhysicalTraits_SKIN_GREEN_SCALE  PhysicalTraits_SkinTone = 14
	PhysicalTraits_SKIN_RED_SCALE    PhysicalTraits_SkinTone = 15
	PhysicalTraits_SKIN_SILVER_SCALE PhysicalTraits_SkinTone = 16
	PhysicalTraits_SKIN_WHITE_SCALE  PhysicalTraits_SkinTone = 17
)

var PhysicalTraits_SkinTone_name = map[int32]string{
	0:  "SKIN_PALE",
	1:  "SKIN_OLIVE",
	2:  "SKIN_TAN",
	3:  "SKIN_DUSKY",
	4:  "SKIN_DARK",
	5:  "SKIN_UMBER",
	6:  "SKIN_GREEN",
	7:  "SKIN_GREY",
	8:  "SKIN_BLACK_SCALE",
	9:  "SKIN_BLUE_SCALE",
	10: "SKIN_BRASS_SCALE",
	11: "SKIN_BRONZE_SCALE",
	12: "SKIN_COPPER_SCALE",
	13: "SKIN_GOLD_SCALE",
	14: "SKIN_GREEN_SCALE",
	15: "SKIN_RED_SCALE",
	16: "SKIN_SILVER_SCALE",
	17: "SKIN_WHITE_SCALE",
}
var PhysicalTraits_SkinTone_value = map[string]int32{
	"SKIN_PALE":         0,
	"SKIN_OLIVE":        1,
	"SKIN_TAN":          2,
	"SKIN_DUSKY":        3,
	"SKIN_DARK":         4,
	"SKIN_UMBER":        5,
	"SKIN_GREEN":        6,
	"SKIN_GREY":         7,
	"SKIN_BLACK_SCALE":  8,
	"SKIN_BLUE_SCALE":   9,
	"SKIN_BRASS_SCALE":  10,
	"SKIN_BRONZE_SCALE": 11,
	"SKIN_COPPER_SCALE": 12,
	"SKIN_GOLD_SCALE":   13,
	"SKIN_GREEN_SCALE":  14,
	"SKIN_RED_SCALE":    15,
	"SKIN_SILVER_SCALE": 16,
	"SKIN_WHITE_SCALE":  17,
}

func (x PhysicalTraits_SkinTone) String() string {
	return proto.EnumName(PhysicalTraits_SkinTone_name, int32(x))
}
func (PhysicalTraits_SkinTone) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

type GetNPCRequest struct {
	NpcUuid string `protobuf:"bytes,1,opt,name=npc_uuid,json=npcUuid" json:"npc_uuid,omitempty"`
}

func (m *GetNPCRequest) Reset()                    { *m = GetNPCRequest{} }
func (m *GetNPCRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNPCRequest) ProtoMessage()               {}
func (*GetNPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetNPCRequest) GetNpcUuid() string {
	if m != nil {
		return m.NpcUuid
	}
	return ""
}

type GetNPCResponse struct {
	NpcData *NPC `protobuf:"bytes,1,opt,name=npc_data,json=npcData" json:"npc_data,omitempty"`
}

func (m *GetNPCResponse) Reset()                    { *m = GetNPCResponse{} }
func (m *GetNPCResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNPCResponse) ProtoMessage()               {}
func (*GetNPCResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetNPCResponse) GetNpcData() *NPC {
	if m != nil {
		return m.NpcData
	}
	return nil
}

type NPC struct {
	FirstName           string               `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName            string               `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Age                 int32                `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Alignment           NPC_Alignment        `protobuf:"varint,4,opt,name=alignment,enum=facetome.NPC_Alignment" json:"alignment,omitempty"`
	Speed               int32                `protobuf:"varint,5,opt,name=speed" json:"speed,omitempty"`
	Language            []NPC_Language       `protobuf:"varint,6,rep,packed,name=language,enum=facetome.NPC_Language" json:"language,omitempty"`
	Class               []*Class             `protobuf:"bytes,7,rep,name=class" json:"class,omitempty"`
	Race                *Race                `protobuf:"bytes,8,opt,name=race" json:"race,omitempty"`
	Stats               *Stats               `protobuf:"bytes,9,opt,name=stats" json:"stats,omitempty"`
	Skill               []*Skill             `protobuf:"bytes,10,rep,name=skill" json:"skill,omitempty"`
	PhysicalTraits      *PhysicalTraits      `protobuf:"bytes,11,opt,name=physical_traits,json=physicalTraits" json:"physical_traits,omitempty"`
	PsychologicalTraits *PsychologicalTraits `protobuf:"bytes,12,opt,name=psychological_traits,json=psychologicalTraits" json:"psychological_traits,omitempty"`
	Gender              NPC_Gender           `protobuf:"varint,13,opt,name=gender,enum=facetome.NPC_Gender" json:"gender,omitempty"`
}

func (m *NPC) Reset()                    { *m = NPC{} }
func (m *NPC) String() string            { return proto.CompactTextString(m) }
func (*NPC) ProtoMessage()               {}
func (*NPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NPC) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *NPC) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *NPC) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *NPC) GetAlignment() NPC_Alignment {
	if m != nil {
		return m.Alignment
	}
	return NPC_ALIGN_LG
}

func (m *NPC) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *NPC) GetLanguage() []NPC_Language {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *NPC) GetClass() []*Class {
	if m != nil {
		return m.Class
	}
	return nil
}

func (m *NPC) GetRace() *Race {
	if m != nil {
		return m.Race
	}
	return nil
}

func (m *NPC) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *NPC) GetSkill() []*Skill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *NPC) GetPhysicalTraits() *PhysicalTraits {
	if m != nil {
		return m.PhysicalTraits
	}
	return nil
}

func (m *NPC) GetPsychologicalTraits() *PsychologicalTraits {
	if m != nil {
		return m.PsychologicalTraits
	}
	return nil
}

func (m *NPC) GetGender() NPC_Gender {
	if m != nil {
		return m.Gender
	}
	return NPC_GEN_UNKNOWN
}

type Stats struct {
	Str int32 `protobuf:"varint,1,opt,name=str" json:"str,omitempty"`
	Con int32 `protobuf:"varint,2,opt,name=con" json:"con,omitempty"`
	Dex int32 `protobuf:"varint,3,opt,name=dex" json:"dex,omitempty"`
	Int int32 `protobuf:"varint,4,opt,name=int" json:"int,omitempty"`
	Wis int32 `protobuf:"varint,5,opt,name=wis" json:"wis,omitempty"`
	Cha int32 `protobuf:"varint,6,opt,name=cha" json:"cha,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Stats) GetStr() int32 {
	if m != nil {
		return m.Str
	}
	return 0
}

func (m *Stats) GetCon() int32 {
	if m != nil {
		return m.Con
	}
	return 0
}

func (m *Stats) GetDex() int32 {
	if m != nil {
		return m.Dex
	}
	return 0
}

func (m *Stats) GetInt() int32 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *Stats) GetWis() int32 {
	if m != nil {
		return m.Wis
	}
	return 0
}

func (m *Stats) GetCha() int32 {
	if m != nil {
		return m.Cha
	}
	return 0
}

type Skill struct {
	SkillName   Skill_SkillName `protobuf:"varint,1,opt,name=skill_name,json=skillName,enum=facetome.Skill_SkillName" json:"skill_name,omitempty"`
	Proficiency bool            `protobuf:"varint,2,opt,name=proficiency" json:"proficiency,omitempty"`
	StatMod     string          `protobuf:"bytes,3,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Skill) GetSkillName() Skill_SkillName {
	if m != nil {
		return m.SkillName
	}
	return Skill_SKILL_ATHLETICS
}

func (m *Skill) GetProficiency() bool {
	if m != nil {
		return m.Proficiency
	}
	return false
}

func (m *Skill) GetStatMod() string {
	if m != nil {
		return m.StatMod
	}
	return ""
}

type Class struct {
	Name  Class_ClassName `protobuf:"varint,1,opt,name=name,enum=facetome.Class_ClassName" json:"name,omitempty"`
	Level Class_Level     `protobuf:"varint,2,opt,name=level,enum=facetome.Class_Level" json:"level,omitempty"`
}

func (m *Class) Reset()                    { *m = Class{} }
func (m *Class) String() string            { return proto.CompactTextString(m) }
func (*Class) ProtoMessage()               {}
func (*Class) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Class) GetName() Class_ClassName {
	if m != nil {
		return m.Name
	}
	return Class_CLASSNAME_BARBARIAN
}

func (m *Class) GetLevel() Class_Level {
	if m != nil {
		return m.Level
	}
	return Class_LEVEL_ONE
}

type Race struct {
	Race Race_RaceName `protobuf:"varint,1,opt,name=race,enum=facetome.Race_RaceName" json:"race,omitempty"`
	// Types that are valid to be assigned to RacialTraits:
	//	*Race_HillDwarfTraits
	//	*Race_MountainDwarfTraits
	//	*Race_HighElfTraits
	//	*Race_WoodElfTraits
	//	*Race_DrowElfTraits
	//	*Race_LightFootHalflingTraits
	//	*Race_StoutHalflingTraits
	//	*Race_HumanTraits
	//	*Race_DragonbornTraits
	//	*Race_ForestGnomeTraits
	//	*Race_RockGnomeTraits
	//	*Race_HalfElfTraits
	//	*Race_HalfOrcTraits
	//	*Race_TieflingTraits
	RacialTraits isRace_RacialTraits `protobuf_oneof:"racial_traits"`
}

func (m *Race) Reset()                    { *m = Race{} }
func (m *Race) String() string            { return proto.CompactTextString(m) }
func (*Race) ProtoMessage()               {}
func (*Race) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isRace_RacialTraits interface {
	isRace_RacialTraits()
}

type Race_HillDwarfTraits struct {
	HillDwarfTraits *HillDwarfTraits `protobuf:"bytes,2,opt,name=hill_dwarf_traits,json=hillDwarfTraits,oneof"`
}
type Race_MountainDwarfTraits struct {
	MountainDwarfTraits *MountainDwarfTraits `protobuf:"bytes,3,opt,name=mountain_dwarf_traits,json=mountainDwarfTraits,oneof"`
}
type Race_HighElfTraits struct {
	HighElfTraits *HighElfTraits `protobuf:"bytes,4,opt,name=high_elf_traits,json=highElfTraits,oneof"`
}
type Race_WoodElfTraits struct {
	WoodElfTraits *WoodElfTraits `protobuf:"bytes,5,opt,name=wood_elf_traits,json=woodElfTraits,oneof"`
}
type Race_DrowElfTraits struct {
	DrowElfTraits *DrowElfTraits `protobuf:"bytes,6,opt,name=drow_elf_traits,json=drowElfTraits,oneof"`
}
type Race_LightFootHalflingTraits struct {
	LightFootHalflingTraits *LightFootHalflingTraits `protobuf:"bytes,7,opt,name=light_foot_halfling_traits,json=lightFootHalflingTraits,oneof"`
}
type Race_StoutHalflingTraits struct {
	StoutHalflingTraits *StoutHalflingTraits `protobuf:"bytes,8,opt,name=stout_halfling_traits,json=stoutHalflingTraits,oneof"`
}
type Race_HumanTraits struct {
	HumanTraits *HumanTraits `protobuf:"bytes,9,opt,name=human_traits,json=humanTraits,oneof"`
}
type Race_DragonbornTraits struct {
	DragonbornTraits *DragonbornTraits `protobuf:"bytes,10,opt,name=dragonborn_traits,json=dragonbornTraits,oneof"`
}
type Race_ForestGnomeTraits struct {
	ForestGnomeTraits *ForestGnomeTraits `protobuf:"bytes,11,opt,name=forest_gnome_traits,json=forestGnomeTraits,oneof"`
}
type Race_RockGnomeTraits struct {
	RockGnomeTraits *RockGnomeTraits `protobuf:"bytes,12,opt,name=rock_gnome_traits,json=rockGnomeTraits,oneof"`
}
type Race_HalfElfTraits struct {
	HalfElfTraits *HalfElfTraits `protobuf:"bytes,13,opt,name=half_elf_traits,json=halfElfTraits,oneof"`
}
type Race_HalfOrcTraits struct {
	HalfOrcTraits *HalfOrcTraits `protobuf:"bytes,14,opt,name=half_orc_traits,json=halfOrcTraits,oneof"`
}
type Race_TieflingTraits struct {
	TieflingTraits *TieflingTraits `protobuf:"bytes,15,opt,name=tiefling_traits,json=tieflingTraits,oneof"`
}

func (*Race_HillDwarfTraits) isRace_RacialTraits()         {}
func (*Race_MountainDwarfTraits) isRace_RacialTraits()     {}
func (*Race_HighElfTraits) isRace_RacialTraits()           {}
func (*Race_WoodElfTraits) isRace_RacialTraits()           {}
func (*Race_DrowElfTraits) isRace_RacialTraits()           {}
func (*Race_LightFootHalflingTraits) isRace_RacialTraits() {}
func (*Race_StoutHalflingTraits) isRace_RacialTraits()     {}
func (*Race_HumanTraits) isRace_RacialTraits()             {}
func (*Race_DragonbornTraits) isRace_RacialTraits()        {}
func (*Race_ForestGnomeTraits) isRace_RacialTraits()       {}
func (*Race_RockGnomeTraits) isRace_RacialTraits()         {}
func (*Race_HalfElfTraits) isRace_RacialTraits()           {}
func (*Race_HalfOrcTraits) isRace_RacialTraits()           {}
func (*Race_TieflingTraits) isRace_RacialTraits()          {}

func (m *Race) GetRacialTraits() isRace_RacialTraits {
	if m != nil {
		return m.RacialTraits
	}
	return nil
}

func (m *Race) GetRace() Race_RaceName {
	if m != nil {
		return m.Race
	}
	return Race_RACE_DWARF_HILL
}

func (m *Race) GetHillDwarfTraits() *HillDwarfTraits {
	if x, ok := m.GetRacialTraits().(*Race_HillDwarfTraits); ok {
		return x.HillDwarfTraits
	}
	return nil
}

func (m *Race) GetMountainDwarfTraits() *MountainDwarfTraits {
	if x, ok := m.GetRacialTraits().(*Race_MountainDwarfTraits); ok {
		return x.MountainDwarfTraits
	}
	return nil
}

func (m *Race) GetHighElfTraits() *HighElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_HighElfTraits); ok {
		return x.HighElfTraits
	}
	return nil
}

func (m *Race) GetWoodElfTraits() *WoodElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_WoodElfTraits); ok {
		return x.WoodElfTraits
	}
	return nil
}

func (m *Race) GetDrowElfTraits() *DrowElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_DrowElfTraits); ok {
		return x.DrowElfTraits
	}
	return nil
}

func (m *Race) GetLightFootHalflingTraits() *LightFootHalflingTraits {
	if x, ok := m.GetRacialTraits().(*Race_LightFootHalflingTraits); ok {
		return x.LightFootHalflingTraits
	}
	return nil
}

func (m *Race) GetStoutHalflingTraits() *StoutHalflingTraits {
	if x, ok := m.GetRacialTraits().(*Race_StoutHalflingTraits); ok {
		return x.StoutHalflingTraits
	}
	return nil
}

func (m *Race) GetHumanTraits() *HumanTraits {
	if x, ok := m.GetRacialTraits().(*Race_HumanTraits); ok {
		return x.HumanTraits
	}
	return nil
}

func (m *Race) GetDragonbornTraits() *DragonbornTraits {
	if x, ok := m.GetRacialTraits().(*Race_DragonbornTraits); ok {
		return x.DragonbornTraits
	}
	return nil
}

func (m *Race) GetForestGnomeTraits() *ForestGnomeTraits {
	if x, ok := m.GetRacialTraits().(*Race_ForestGnomeTraits); ok {
		return x.ForestGnomeTraits
	}
	return nil
}

func (m *Race) GetRockGnomeTraits() *RockGnomeTraits {
	if x, ok := m.GetRacialTraits().(*Race_RockGnomeTraits); ok {
		return x.RockGnomeTraits
	}
	return nil
}

func (m *Race) GetHalfElfTraits() *HalfElfTraits {
	if x, ok := m.GetRacialTraits().(*Race_HalfElfTraits); ok {
		return x.HalfElfTraits
	}
	return nil
}

func (m *Race) GetHalfOrcTraits() *HalfOrcTraits {
	if x, ok := m.GetRacialTraits().(*Race_HalfOrcTraits); ok {
		return x.HalfOrcTraits
	}
	return nil
}

func (m *Race) GetTieflingTraits() *TieflingTraits {
	if x, ok := m.GetRacialTraits().(*Race_TieflingTraits); ok {
		return x.TieflingTraits
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Race) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Race_OneofMarshaler, _Race_OneofUnmarshaler, _Race_OneofSizer, []interface{}{
		(*Race_HillDwarfTraits)(nil),
		(*Race_MountainDwarfTraits)(nil),
		(*Race_HighElfTraits)(nil),
		(*Race_WoodElfTraits)(nil),
		(*Race_DrowElfTraits)(nil),
		(*Race_LightFootHalflingTraits)(nil),
		(*Race_StoutHalflingTraits)(nil),
		(*Race_HumanTraits)(nil),
		(*Race_DragonbornTraits)(nil),
		(*Race_ForestGnomeTraits)(nil),
		(*Race_RockGnomeTraits)(nil),
		(*Race_HalfElfTraits)(nil),
		(*Race_HalfOrcTraits)(nil),
		(*Race_TieflingTraits)(nil),
	}
}

func _Race_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Race)
	// racial_traits
	switch x := m.RacialTraits.(type) {
	case *Race_HillDwarfTraits:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HillDwarfTraits); err != nil {
			return err
		}
	case *Race_MountainDwarfTraits:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MountainDwarfTraits); err != nil {
			return err
		}
	case *Race_HighElfTraits:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HighElfTraits); err != nil {
			return err
		}
	case *Race_WoodElfTraits:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WoodElfTraits); err != nil {
			return err
		}
	case *Race_DrowElfTraits:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrowElfTraits); err != nil {
			return err
		}
	case *Race_LightFootHalflingTraits:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LightFootHalflingTraits); err != nil {
			return err
		}
	case *Race_StoutHalflingTraits:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StoutHalflingTraits); err != nil {
			return err
		}
	case *Race_HumanTraits:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanTraits); err != nil {
			return err
		}
	case *Race_DragonbornTraits:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DragonbornTraits); err != nil {
			return err
		}
	case *Race_ForestGnomeTraits:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForestGnomeTraits); err != nil {
			return err
		}
	case *Race_RockGnomeTraits:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RockGnomeTraits); err != nil {
			return err
		}
	case *Race_HalfElfTraits:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HalfElfTraits); err != nil {
			return err
		}
	case *Race_HalfOrcTraits:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HalfOrcTraits); err != nil {
			return err
		}
	case *Race_TieflingTraits:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TieflingTraits); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Race.RacialTraits has unexpected type %T", x)
	}
	return nil
}

func _Race_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Race)
	switch tag {
	case 2: // racial_traits.hill_dwarf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HillDwarfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HillDwarfTraits{msg}
		return true, err
	case 3: // racial_traits.mountain_dwarf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MountainDwarfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_MountainDwarfTraits{msg}
		return true, err
	case 4: // racial_traits.high_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HighElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HighElfTraits{msg}
		return true, err
	case 5: // racial_traits.wood_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WoodElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_WoodElfTraits{msg}
		return true, err
	case 6: // racial_traits.drow_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DrowElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_DrowElfTraits{msg}
		return true, err
	case 7: // racial_traits.light_foot_halfling_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LightFootHalflingTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_LightFootHalflingTraits{msg}
		return true, err
	case 8: // racial_traits.stout_halfling_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StoutHalflingTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_StoutHalflingTraits{msg}
		return true, err
	case 9: // racial_traits.human_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HumanTraits{msg}
		return true, err
	case 10: // racial_traits.dragonborn_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DragonbornTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_DragonbornTraits{msg}
		return true, err
	case 11: // racial_traits.forest_gnome_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForestGnomeTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_ForestGnomeTraits{msg}
		return true, err
	case 12: // racial_traits.rock_gnome_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RockGnomeTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_RockGnomeTraits{msg}
		return true, err
	case 13: // racial_traits.half_elf_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HalfElfTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HalfElfTraits{msg}
		return true, err
	case 14: // racial_traits.half_orc_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HalfOrcTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_HalfOrcTraits{msg}
		return true, err
	case 15: // racial_traits.tiefling_traits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TieflingTraits)
		err := b.DecodeMessage(msg)
		m.RacialTraits = &Race_TieflingTraits{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Race_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Race)
	// racial_traits
	switch x := m.RacialTraits.(type) {
	case *Race_HillDwarfTraits:
		s := proto.Size(x.HillDwarfTraits)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_MountainDwarfTraits:
		s := proto.Size(x.MountainDwarfTraits)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HighElfTraits:
		s := proto.Size(x.HighElfTraits)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_WoodElfTraits:
		s := proto.Size(x.WoodElfTraits)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_DrowElfTraits:
		s := proto.Size(x.DrowElfTraits)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_LightFootHalflingTraits:
		s := proto.Size(x.LightFootHalflingTraits)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_StoutHalflingTraits:
		s := proto.Size(x.StoutHalflingTraits)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HumanTraits:
		s := proto.Size(x.HumanTraits)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_DragonbornTraits:
		s := proto.Size(x.DragonbornTraits)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_ForestGnomeTraits:
		s := proto.Size(x.ForestGnomeTraits)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_RockGnomeTraits:
		s := proto.Size(x.RockGnomeTraits)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HalfElfTraits:
		s := proto.Size(x.HalfElfTraits)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_HalfOrcTraits:
		s := proto.Size(x.HalfOrcTraits)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Race_TieflingTraits:
		s := proto.Size(x.TieflingTraits)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HillDwarfTraits struct {
	StatMod                *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision             bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	DwarvenResilience      bool   `protobuf:"varint,3,opt,name=dwarven_resilience,json=dwarvenResilience" json:"dwarven_resilience,omitempty"`
	DwarvenCombatTraining  bool   `protobuf:"varint,4,opt,name=dwarven_combat_training,json=dwarvenCombatTraining" json:"dwarven_combat_training,omitempty"`
	DwarvenToolProficiency bool   `protobuf:"varint,5,opt,name=dwarven_tool_proficiency,json=dwarvenToolProficiency" json:"dwarven_tool_proficiency,omitempty"`
	StoneCunning           bool   `protobuf:"varint,6,opt,name=stone_cunning,json=stoneCunning" json:"stone_cunning,omitempty"`
	DwarvenToughness       bool   `protobuf:"varint,7,opt,name=dwarven_toughness,json=dwarvenToughness" json:"dwarven_toughness,omitempty"`
}

func (m *HillDwarfTraits) Reset()                    { *m = HillDwarfTraits{} }
func (m *HillDwarfTraits) String() string            { return proto.CompactTextString(m) }
func (*HillDwarfTraits) ProtoMessage()               {}
func (*HillDwarfTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HillDwarfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HillDwarfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenResilience() bool {
	if m != nil {
		return m.DwarvenResilience
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenCombatTraining() bool {
	if m != nil {
		return m.DwarvenCombatTraining
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenToolProficiency() bool {
	if m != nil {
		return m.DwarvenToolProficiency
	}
	return false
}

func (m *HillDwarfTraits) GetStoneCunning() bool {
	if m != nil {
		return m.StoneCunning
	}
	return false
}

func (m *HillDwarfTraits) GetDwarvenToughness() bool {
	if m != nil {
		return m.DwarvenToughness
	}
	return false
}

type MountainDwarfTraits struct {
	StatMod                *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision             bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	DwarvenResilience      bool   `protobuf:"varint,3,opt,name=dwarven_resilience,json=dwarvenResilience" json:"dwarven_resilience,omitempty"`
	DwarvenCombatTraining  bool   `protobuf:"varint,4,opt,name=dwarven_combat_training,json=dwarvenCombatTraining" json:"dwarven_combat_training,omitempty"`
	DwarvenToolProficiency bool   `protobuf:"varint,5,opt,name=dwarven_tool_proficiency,json=dwarvenToolProficiency" json:"dwarven_tool_proficiency,omitempty"`
	StoneCunning           bool   `protobuf:"varint,6,opt,name=stone_cunning,json=stoneCunning" json:"stone_cunning,omitempty"`
	DwarvenArmorTraining   bool   `protobuf:"varint,7,opt,name=dwarven_armor_training,json=dwarvenArmorTraining" json:"dwarven_armor_training,omitempty"`
}

func (m *MountainDwarfTraits) Reset()                    { *m = MountainDwarfTraits{} }
func (m *MountainDwarfTraits) String() string            { return proto.CompactTextString(m) }
func (*MountainDwarfTraits) ProtoMessage()               {}
func (*MountainDwarfTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MountainDwarfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *MountainDwarfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenResilience() bool {
	if m != nil {
		return m.DwarvenResilience
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenCombatTraining() bool {
	if m != nil {
		return m.DwarvenCombatTraining
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenToolProficiency() bool {
	if m != nil {
		return m.DwarvenToolProficiency
	}
	return false
}

func (m *MountainDwarfTraits) GetStoneCunning() bool {
	if m != nil {
		return m.StoneCunning
	}
	return false
}

func (m *MountainDwarfTraits) GetDwarvenArmorTraining() bool {
	if m != nil {
		return m.DwarvenArmorTraining
	}
	return false
}

type HighElfTraits struct {
	StatMod           *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision        bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	KeenSenses        bool   `protobuf:"varint,3,opt,name=keen_senses,json=keenSenses" json:"keen_senses,omitempty"`
	FeyAncestry       bool   `protobuf:"varint,4,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	Trance            bool   `protobuf:"varint,5,opt,name=trance" json:"trance,omitempty"`
	ElfWeaponTraining bool   `protobuf:"varint,6,opt,name=elf_weapon_training,json=elfWeaponTraining" json:"elf_weapon_training,omitempty"`
	Cantrip           bool   `protobuf:"varint,7,opt,name=cantrip" json:"cantrip,omitempty"`
	ExtraLanguage     bool   `protobuf:"varint,8,opt,name=extra_language,json=extraLanguage" json:"extra_language,omitempty"`
}

func (m *HighElfTraits) Reset()                    { *m = HighElfTraits{} }
func (m *HighElfTraits) String() string            { return proto.CompactTextString(m) }
func (*HighElfTraits) ProtoMessage()               {}
func (*HighElfTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HighElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HighElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HighElfTraits) GetKeenSenses() bool {
	if m != nil {
		return m.KeenSenses
	}
	return false
}

func (m *HighElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *HighElfTraits) GetTrance() bool {
	if m != nil {
		return m.Trance
	}
	return false
}

func (m *HighElfTraits) GetElfWeaponTraining() bool {
	if m != nil {
		return m.ElfWeaponTraining
	}
	return false
}

func (m *HighElfTraits) GetCantrip() bool {
	if m != nil {
		return m.Cantrip
	}
	return false
}

func (m *HighElfTraits) GetExtraLanguage() bool {
	if m != nil {
		return m.ExtraLanguage
	}
	return false
}

type WoodElfTraits struct {
	StatMod           *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision        bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	KeenSenses        bool   `protobuf:"varint,3,opt,name=keen_senses,json=keenSenses" json:"keen_senses,omitempty"`
	FeyAncestry       bool   `protobuf:"varint,4,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	Trance            bool   `protobuf:"varint,5,opt,name=trance" json:"trance,omitempty"`
	ElfWeaponTraining bool   `protobuf:"varint,6,opt,name=elf_weapon_training,json=elfWeaponTraining" json:"elf_weapon_training,omitempty"`
	FleetOfFoot       bool   `protobuf:"varint,7,opt,name=fleet_of_foot,json=fleetOfFoot" json:"fleet_of_foot,omitempty"`
	MaskOfTheWild     bool   `protobuf:"varint,8,opt,name=mask_of_the_wild,json=maskOfTheWild" json:"mask_of_the_wild,omitempty"`
}

func (m *WoodElfTraits) Reset()                    { *m = WoodElfTraits{} }
func (m *WoodElfTraits) String() string            { return proto.CompactTextString(m) }
func (*WoodElfTraits) ProtoMessage()               {}
func (*WoodElfTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *WoodElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *WoodElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *WoodElfTraits) GetKeenSenses() bool {
	if m != nil {
		return m.KeenSenses
	}
	return false
}

func (m *WoodElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *WoodElfTraits) GetTrance() bool {
	if m != nil {
		return m.Trance
	}
	return false
}

func (m *WoodElfTraits) GetElfWeaponTraining() bool {
	if m != nil {
		return m.ElfWeaponTraining
	}
	return false
}

func (m *WoodElfTraits) GetFleetOfFoot() bool {
	if m != nil {
		return m.FleetOfFoot
	}
	return false
}

func (m *WoodElfTraits) GetMaskOfTheWild() bool {
	if m != nil {
		return m.MaskOfTheWild
	}
	return false
}

type DrowElfTraits struct {
	StatMod            *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision         bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	SuperiorDarkvision bool   `protobuf:"varint,3,opt,name=superior_darkvision,json=superiorDarkvision" json:"superior_darkvision,omitempty"`
	KeenSenses         bool   `protobuf:"varint,4,opt,name=keen_senses,json=keenSenses" json:"keen_senses,omitempty"`
	FeyAncestry        bool   `protobuf:"varint,5,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	Trance             bool   `protobuf:"varint,6,opt,name=trance" json:"trance,omitempty"`
	SunlightSensitive  bool   `protobuf:"varint,7,opt,name=sunlight_sensitive,json=sunlightSensitive" json:"sunlight_sensitive,omitempty"`
	DrowMagic          bool   `protobuf:"varint,8,opt,name=drow_magic,json=drowMagic" json:"drow_magic,omitempty"`
	DrowWeaponTraining bool   `protobuf:"varint,9,opt,name=drow_weapon_training,json=drowWeaponTraining" json:"drow_weapon_training,omitempty"`
}

func (m *DrowElfTraits) Reset()                    { *m = DrowElfTraits{} }
func (m *DrowElfTraits) String() string            { return proto.CompactTextString(m) }
func (*DrowElfTraits) ProtoMessage()               {}
func (*DrowElfTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DrowElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *DrowElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *DrowElfTraits) GetSuperiorDarkvision() bool {
	if m != nil {
		return m.SuperiorDarkvision
	}
	return false
}

func (m *DrowElfTraits) GetKeenSenses() bool {
	if m != nil {
		return m.KeenSenses
	}
	return false
}

func (m *DrowElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *DrowElfTraits) GetTrance() bool {
	if m != nil {
		return m.Trance
	}
	return false
}

func (m *DrowElfTraits) GetSunlightSensitive() bool {
	if m != nil {
		return m.SunlightSensitive
	}
	return false
}

func (m *DrowElfTraits) GetDrowMagic() bool {
	if m != nil {
		return m.DrowMagic
	}
	return false
}

func (m *DrowElfTraits) GetDrowWeaponTraining() bool {
	if m != nil {
		return m.DrowWeaponTraining
	}
	return false
}

type LightFootHalflingTraits struct {
	StatMod        *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Lucky          bool   `protobuf:"varint,2,opt,name=lucky" json:"lucky,omitempty"`
	Brave          bool   `protobuf:"varint,3,opt,name=brave" json:"brave,omitempty"`
	HalflingNimble bool   `protobuf:"varint,4,opt,name=halfling_nimble,json=halflingNimble" json:"halfling_nimble,omitempty"`
	NaturalStealth bool   `protobuf:"varint,5,opt,name=natural_stealth,json=naturalStealth" json:"natural_stealth,omitempty"`
}

func (m *LightFootHalflingTraits) Reset()                    { *m = LightFootHalflingTraits{} }
func (m *LightFootHalflingTraits) String() string            { return proto.CompactTextString(m) }
func (*LightFootHalflingTraits) ProtoMessage()               {}
func (*LightFootHalflingTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *LightFootHalflingTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *LightFootHalflingTraits) GetLucky() bool {
	if m != nil {
		return m.Lucky
	}
	return false
}

func (m *LightFootHalflingTraits) GetBrave() bool {
	if m != nil {
		return m.Brave
	}
	return false
}

func (m *LightFootHalflingTraits) GetHalflingNimble() bool {
	if m != nil {
		return m.HalflingNimble
	}
	return false
}

func (m *LightFootHalflingTraits) GetNaturalStealth() bool {
	if m != nil {
		return m.NaturalStealth
	}
	return false
}

type StoutHalflingTraits struct {
	StatMod         *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Lucky           bool   `protobuf:"varint,2,opt,name=lucky" json:"lucky,omitempty"`
	Brave           bool   `protobuf:"varint,3,opt,name=brave" json:"brave,omitempty"`
	HalflingNimble  bool   `protobuf:"varint,4,opt,name=halfling_nimble,json=halflingNimble" json:"halfling_nimble,omitempty"`
	StoutResilience bool   `protobuf:"varint,5,opt,name=stout_resilience,json=stoutResilience" json:"stout_resilience,omitempty"`
}

func (m *StoutHalflingTraits) Reset()                    { *m = StoutHalflingTraits{} }
func (m *StoutHalflingTraits) String() string            { return proto.CompactTextString(m) }
func (*StoutHalflingTraits) ProtoMessage()               {}
func (*StoutHalflingTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StoutHalflingTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *StoutHalflingTraits) GetLucky() bool {
	if m != nil {
		return m.Lucky
	}
	return false
}

func (m *StoutHalflingTraits) GetBrave() bool {
	if m != nil {
		return m.Brave
	}
	return false
}

func (m *StoutHalflingTraits) GetHalflingNimble() bool {
	if m != nil {
		return m.HalflingNimble
	}
	return false
}

func (m *StoutHalflingTraits) GetStoutResilience() bool {
	if m != nil {
		return m.StoutResilience
	}
	return false
}

type HumanTraits struct {
	StatMod *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
}

func (m *HumanTraits) Reset()                    { *m = HumanTraits{} }
func (m *HumanTraits) String() string            { return proto.CompactTextString(m) }
func (*HumanTraits) ProtoMessage()               {}
func (*HumanTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *HumanTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

type DragonbornTraits struct {
	StatMod          *Stats                            `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	DraconicAncestry DragonbornTraits_DraconicAncestry `protobuf:"varint,2,opt,name=draconic_ancestry,json=draconicAncestry,enum=facetome.DragonbornTraits_DraconicAncestry" json:"draconic_ancestry,omitempty"`
	BreathWeapon     bool                              `protobuf:"varint,3,opt,name=breath_weapon,json=breathWeapon" json:"breath_weapon,omitempty"`
	DamageResistance bool                              `protobuf:"varint,4,opt,name=damage_resistance,json=damageResistance" json:"damage_resistance,omitempty"`
}

func (m *DragonbornTraits) Reset()                    { *m = DragonbornTraits{} }
func (m *DragonbornTraits) String() string            { return proto.CompactTextString(m) }
func (*DragonbornTraits) ProtoMessage()               {}
func (*DragonbornTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DragonbornTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *DragonbornTraits) GetDraconicAncestry() DragonbornTraits_DraconicAncestry {
	if m != nil {
		return m.DraconicAncestry
	}
	return DragonbornTraits_DRAC_ANCS_BLACK
}

func (m *DragonbornTraits) GetBreathWeapon() bool {
	if m != nil {
		return m.BreathWeapon
	}
	return false
}

func (m *DragonbornTraits) GetDamageResistance() bool {
	if m != nil {
		return m.DamageResistance
	}
	return false
}

type ForestGnomeTraits struct {
	StatMod         *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision      bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	GnomeCunning    bool   `protobuf:"varint,3,opt,name=gnome_cunning,json=gnomeCunning" json:"gnome_cunning,omitempty"`
	NaturalIllusion bool   `protobuf:"varint,4,opt,name=natural_illusion,json=naturalIllusion" json:"natural_illusion,omitempty"`
	SpeakWithBeasts bool   `protobuf:"varint,5,opt,name=speak_with_beasts,json=speakWithBeasts" json:"speak_with_beasts,omitempty"`
}

func (m *ForestGnomeTraits) Reset()                    { *m = ForestGnomeTraits{} }
func (m *ForestGnomeTraits) String() string            { return proto.CompactTextString(m) }
func (*ForestGnomeTraits) ProtoMessage()               {}
func (*ForestGnomeTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ForestGnomeTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *ForestGnomeTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *ForestGnomeTraits) GetGnomeCunning() bool {
	if m != nil {
		return m.GnomeCunning
	}
	return false
}

func (m *ForestGnomeTraits) GetNaturalIllusion() bool {
	if m != nil {
		return m.NaturalIllusion
	}
	return false
}

func (m *ForestGnomeTraits) GetSpeakWithBeasts() bool {
	if m != nil {
		return m.SpeakWithBeasts
	}
	return false
}

type RockGnomeTraits struct {
	StatMod      *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision   bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	GnomeCunning bool   `protobuf:"varint,3,opt,name=gnome_cunning,json=gnomeCunning" json:"gnome_cunning,omitempty"`
	ArtificeLore bool   `protobuf:"varint,4,opt,name=artifice_lore,json=artificeLore" json:"artifice_lore,omitempty"`
	Tinker       bool   `protobuf:"varint,5,opt,name=tinker" json:"tinker,omitempty"`
}

func (m *RockGnomeTraits) Reset()                    { *m = RockGnomeTraits{} }
func (m *RockGnomeTraits) String() string            { return proto.CompactTextString(m) }
func (*RockGnomeTraits) ProtoMessage()               {}
func (*RockGnomeTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RockGnomeTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *RockGnomeTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *RockGnomeTraits) GetGnomeCunning() bool {
	if m != nil {
		return m.GnomeCunning
	}
	return false
}

func (m *RockGnomeTraits) GetArtificeLore() bool {
	if m != nil {
		return m.ArtificeLore
	}
	return false
}

func (m *RockGnomeTraits) GetTinker() bool {
	if m != nil {
		return m.Tinker
	}
	return false
}

type HalfElfTraits struct {
	StatMod         *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision      bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	FeyAncestry     bool   `protobuf:"varint,3,opt,name=fey_ancestry,json=feyAncestry" json:"fey_ancestry,omitempty"`
	SkillVesatility bool   `protobuf:"varint,4,opt,name=skill_vesatility,json=skillVesatility" json:"skill_vesatility,omitempty"`
}

func (m *HalfElfTraits) Reset()                    { *m = HalfElfTraits{} }
func (m *HalfElfTraits) String() string            { return proto.CompactTextString(m) }
func (*HalfElfTraits) ProtoMessage()               {}
func (*HalfElfTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *HalfElfTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HalfElfTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HalfElfTraits) GetFeyAncestry() bool {
	if m != nil {
		return m.FeyAncestry
	}
	return false
}

func (m *HalfElfTraits) GetSkillVesatility() bool {
	if m != nil {
		return m.SkillVesatility
	}
	return false
}

type HalfOrcTraits struct {
	StatMod          *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision       bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	Menacing         bool   `protobuf:"varint,3,opt,name=menacing" json:"menacing,omitempty"`
	RelentlessEndure bool   `protobuf:"varint,4,opt,name=relentless_endure,json=relentlessEndure" json:"relentless_endure,omitempty"`
	SavageAttacks    bool   `protobuf:"varint,5,opt,name=savage_attacks,json=savageAttacks" json:"savage_attacks,omitempty"`
}

func (m *HalfOrcTraits) Reset()                    { *m = HalfOrcTraits{} }
func (m *HalfOrcTraits) String() string            { return proto.CompactTextString(m) }
func (*HalfOrcTraits) ProtoMessage()               {}
func (*HalfOrcTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *HalfOrcTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *HalfOrcTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *HalfOrcTraits) GetMenacing() bool {
	if m != nil {
		return m.Menacing
	}
	return false
}

func (m *HalfOrcTraits) GetRelentlessEndure() bool {
	if m != nil {
		return m.RelentlessEndure
	}
	return false
}

func (m *HalfOrcTraits) GetSavageAttacks() bool {
	if m != nil {
		return m.SavageAttacks
	}
	return false
}

type TieflingTraits struct {
	StatMod           *Stats `protobuf:"bytes,1,opt,name=stat_mod,json=statMod" json:"stat_mod,omitempty"`
	Darkvision        bool   `protobuf:"varint,2,opt,name=darkvision" json:"darkvision,omitempty"`
	HellishResistance bool   `protobuf:"varint,3,opt,name=hellish_resistance,json=hellishResistance" json:"hellish_resistance,omitempty"`
	InfernalLegacy    bool   `protobuf:"varint,4,opt,name=infernal_legacy,json=infernalLegacy" json:"infernal_legacy,omitempty"`
}

func (m *TieflingTraits) Reset()                    { *m = TieflingTraits{} }
func (m *TieflingTraits) String() string            { return proto.CompactTextString(m) }
func (*TieflingTraits) ProtoMessage()               {}
func (*TieflingTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TieflingTraits) GetStatMod() *Stats {
	if m != nil {
		return m.StatMod
	}
	return nil
}

func (m *TieflingTraits) GetDarkvision() bool {
	if m != nil {
		return m.Darkvision
	}
	return false
}

func (m *TieflingTraits) GetHellishResistance() bool {
	if m != nil {
		return m.HellishResistance
	}
	return false
}

func (m *TieflingTraits) GetInfernalLegacy() bool {
	if m != nil {
		return m.InfernalLegacy
	}
	return false
}

type PhysicalTraits struct {
	HeightFeet int32                   `protobuf:"varint,1,opt,name=height_feet,json=heightFeet" json:"height_feet,omitempty"`
	HeightInch int32                   `protobuf:"varint,2,opt,name=height_inch,json=heightInch" json:"height_inch,omitempty"`
	Weight     int32                   `protobuf:"varint,3,opt,name=weight" json:"weight,omitempty"`
	SkinTone   PhysicalTraits_SkinTone `protobuf:"varint,4,opt,name=skin_tone,json=skinTone,enum=facetome.PhysicalTraits_SkinTone" json:"skin_tone,omitempty"`
	Traits     []string                `protobuf:"bytes,5,rep,name=traits" json:"traits,omitempty"`
}

func (m *PhysicalTraits) Reset()                    { *m = PhysicalTraits{} }
func (m *PhysicalTraits) String() string            { return proto.CompactTextString(m) }
func (*PhysicalTraits) ProtoMessage()               {}
func (*PhysicalTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PhysicalTraits) GetHeightFeet() int32 {
	if m != nil {
		return m.HeightFeet
	}
	return 0
}

func (m *PhysicalTraits) GetHeightInch() int32 {
	if m != nil {
		return m.HeightInch
	}
	return 0
}

func (m *PhysicalTraits) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PhysicalTraits) GetSkinTone() PhysicalTraits_SkinTone {
	if m != nil {
		return m.SkinTone
	}
	return PhysicalTraits_SKIN_PALE
}

func (m *PhysicalTraits) GetTraits() []string {
	if m != nil {
		return m.Traits
	}
	return nil
}

type PsychologicalTraits struct {
	Traits []string `protobuf:"bytes,1,rep,name=traits" json:"traits,omitempty"`
}

func (m *PsychologicalTraits) Reset()                    { *m = PsychologicalTraits{} }
func (m *PsychologicalTraits) String() string            { return proto.CompactTextString(m) }
func (*PsychologicalTraits) ProtoMessage()               {}
func (*PsychologicalTraits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PsychologicalTraits) GetTraits() []string {
	if m != nil {
		return m.Traits
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNPCRequest)(nil), "facetome.GetNPCRequest")
	proto.RegisterType((*GetNPCResponse)(nil), "facetome.GetNPCResponse")
	proto.RegisterType((*NPC)(nil), "facetome.NPC")
	proto.RegisterType((*Stats)(nil), "facetome.Stats")
	proto.RegisterType((*Skill)(nil), "facetome.Skill")
	proto.RegisterType((*Class)(nil), "facetome.Class")
	proto.RegisterType((*Race)(nil), "facetome.Race")
	proto.RegisterType((*HillDwarfTraits)(nil), "facetome.HillDwarfTraits")
	proto.RegisterType((*MountainDwarfTraits)(nil), "facetome.MountainDwarfTraits")
	proto.RegisterType((*HighElfTraits)(nil), "facetome.HighElfTraits")
	proto.RegisterType((*WoodElfTraits)(nil), "facetome.WoodElfTraits")
	proto.RegisterType((*DrowElfTraits)(nil), "facetome.DrowElfTraits")
	proto.RegisterType((*LightFootHalflingTraits)(nil), "facetome.LightFootHalflingTraits")
	proto.RegisterType((*StoutHalflingTraits)(nil), "facetome.StoutHalflingTraits")
	proto.RegisterType((*HumanTraits)(nil), "facetome.HumanTraits")
	proto.RegisterType((*DragonbornTraits)(nil), "facetome.DragonbornTraits")
	proto.RegisterType((*ForestGnomeTraits)(nil), "facetome.ForestGnomeTraits")
	proto.RegisterType((*RockGnomeTraits)(nil), "facetome.RockGnomeTraits")
	proto.RegisterType((*HalfElfTraits)(nil), "facetome.HalfElfTraits")
	proto.RegisterType((*HalfOrcTraits)(nil), "facetome.HalfOrcTraits")
	proto.RegisterType((*TieflingTraits)(nil), "facetome.TieflingTraits")
	proto.RegisterType((*PhysicalTraits)(nil), "facetome.PhysicalTraits")
	proto.RegisterType((*PsychologicalTraits)(nil), "facetome.PsychologicalTraits")
	proto.RegisterEnum("facetome.NPC_Alignment", NPC_Alignment_name, NPC_Alignment_value)
	proto.RegisterEnum("facetome.NPC_Language", NPC_Language_name, NPC_Language_value)
	proto.RegisterEnum("facetome.NPC_Gender", NPC_Gender_name, NPC_Gender_value)
	proto.RegisterEnum("facetome.Skill_SkillName", Skill_SkillName_name, Skill_SkillName_value)
	proto.RegisterEnum("facetome.Class_ClassName", Class_ClassName_name, Class_ClassName_value)
	proto.RegisterEnum("facetome.Class_Level", Class_Level_name, Class_Level_value)
	proto.RegisterEnum("facetome.Race_RaceName", Race_RaceName_name, Race_RaceName_value)
	proto.RegisterEnum("facetome.DragonbornTraits_DraconicAncestry", DragonbornTraits_DraconicAncestry_name, DragonbornTraits_DraconicAncestry_value)
	proto.RegisterEnum("facetome.PhysicalTraits_SkinTone", PhysicalTraits_SkinTone_name, PhysicalTraits_SkinTone_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FaceTome service

type FaceTomeClient interface {
	GetNPC(ctx context.Context, in *GetNPCRequest, opts ...grpc.CallOption) (*GetNPCResponse, error)
}

type faceTomeClient struct {
	cc *grpc.ClientConn
}

func NewFaceTomeClient(cc *grpc.ClientConn) FaceTomeClient {
	return &faceTomeClient{cc}
}

func (c *faceTomeClient) GetNPC(ctx context.Context, in *GetNPCRequest, opts ...grpc.CallOption) (*GetNPCResponse, error) {
	out := new(GetNPCResponse)
	err := grpc.Invoke(ctx, "/facetome.FaceTome/GetNPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FaceTome service

type FaceTomeServer interface {
	GetNPC(context.Context, *GetNPCRequest) (*GetNPCResponse, error)
}

func RegisterFaceTomeServer(s *grpc.Server, srv FaceTomeServer) {
	s.RegisterService(&_FaceTome_serviceDesc, srv)
}

func _FaceTome_GetNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceTomeServer).GetNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/facetome.FaceTome/GetNPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceTomeServer).GetNPC(ctx, req.(*GetNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceTome_serviceDesc = grpc.ServiceDesc{
	ServiceName: "facetome.FaceTome",
	HandlerType: (*FaceTomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNPC",
			Handler:    _FaceTome_GetNPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face-tome.proto",
}

func init() { proto.RegisterFile("face-tome.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3059 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4b, 0x6f, 0xe3, 0xc8,
	0xb5, 0xb6, 0x9e, 0x96, 0xca, 0x96, 0x54, 0x2a, 0xbb, 0xbb, 0xd5, 0x3d, 0x98, 0x7b, 0x7b, 0x38,
	0x18, 0x4c, 0xcf, 0xf4, 0xed, 0x9e, 0x0b, 0xdf, 0x07, 0x26, 0x03, 0x24, 0x00, 0x2d, 0xd1, 0x12,
	0x61, 0x8a, 0x34, 0x8a, 0x94, 0x3d, 0x3d, 0x1b, 0x86, 0xa6, 0x4a, 0x12, 0x61, 0x8a, 0x54, 0x48,
	0xaa, 0x3d, 0xbd, 0xcb, 0x2a, 0x8f, 0x1f, 0x12, 0x20, 0x59, 0x04, 0xc8, 0x62, 0xf6, 0x41, 0x90,
	0x65, 0x36, 0xb3, 0x0f, 0x02, 0x04, 0xc8, 0x22, 0xf9, 0x07, 0x59, 0x26, 0xa8, 0x07, 0x5f, 0x72,
	0x77, 0x82, 0x01, 0x1a, 0x09, 0x10, 0x64, 0x63, 0xe8, 0x7c, 0xe7, 0xab, 0x8f, 0x87, 0xa7, 0x8a,
	0xa7, 0x4e, 0x91, 0x06, 0xbd, 0x85, 0xe3, 0x92, 0x67, 0x49, 0xb8, 0x26, 0xcf, 0x37, 0x51, 0x98,
	0x84, 0xa8, 0x45, 0x01, 0x6a, 0x4b, 0x1f, 0x83, 0xce, 0x98, 0x24, 0xfa, 0xc5, 0x10, 0x93, 0xef,
	0x6d, 0x49, 0x9c, 0xa0, 0x87, 0xa0, 0x15, 0x6c, 0x5c, 0x7b, 0xbb, 0xf5, 0xe6, 0x83, 0xca, 0xe3,
	0xca, 0x93, 0x36, 0xde, 0x0f, 0x36, 0xee, 0x6c, 0xeb, 0xcd, 0xa5, 0xcf, 0x40, 0x37, 0xe5, 0xc6,
	0x9b, 0x30, 0x88, 0x09, 0x7a, 0xc2, 0xc9, 0x73, 0x27, 0x71, 0x18, 0xf9, 0xe0, 0xa4, 0xf3, 0x3c,
	0x95, 0x7e, 0x4e, 0x89, 0x74, 0xec, 0xc8, 0x49, 0x1c, 0xe9, 0xcf, 0x2d, 0x50, 0xd3, 0x2f, 0x86,
	0xe8, 0x5d, 0x00, 0x16, 0x5e, 0x14, 0x27, 0x76, 0xe0, 0xac, 0x89, 0xb8, 0x40, 0x9b, 0x21, 0xba,
	0xb3, 0x26, 0xe8, 0x1d, 0xd0, 0xf6, 0x9d, 0xd4, 0x5b, 0x65, 0xde, 0x16, 0x05, 0x98, 0x13, 0x82,
	0x9a, 0xb3, 0x24, 0x83, 0xda, 0xe3, 0xca, 0x93, 0x06, 0xa6, 0x3f, 0xd1, 0xff, 0x81, 0xb6, 0xe3,
	0x7b, 0xcb, 0x60, 0x4d, 0x82, 0x64, 0x50, 0x7f, 0x5c, 0x79, 0xd2, 0x3d, 0x79, 0x50, 0x0a, 0xe0,
	0xb9, 0x9c, 0xba, 0x71, 0xce, 0x44, 0xc7, 0xa0, 0x11, 0x6f, 0x08, 0x99, 0x0f, 0x1a, 0x4c, 0x8a,
	0x1b, 0xe8, 0x04, 0xb4, 0x7c, 0x27, 0x58, 0x6e, 0xe9, 0x35, 0x9a, 0x8f, 0x6b, 0x4f, 0xba, 0x27,
	0xf7, 0xcb, 0x5a, 0x9a, 0xf0, 0xe2, 0x8c, 0x87, 0x3e, 0x00, 0x0d, 0xd7, 0x77, 0xe2, 0x78, 0xb0,
	0xff, 0xb8, 0xf6, 0xe4, 0xe0, 0xa4, 0x97, 0x0f, 0x18, 0x52, 0x18, 0x73, 0x2f, 0x92, 0x40, 0x3d,
	0x72, 0x5c, 0x32, 0x68, 0xb1, 0x1c, 0x75, 0x73, 0x16, 0x76, 0x5c, 0x82, 0x99, 0x8f, 0x4a, 0xc5,
	0x89, 0x93, 0xc4, 0x83, 0x36, 0x23, 0x15, 0xa4, 0x4c, 0x0a, 0x63, 0xee, 0x65, 0xb4, 0x1b, 0xcf,
	0xf7, 0x07, 0x60, 0xf7, 0x8a, 0x26, 0x85, 0x31, 0xf7, 0x22, 0x19, 0xf4, 0x36, 0xab, 0x57, 0xb1,
	0xe7, 0x3a, 0xbe, 0x9d, 0x44, 0x8e, 0x97, 0xc4, 0x83, 0x03, 0xa6, 0x3b, 0xc8, 0x07, 0x5c, 0x08,
	0x82, 0xc5, 0xfc, 0xb8, 0xbb, 0x29, 0xd9, 0xe8, 0x02, 0x1c, 0x6f, 0xe2, 0x57, 0xee, 0x2a, 0xf4,
	0xc3, 0x65, 0x51, 0xe7, 0x90, 0xe9, 0xbc, 0x5b, 0xd0, 0x29, 0xb2, 0x84, 0xd8, 0xd1, 0xe6, 0x2e,
	0x88, 0xfe, 0x0b, 0x34, 0x97, 0x24, 0x98, 0x93, 0x68, 0xd0, 0x61, 0x73, 0x75, 0x5c, 0xce, 0xef,
	0x98, 0xf9, 0xb0, 0xe0, 0x48, 0x3f, 0xae, 0x80, 0x76, 0x36, 0x7d, 0xe8, 0x10, 0xb4, 0x64, 0x4d,
	0x1d, 0xeb, 0xb6, 0x36, 0x86, 0x7b, 0x05, 0x4b, 0x87, 0x95, 0x82, 0xa5, 0xc0, 0x6a, 0x6e, 0xe9,
	0x63, 0x58, 0x2b, 0x58, 0x3a, 0xac, 0x17, 0x2c, 0x05, 0x36, 0x72, 0x6b, 0x38, 0x86, 0xcd, 0x82,
	0xa5, 0xc3, 0xfd, 0x82, 0xa5, 0xc0, 0x96, 0xf4, 0xf3, 0x2a, 0x68, 0xa5, 0xd3, 0x8f, 0x7a, 0xe0,
	0x40, 0x93, 0xf5, 0xb1, 0x3d, 0x34, 0xa6, 0x53, 0x43, 0x87, 0x7b, 0xa8, 0x0f, 0x3a, 0x0c, 0x18,
	0x5d, 0xc9, 0xf8, 0x52, 0x35, 0x27, 0xb0, 0x92, 0x71, 0x14, 0x8d, 0x01, 0x55, 0xd4, 0x05, 0x80,
	0x01, 0x63, 0x55, 0xd6, 0x2d, 0x58, 0x43, 0x10, 0x1c, 0x72, 0x5b, 0x37, 0xa6, 0x94, 0x51, 0xcf,
	0x86, 0x8c, 0x8d, 0x53, 0x4d, 0xd5, 0x61, 0x23, 0x93, 0x9d, 0xc8, 0xda, 0x99, 0xa6, 0xea, 0x34,
	0xc6, 0x94, 0x63, 0xe0, 0x21, 0x1d, 0xb4, 0x9f, 0xc9, 0xc8, 0xa7, 0x2f, 0x4c, 0x53, 0xd6, 0x60,
	0x0b, 0x21, 0xd0, 0xe5, 0xd1, 0x29, 0x9a, 0x62, 0x5a, 0xaa, 0xac, 0xc1, 0x76, 0x1e, 0x20, 0x96,
	0x87, 0x86, 0xae, 0x0e, 0x21, 0x40, 0x1d, 0xd0, 0xe6, 0x90, 0xa2, 0x5c, 0xc0, 0x83, 0x8c, 0xa1,
	0xea, 0x67, 0x0a, 0xd6, 0x65, 0x0d, 0x1e, 0xa2, 0x23, 0xd0, 0x63, 0xd0, 0x05, 0x56, 0xa7, 0x06,
	0x1e, 0x51, 0xa5, 0x4e, 0x16, 0x80, 0xf9, 0x42, 0xbb, 0x94, 0x75, 0xd8, 0x45, 0xc7, 0x00, 0x32,
	0x60, 0xa6, 0x8f, 0x14, 0x2c, 0x32, 0xd2, 0x93, 0x7e, 0x54, 0x01, 0x4d, 0x3e, 0x9d, 0x74, 0xc4,
	0x58, 0xd1, 0xed, 0x99, 0x7e, 0xae, 0x1b, 0x57, 0x34, 0x5b, 0x47, 0xa0, 0x47, 0x01, 0x79, 0xa4,
	0x63, 0x63, 0xfc, 0x42, 0x37, 0x66, 0x26, 0xac, 0xd0, 0xf4, 0x50, 0xf0, 0x4c, 0x99, 0xca, 0xe9,
	0x24, 0x52, 0x9b, 0x59, 0xb5, 0x74, 0x88, 0x85, 0x65, 0xdd, 0x14, 0x94, 0x3a, 0x0d, 0x39, 0x03,
	0x19, 0xd4, 0xa0, 0xf7, 0xce, 0xaf, 0x35, 0x56, 0x68, 0x38, 0xca, 0x08, 0x36, 0xa5, 0x18, 0x34,
	0xd8, 0x03, 0x44, 0xcb, 0x47, 0x9c, 0x44, 0xac, 0xe6, 0x34, 0x30, 0xfd, 0x49, 0x11, 0x37, 0x0c,
	0x58, 0x9d, 0x69, 0x60, 0xfa, 0x93, 0x22, 0x73, 0xf2, 0x65, 0x5a, 0x62, 0xe6, 0xe4, 0x4b, 0x8a,
	0x78, 0xa2, 0xb8, 0x34, 0x30, 0xfd, 0x49, 0x91, 0x5b, 0x2f, 0x16, 0xb5, 0x83, 0xfe, 0x64, 0x3a,
	0x2b, 0x67, 0xd0, 0x14, 0x3a, 0x2b, 0x47, 0xfa, 0x61, 0x1d, 0x34, 0xd8, 0xf3, 0x88, 0x3e, 0x05,
	0x80, 0x3d, 0x91, 0x79, 0xc1, 0xeb, 0x9e, 0x3c, 0xdc, 0x79, 0x68, 0xf9, 0x5f, 0x5a, 0xe3, 0x70,
	0x3b, 0x4e, 0x7f, 0xa2, 0xc7, 0xe0, 0x60, 0x13, 0x85, 0x0b, 0xcf, 0xf5, 0x48, 0xe0, 0xbe, 0x62,
	0x51, 0xb6, 0x70, 0x11, 0xa2, 0xb5, 0x9a, 0x16, 0x05, 0x7b, 0x1d, 0xce, 0x59, 0xc8, 0x6d, 0xbc,
	0x4f, 0xed, 0x69, 0x38, 0x97, 0x7e, 0x50, 0x03, 0xed, 0x4c, 0x95, 0xe6, 0xcf, 0x3c, 0x57, 0x35,
	0xcd, 0x96, 0xad, 0x89, 0xa6, 0x58, 0xea, 0xd0, 0x84, 0x7b, 0x74, 0xe6, 0x04, 0x38, 0xc4, 0xc6,
	0xa9, 0xcc, 0xd0, 0x0a, 0xcd, 0x2a, 0x47, 0x4d, 0x4d, 0x51, 0xc7, 0x13, 0x0b, 0x56, 0x0b, 0x90,
	0xa5, 0xc8, 0x9a, 0x35, 0xe1, 0xab, 0x57, 0x8c, 0xc5, 0x43, 0x59, 0x97, 0xf9, 0x6c, 0x70, 0x64,
	0xa2, 0x9a, 0x96, 0x81, 0x5f, 0xc0, 0x06, 0x7a, 0x00, 0x8e, 0x38, 0xa4, 0xea, 0x97, 0x74, 0x29,
	0x8e, 0x65, 0x4b, 0x35, 0x74, 0xd8, 0xcc, 0x47, 0xeb, 0xb2, 0x35, 0xc3, 0x0a, 0xdc, 0xa7, 0x13,
	0xc7, 0x11, 0xac, 0x68, 0xea, 0x98, 0xb2, 0x5a, 0xe8, 0x21, 0xb8, 0x27, 0xae, 0xa1, 0xab, 0x53,
	0x59, 0xb3, 0x27, 0xb2, 0x3e, 0x62, 0x8f, 0x41, 0x3b, 0xbf, 0x98, 0xaa, 0x9b, 0x2c, 0x48, 0x90,
	0x2b, 0x4c, 0x95, 0x91, 0x3a, 0x54, 0x75, 0x05, 0x1e, 0xe4, 0x77, 0x78, 0xa1, 0xe0, 0xa1, 0x72,
	0xc1, 0xae, 0x7e, 0x98, 0x33, 0xcd, 0x19, 0xbe, 0x54, 0x2f, 0xd9, 0xb2, 0xce, 0x12, 0x34, 0x52,
	0x52, 0x62, 0x17, 0xdd, 0x07, 0x28, 0xbd, 0x8a, 0xa5, 0x4e, 0xd5, 0x11, 0x0f, 0xbf, 0x87, 0xee,
	0x81, 0x7e, 0x26, 0x7b, 0x66, 0xe0, 0xa9, 0xac, 0x0f, 0x15, 0x08, 0x4b, 0x57, 0x33, 0x67, 0xb2,
	0x49, 0xc9, 0x7d, 0xe9, 0xeb, 0x06, 0x68, 0xb0, 0xbd, 0x00, 0x3d, 0x03, 0xf5, 0xd7, 0xaf, 0x01,
	0xe6, 0xe6, 0x7f, 0xd9, 0x1a, 0x60, 0x34, 0xf4, 0x14, 0x34, 0x7c, 0xf2, 0x92, 0xf8, 0x6c, 0xe2,
	0xbb, 0x27, 0xf7, 0x76, 0xf9, 0x1a, 0x75, 0x62, 0xce, 0x91, 0xbe, 0x5f, 0x05, 0xed, 0x4c, 0x80,
	0x26, 0x7e, 0xa8, 0xc9, 0xa6, 0xa9, 0xcb, 0x53, 0xc5, 0x3e, 0x95, 0xf1, 0xa9, 0x8c, 0x55, 0x99,
	0x3e, 0x7a, 0x08, 0x74, 0x4b, 0x8e, 0x11, 0xac, 0xd0, 0xb0, 0x73, 0x6c, 0xa8, 0x29, 0x58, 0x1d,
	0xc2, 0x2a, 0x4d, 0x48, 0x8e, 0x8e, 0xf0, 0x4c, 0x1d, 0xc1, 0x5a, 0x79, 0xf8, 0xd4, 0xd0, 0xcf,
	0x61, 0x9d, 0x26, 0x23, 0xc7, 0x2e, 0x64, 0x4d, 0x1e, 0xb1, 0xda, 0x55, 0x52, 0xc5, 0xb2, 0x3e,
	0x56, 0x30, 0x6c, 0xd2, 0x8c, 0xe6, 0xa8, 0x69, 0xe0, 0xa1, 0x82, 0x0d, 0x0c, 0xf7, 0xcb, 0x22,
	0x57, 0x32, 0xd6, 0x8c, 0xe1, 0x39, 0x6c, 0xdd, 0x81, 0xb1, 0x6a, 0x60, 0xd8, 0x2e, 0x6b, 0x5f,
	0xa9, 0x5f, 0xd0, 0xfb, 0x00, 0xd2, 0x1f, 0xab, 0xa0, 0xc1, 0x72, 0xc2, 0x4a, 0x9b, 0x72, 0xa9,
	0x68, 0xb6, 0xa1, 0x2b, 0x70, 0x2f, 0x37, 0xad, 0x2b, 0x43, 0x54, 0x66, 0x6e, 0x4e, 0xb0, 0xa2,
	0x88, 0xca, 0xcc, 0x80, 0x33, 0x63, 0x86, 0x61, 0xad, 0x60, 0xab, 0x97, 0xb4, 0xce, 0x64, 0xe3,
	0x4d, 0xf5, 0x73, 0xd8, 0xc8, 0xc7, 0x9b, 0xca, 0xa5, 0xa2, 0x8b, 0x9a, 0xcc, 0x00, 0xfe, 0xbc,
	0xec, 0xe7, 0x02, 0x3a, 0x5d, 0x86, 0xad, 0x42, 0x00, 0x8a, 0x0e, 0xdb, 0xac, 0x64, 0x73, 0xbe,
	0xc6, 0x14, 0x40, 0x8e, 0x58, 0x57, 0x8a, 0x76, 0x49, 0x57, 0x2e, 0x2d, 0xe2, 0x22, 0x48, 0x15,
	0x5b, 0x8a, 0x22, 0xd6, 0x6d, 0x1e, 0x27, 0xc3, 0x3a, 0xac, 0x6c, 0x8b, 0x58, 0xcf, 0x18, 0xd4,
	0xcd, 0x21, 0x53, 0xfd, 0x9c, 0x41, 0x3d, 0x56, 0xc9, 0xf3, 0x90, 0x19, 0x08, 0x73, 0x39, 0x16,
	0x36, 0xc5, 0xfa, 0x39, 0x46, 0x23, 0x67, 0x18, 0x2a, 0x05, 0xa7, 0x5b, 0x2f, 0xe0, 0x91, 0xf4,
	0x17, 0x00, 0xea, 0xb4, 0x71, 0x41, 0x4f, 0x45, 0x5b, 0x53, 0xd9, 0xed, 0xbc, 0xa8, 0x97, 0xfd,
	0xe1, 0xeb, 0x99, 0xf5, 0x37, 0x63, 0xd0, 0x5f, 0xd1, 0x3a, 0x38, 0xbf, 0x75, 0xa2, 0x45, 0xda,
	0x4b, 0x54, 0x59, 0x2f, 0x51, 0x78, 0x16, 0x26, 0x9e, 0xef, 0x8f, 0x28, 0x83, 0xb7, 0x0c, 0x93,
	0x3d, 0xdc, 0x5b, 0x95, 0x21, 0x64, 0x82, 0x7b, 0xeb, 0x70, 0x1b, 0x24, 0x8e, 0x17, 0x94, 0xc5,
	0x6a, 0xbb, 0x8d, 0xc9, 0x54, 0xd0, 0xca, 0x82, 0x47, 0xeb, 0xbb, 0x30, 0xed, 0x97, 0x56, 0xde,
	0x72, 0x65, 0x13, 0x3f, 0x93, 0xab, 0x33, 0xb9, 0x07, 0xc5, 0xd8, 0x96, 0x2b, 0xc5, 0xcf, 0x85,
	0x3a, 0xab, 0x22, 0x40, 0x25, 0x6e, 0xc3, 0x70, 0x5e, 0x94, 0x68, 0xec, 0x4a, 0x5c, 0x85, 0xe1,
	0xbc, 0x24, 0x71, 0x5b, 0x04, 0xa8, 0xc4, 0x3c, 0x0a, 0x6f, 0x8b, 0x12, 0xcd, 0x5d, 0x89, 0x51,
	0x14, 0xde, 0x96, 0x24, 0xe6, 0x45, 0x00, 0x7d, 0x17, 0x3c, 0xf2, 0xbd, 0xe5, 0x2a, 0xb1, 0x17,
	0x61, 0x98, 0xd8, 0x2b, 0xc7, 0x5f, 0xf8, 0x5e, 0xb0, 0x4c, 0xd5, 0xf6, 0x99, 0xda, 0x7b, 0xb9,
	0x9a, 0x46, 0xb9, 0x67, 0x61, 0x98, 0x4c, 0x04, 0x33, 0xd3, 0x7d, 0xe0, 0xbf, 0xde, 0x45, 0xf3,
	0x1f, 0x27, 0xe1, 0xf6, 0xae, 0x78, 0x6b, 0x37, 0xff, 0x26, 0xa5, 0xdd, 0x11, 0x3e, 0x8a, 0xef,
	0xc2, 0xe8, 0x33, 0x70, 0xb8, 0xda, 0xae, 0x9d, 0x20, 0xd5, 0xe2, 0x4d, 0x70, 0xa1, 0xe8, 0x4d,
	0xa8, 0x37, 0xd3, 0x38, 0x58, 0xe5, 0x26, 0x52, 0x41, 0x7f, 0x1e, 0x39, 0xcb, 0x30, 0xb8, 0x0e,
	0xa3, 0x4c, 0x00, 0x30, 0x81, 0x47, 0xc5, 0xbc, 0xa5, 0x94, 0x4c, 0x05, 0xce, 0x77, 0x30, 0x34,
	0x05, 0x47, 0x8b, 0x30, 0x22, 0x71, 0x62, 0x2f, 0x83, 0x70, 0x4d, 0xca, 0xad, 0xf3, 0x3b, 0xb9,
	0xd8, 0x19, 0x23, 0x8d, 0x29, 0x27, 0x53, 0xeb, 0x2f, 0x76, 0x41, 0xba, 0xe6, 0xa3, 0xd0, 0xbd,
	0x29, 0x8b, 0x1d, 0xee, 0xae, 0x79, 0x1c, 0xba, 0x37, 0x65, 0xa9, 0x5e, 0x54, 0x86, 0xd8, 0xf2,
	0x74, 0xfc, 0x45, 0x71, 0x61, 0x74, 0xee, 0x2c, 0x4f, 0xc7, 0x5f, 0x94, 0x97, 0x67, 0x11, 0xc8,
	0x24, 0xc2, 0xc8, 0x4d, 0x25, 0xba, 0xaf, 0x93, 0x30, 0x22, 0xb7, 0x2c, 0x91, 0x01, 0x68, 0x08,
	0x7a, 0x89, 0x47, 0x4a, 0x73, 0xde, 0xdb, 0x3d, 0x54, 0x58, 0x82, 0x90, 0x69, 0x74, 0x93, 0x12,
	0x22, 0xfd, 0xa2, 0x0a, 0x5a, 0x69, 0x69, 0xa0, 0x95, 0x09, 0xcb, 0x43, 0x85, 0x75, 0xce, 0x67,
	0xf6, 0x44, 0xd5, 0x34, 0xb8, 0x47, 0xb7, 0xaf, 0x02, 0x38, 0x35, 0x66, 0xba, 0x25, 0xab, 0x3a,
	0xef, 0x4d, 0x98, 0x43, 0xd1, 0x28, 0x77, 0x3c, 0xe1, 0xbd, 0x49, 0x06, 0x5d, 0x19, 0x06, 0xdd,
	0xa5, 0x8a, 0xd0, 0x08, 0x1b, 0x57, 0xb0, 0x8e, 0x1e, 0x81, 0xfb, 0x0c, 0xa2, 0x9d, 0xb4, 0xaa,
	0x8f, 0x6d, 0x8d, 0x96, 0xbc, 0x33, 0xc3, 0xb0, 0x78, 0x97, 0x92, 0xf9, 0x68, 0x7b, 0x61, 0x9b,
	0x96, 0x31, 0xb3, 0x60, 0x93, 0x96, 0x71, 0xee, 0x98, 0x4d, 0x65, 0x7a, 0x22, 0xc8, 0x62, 0xc5,
	0xf2, 0xd8, 0xd0, 0x4f, 0x0d, 0xac, 0xf3, 0x2d, 0x8a, 0x81, 0xb4, 0x8d, 0x57, 0xec, 0x33, 0x03,
	0x2b, 0xa6, 0x05, 0xdb, 0x19, 0x97, 0xc3, 0x98, 0x6e, 0x67, 0x20, 0x0b, 0x8c, 0x5e, 0x89, 0x46,
	0xc7, 0xdb, 0xee, 0x1c, 0x32, 0xf0, 0x10, 0x1e, 0x66, 0x90, 0xa5, 0x2a, 0xbc, 0xeb, 0xef, 0x9c,
	0xf6, 0x40, 0x27, 0x72, 0x5c, 0x2f, 0x3b, 0x82, 0x49, 0x5f, 0x57, 0x41, 0x6f, 0xa7, 0x52, 0xa2,
	0x8f, 0x0b, 0xcd, 0x60, 0xe5, 0xf5, 0x47, 0xc8, 0xb4, 0x3b, 0x44, 0xff, 0x01, 0xc0, 0xdc, 0x89,
	0x6e, 0x5e, 0x7a, 0xb1, 0x27, 0xfa, 0xdf, 0x16, 0x2e, 0x20, 0xe8, 0x19, 0x40, 0xb4, 0xb2, 0xbe,
	0x24, 0x81, 0x1d, 0x91, 0xd8, 0xf3, 0x69, 0xbb, 0xc9, 0x0f, 0xde, 0x2d, 0xdc, 0x17, 0x1e, 0x9c,
	0x39, 0xd0, 0xff, 0x83, 0x07, 0x29, 0xdd, 0x0d, 0xd7, 0xd7, 0x4e, 0xc2, 0xe2, 0x0c, 0xbc, 0x60,
	0xc9, 0x8a, 0x68, 0x0b, 0xdf, 0x13, 0xee, 0x21, 0xf3, 0x5a, 0xc2, 0x89, 0x3e, 0x05, 0x83, 0x74,
	0x5c, 0x12, 0x86, 0xbe, 0x5d, 0x6c, 0x77, 0x1b, 0x6c, 0xe0, 0x7d, 0xe1, 0xb7, 0xc2, 0xd0, 0xbf,
	0x28, 0x74, 0xbe, 0xef, 0x83, 0x4e, 0x9c, 0x84, 0x01, 0xb1, 0xdd, 0x6d, 0xc0, 0xae, 0xd3, 0x64,
	0xf4, 0x43, 0x06, 0x0e, 0x39, 0x86, 0x9e, 0x82, 0x7e, 0x2e, 0xbf, 0x5d, 0xae, 0x02, 0x12, 0xf3,
	0x0a, 0xd8, 0xc2, 0x30, 0xd3, 0x15, 0xb8, 0xf4, 0xbb, 0x2a, 0x38, 0x7a, 0xcd, 0x7e, 0xf1, 0xef,
	0xb4, 0xde, 0x49, 0xeb, 0xff, 0x82, 0x74, 0xb8, 0xed, 0x44, 0xeb, 0x30, 0xca, 0xa3, 0xe2, 0xb9,
	0x3d, 0x16, 0x5e, 0x99, 0x3a, 0xd3, 0xa0, 0xa4, 0x9f, 0x56, 0x41, 0xa7, 0xb4, 0x81, 0xbe, 0xd5,
	0xcc, 0xfe, 0x27, 0x38, 0xb8, 0x21, 0x24, 0xb0, 0x63, 0x12, 0xc4, 0x24, 0x16, 0x29, 0x05, 0x14,
	0x32, 0x19, 0x82, 0xde, 0x03, 0x87, 0x0b, 0xf2, 0xca, 0x76, 0x02, 0x97, 0xc4, 0x49, 0xf4, 0x4a,
	0x24, 0xf0, 0x60, 0x41, 0x5e, 0xc9, 0x02, 0x42, 0xf7, 0x41, 0x33, 0x89, 0x28, 0x41, 0x24, 0x49,
	0x58, 0xe8, 0x39, 0x38, 0xa2, 0x65, 0xf7, 0x96, 0x38, 0x9b, 0x30, 0xc8, 0x6f, 0x96, 0xa7, 0xa6,
	0x4f, 0xfc, 0xc5, 0x15, 0xf3, 0x64, 0xe9, 0x1f, 0x80, 0x7d, 0xd7, 0x09, 0x92, 0xc8, 0xdb, 0x88,
	0x84, 0xa4, 0x26, 0xfa, 0x00, 0x74, 0xc9, 0x97, 0x49, 0xe4, 0xd8, 0xd9, 0x7b, 0xa6, 0x16, 0x23,
	0x74, 0x18, 0x9a, 0xbe, 0x5f, 0x90, 0xbe, 0xaa, 0x82, 0x4e, 0xa9, 0x51, 0xf8, 0x97, 0x4d, 0x95,
	0x04, 0x3a, 0x0b, 0x9f, 0x90, 0xc4, 0x0e, 0x17, 0xac, 0x5f, 0x11, 0x09, 0x3b, 0x60, 0xa0, 0xb1,
	0xa0, 0xcd, 0x07, 0xfa, 0x10, 0xc0, 0xb5, 0x13, 0xdf, 0x50, 0x4a, 0xb2, 0x22, 0xf6, 0xad, 0xe7,
	0xcf, 0xd3, 0xb4, 0x51, 0xdc, 0x58, 0x58, 0x2b, 0x72, 0xe5, 0xf9, 0x73, 0xe9, 0x4f, 0x55, 0xd0,
	0x29, 0x35, 0x47, 0x6f, 0x35, 0x6d, 0x9f, 0x80, 0xa3, 0x78, 0xbb, 0x21, 0x91, 0x17, 0x46, 0x76,
	0x81, 0xc8, 0xd3, 0x87, 0x52, 0xd7, 0xe8, 0x8d, 0x79, 0xae, 0xff, 0xdd, 0x3c, 0x37, 0xfe, 0x56,
	0x9e, 0x9b, 0xa5, 0x3c, 0x3f, 0x03, 0x28, 0xde, 0x06, 0xbc, 0xcf, 0xa3, 0xfa, 0x5e, 0xe2, 0xbd,
	0x24, 0x22, 0x79, 0xfd, 0xd4, 0x63, 0xa6, 0x0e, 0xf4, 0x2e, 0x00, 0xac, 0xad, 0x5c, 0x3b, 0x4b,
	0xcf, 0x15, 0xc9, 0x6b, 0x53, 0x64, 0x4a, 0x01, 0xf4, 0xdf, 0xe0, 0x98, 0xb9, 0x77, 0xa7, 0xad,
	0xcd, 0xef, 0x8d, 0xfa, 0xca, 0xf3, 0x26, 0xfd, 0xba, 0x02, 0x1e, 0xbc, 0xa1, 0x73, 0xfc, 0x46,
	0x49, 0x3f, 0x06, 0x0d, 0x7f, 0xeb, 0xde, 0xa4, 0x2f, 0x37, 0xb8, 0x41, 0xd1, 0xeb, 0xc8, 0x79,
	0x99, 0x56, 0x46, 0x6e, 0xa0, 0x0f, 0x79, 0xff, 0xc2, 0x9a, 0x8f, 0xc0, 0x5b, 0x5f, 0xfb, 0x44,
	0xe4, 0xb4, 0x9b, 0xc2, 0x3a, 0x43, 0x29, 0x31, 0x70, 0x92, 0x6d, 0xe4, 0xf8, 0x76, 0x9c, 0x10,
	0xc7, 0x4f, 0x56, 0x22, 0xb5, 0x5d, 0x01, 0x9b, 0x1c, 0x95, 0x7e, 0x55, 0x01, 0x47, 0xaf, 0x69,
	0x51, 0xff, 0xf9, 0x77, 0xf0, 0x11, 0x80, 0xbc, 0xc3, 0x2e, 0xec, 0x12, 0xfc, 0x16, 0x7a, 0x0c,
	0xcf, 0xf7, 0x08, 0xe9, 0x5b, 0xe0, 0xa0, 0xd0, 0x19, 0x7f, 0x93, 0xd0, 0xa5, 0xaf, 0x6b, 0x00,
	0xee, 0x36, 0xc5, 0xdf, 0xe8, 0xde, 0x3f, 0x67, 0x7d, 0xb7, 0x1b, 0x06, 0x9e, 0x9b, 0xaf, 0x62,
	0xfe, 0xb6, 0xe2, 0xe9, 0x9b, 0xfb, 0x6e, 0x0a, 0xb0, 0x31, 0xe9, 0x2a, 0x67, 0x6d, 0x78, 0x09,
	0xa1, 0xfb, 0xd0, 0x75, 0x44, 0x9c, 0x64, 0x25, 0xd6, 0xa4, 0xc8, 0xe3, 0x21, 0x07, 0xf9, 0x62,
	0x64, 0xdb, 0xbb, 0xb3, 0x76, 0x96, 0x84, 0xa5, 0x29, 0x4e, 0xd8, 0x73, 0x52, 0x17, 0xdb, 0x3b,
	0x73, 0xe0, 0x0c, 0x97, 0xfe, 0x50, 0x61, 0x37, 0x5b, 0xbe, 0xcc, 0x11, 0xe8, 0x8d, 0xb0, 0x3c,
	0xb4, 0x65, 0x7d, 0x68, 0xda, 0xa7, 0x9a, 0x3c, 0x3c, 0xe7, 0xef, 0x48, 0x8a, 0xe0, 0x4c, 0x81,
	0x95, 0x1d, 0x22, 0x96, 0x4d, 0x13, 0x56, 0xd1, 0x31, 0x80, 0x45, 0xd0, 0xd0, 0xbf, 0x50, 0x60,
	0xad, 0x8c, 0x0e, 0x8d, 0x8b, 0x0b, 0x05, 0xc3, 0x7a, 0x59, 0x74, 0x6c, 0x68, 0x23, 0xd8, 0x28,
	0x8b, 0x8e, 0xb1, 0xc2, 0x5e, 0x26, 0xf4, 0x41, 0x27, 0x07, 0xb1, 0x32, 0x82, 0xfb, 0x65, 0x45,
	0x53, 0xd5, 0x2e, 0x15, 0x0c, 0x5b, 0xe5, 0xd1, 0x57, 0x13, 0xd5, 0x52, 0x60, 0x5b, 0xfa, 0x6d,
	0x05, 0xf4, 0xef, 0x1c, 0x4d, 0xde, 0x6a, 0x19, 0x7c, 0x1f, 0x74, 0xf8, 0x61, 0x26, 0xed, 0x10,
	0xc4, 0xcc, 0x30, 0x30, 0xed, 0x10, 0x3e, 0x02, 0x30, 0x7d, 0x02, 0x3d, 0xdf, 0xdf, 0x32, 0x29,
	0x3e, 0x31, 0xe9, 0x93, 0xa9, 0x0a, 0x18, 0x7d, 0x0c, 0xfa, 0xf1, 0x86, 0x38, 0x37, 0xf6, 0xad,
	0x97, 0xac, 0xec, 0x6b, 0xe2, 0xc4, 0xe2, 0xd8, 0x4c, 0xd7, 0x3a, 0x75, 0x5c, 0x79, 0xc9, 0xea,
	0x94, 0xc1, 0xd2, 0x2f, 0x2b, 0xa0, 0xb7, 0x73, 0x56, 0xfa, 0xc7, 0xdf, 0xdb, 0xfb, 0xa0, 0xe3,
	0x44, 0x89, 0xb7, 0xf0, 0x5c, 0x62, 0xfb, 0x61, 0x94, 0xae, 0xb8, 0xc3, 0x14, 0xd4, 0xc2, 0x88,
	0xb0, 0xba, 0xed, 0x05, 0x37, 0x24, 0xca, 0xf6, 0x47, 0x66, 0x49, 0x3f, 0xab, 0x80, 0x4e, 0xe9,
	0x98, 0xf6, 0x56, 0xe3, 0xdf, 0xdd, 0x50, 0x6a, 0x77, 0x37, 0x14, 0x5a, 0x59, 0xd8, 0xdb, 0xe8,
	0x97, 0x24, 0x76, 0x12, 0xcf, 0xf7, 0x92, 0x74, 0x7f, 0xef, 0x31, 0xfc, 0x32, 0x83, 0xa5, 0xdf,
	0x88, 0x58, 0xf3, 0xe3, 0xdf, 0xdb, 0x8c, 0xf5, 0x11, 0x68, 0xad, 0x49, 0xe0, 0xb8, 0x79, 0x9a,
	0x33, 0x9b, 0x3e, 0xd8, 0x11, 0xf1, 0x49, 0x90, 0xf8, 0x24, 0x8e, 0x6d, 0x12, 0xcc, 0xb7, 0x59,
	0x9a, 0x61, 0xee, 0x50, 0x18, 0x4e, 0x7b, 0xaa, 0xd8, 0x79, 0x49, 0xab, 0x80, 0x93, 0x24, 0x8e,
	0x7b, 0x93, 0xae, 0x9e, 0x0e, 0x47, 0x65, 0x0e, 0x4a, 0x5f, 0x55, 0x40, 0xb7, 0x7c, 0x34, 0x7d,
	0xdb, 0x9d, 0xfd, 0x8a, 0xf8, 0xbe, 0x17, 0xaf, 0x8a, 0xc5, 0x48, 0x74, 0xf6, 0xc2, 0x93, 0x57,
	0x23, 0xba, 0x13, 0x78, 0xc1, 0x82, 0x44, 0x81, 0xe3, 0xdb, 0x3e, 0x59, 0x3a, 0x6e, 0x3a, 0x0b,
	0xdd, 0x14, 0xd6, 0x18, 0x2a, 0xfd, 0xa4, 0x0e, 0xba, 0xe5, 0xcf, 0x74, 0xb4, 0xaf, 0x58, 0x11,
	0xfe, 0x86, 0x87, 0x90, 0x44, 0x7c, 0xce, 0x00, 0x1c, 0x3a, 0x23, 0x24, 0x29, 0x10, 0xbc, 0xc0,
	0x5d, 0x89, 0xaf, 0x1b, 0x82, 0xa0, 0x06, 0xee, 0x8a, 0xae, 0xce, 0x5b, 0x66, 0x89, 0xef, 0x1c,
	0xc2, 0x42, 0xdf, 0x01, 0xed, 0xf8, 0xc6, 0xa3, 0x87, 0x86, 0x80, 0x88, 0xaf, 0xa9, 0xef, 0xbd,
	0xe9, 0x6b, 0xe1, 0x73, 0xf3, 0xc6, 0x0b, 0xac, 0x30, 0x20, 0xb8, 0x15, 0x8b, 0x5f, 0xa2, 0x5b,
	0xe1, 0xef, 0xbd, 0x6a, 0x4f, 0xda, 0x58, 0x58, 0xd2, 0xef, 0xab, 0xa0, 0x95, 0xd2, 0x51, 0x07,
	0xb4, 0xcd, 0x73, 0x55, 0xb7, 0x2f, 0x64, 0x4d, 0x81, 0x7b, 0xf4, 0x90, 0xcd, 0x4c, 0x43, 0x53,
	0x2f, 0x15, 0xfe, 0x29, 0x8f, 0xd9, 0x96, 0xac, 0xf3, 0x57, 0xb3, 0xcc, 0x1a, 0xcd, 0xcc, 0xf3,
	0x17, 0xb0, 0x96, 0x0d, 0x1e, 0xc9, 0xf8, 0x1c, 0xd6, 0x33, 0xf7, 0x6c, 0x7a, 0xaa, 0x60, 0xd8,
	0xc8, 0xec, 0xb4, 0x98, 0xa6, 0xf4, 0x31, 0x56, 0x5e, 0xf0, 0x42, 0xca, 0x4c, 0x56, 0xe9, 0x6d,
	0x73, 0x48, 0x23, 0x68, 0x89, 0x57, 0xff, 0x3a, 0x2b, 0xf5, 0x02, 0x6c, 0xe7, 0x54, 0x5a, 0xeb,
	0x05, 0x0a, 0xc4, 0x8b, 0x7f, 0x5d, 0x14, 0x7b, 0x01, 0x1f, 0x64, 0x30, 0xaf, 0xf6, 0x02, 0x3e,
	0xcc, 0x84, 0x69, 0xb9, 0x17, 0x60, 0x27, 0x13, 0x66, 0x21, 0x0a, 0xb4, 0x2b, 0x3e, 0x49, 0xe8,
	0xb4, 0xe0, 0x0b, 0xac, 0x97, 0xa9, 0xf2, 0x8a, 0x2f, 0x60, 0x98, 0x09, 0xb0, 0x92, 0x2f, 0xd0,
	0xbe, 0xf4, 0x0c, 0x1c, 0xbd, 0xe6, 0x2b, 0x6c, 0x61, 0x46, 0x2a, 0xc5, 0x19, 0x39, 0x51, 0x41,
	0xeb, 0xcc, 0x71, 0x89, 0x15, 0xae, 0x09, 0xfa, 0x36, 0x68, 0xf2, 0xaf, 0xfa, 0xa8, 0xf0, 0x22,
	0xa8, 0xf4, 0x3f, 0x01, 0x8f, 0x06, 0x77, 0x1d, 0xfc, 0x1f, 0x00, 0xa4, 0xbd, 0xd3, 0x87, 0x5f,
	0x3c, 0xf0, 0x82, 0x84, 0xad, 0xd9, 0x4f, 0x36, 0xd7, 0x9f, 0xa4, 0x44, 0x67, 0xe3, 0x5d, 0x37,
	0xd9, 0x3f, 0x1b, 0xfc, 0xcf, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x31, 0x53, 0xaa, 0x4b, 0x7f,
	0x20, 0x00, 0x00,
}
